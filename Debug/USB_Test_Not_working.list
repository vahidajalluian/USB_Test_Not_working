
USB_Test_Not_working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068e0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08006a90  08006a90  00007a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba4  08006ba4  00008158  2**0
                  CONTENTS
  4 .ARM          00000008  08006ba4  08006ba4  00007ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bac  08006bac  00008158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bac  08006bac  00007bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bb0  08006bb0  00007bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  08006bb4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008158  2**0
                  CONTENTS
 10 .bss          0000b184  20000158  20000158  00008158  2**3
                  ALLOC
 11 ._user_heap_stack 00006004  2000b2dc  2000b2dc  00008158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008158  2**0
                  CONTENTS, READONLY
 13 .debug_info   000284ad  00000000  00000000  00008188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e04  00000000  00000000  00030635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00011319  00000000  00000000  00036439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001818  00000000  00000000  00047758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001cb9  00000000  00000000  00048f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029571  00000000  00000000  0004ac29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027d2b  00000000  00000000  0007419a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e836b  00000000  00000000  0009bec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00184230  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004ad0  00000000  00000000  00184274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000003a  00000000  00000000  00188d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000158 	.word	0x20000158
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006a78 	.word	0x08006a78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000015c 	.word	0x2000015c
 80001ec:	08006a78 	.word	0x08006a78

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000590:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000592:	f005 f88f 	bl	80056b4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f003 fada 	bl	8003b50 <osDelay>
  for(;;)
 800059c:	e7fb      	b.n	8000596 <StartDefaultTask+0x6>
 800059e:	bf00      	nop

080005a0 <vApplicationTickHook>:
}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80005a4:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a6:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <MX_FREERTOS_Init+0x14>)
 80005a8:	4804      	ldr	r0, [pc, #16]	@ (80005bc <MX_FREERTOS_Init+0x18>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	f003 fa88 	bl	8003ac0 <osThreadNew>
 80005b0:	4b03      	ldr	r3, [pc, #12]	@ (80005c0 <MX_FREERTOS_Init+0x1c>)
 80005b2:	6018      	str	r0, [r3, #0]
}
 80005b4:	bd08      	pop	{r3, pc}
 80005b6:	bf00      	nop
 80005b8:	08006a9c 	.word	0x08006a9c
 80005bc:	08000591 	.word	0x08000591
 80005c0:	20000174 	.word	0x20000174

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <MX_GPIO_Init+0x34>)
 80005c8:	2100      	movs	r1, #0
 80005ca:	9100      	str	r1, [sp, #0]
 80005cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d6:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	9101      	str	r1, [sp, #4]
 80005e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e2:	f042 0202 	orr.w	r2, r2, #2
 80005e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	9b01      	ldr	r3, [sp, #4]

}
 80005f2:	b002      	add	sp, #8
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	2300      	movs	r3, #0
{
 8000600:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8000606:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800060e:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4923      	ldr	r1, [pc, #140]	@ (80006a0 <SystemClock_Config+0xa4>)
 8000614:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000616:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061a:	4a22      	ldr	r2, [pc, #136]	@ (80006a4 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000620:	6408      	str	r0, [r1, #64]	@ 0x40
 8000622:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000624:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000628:	9101      	str	r1, [sp, #4]
 800062a:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	9302      	str	r3, [sp, #8]
 800062e:	6813      	ldr	r3, [r2, #0]
 8000630:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000634:	6013      	str	r3, [r2, #0]
 8000636:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2001      	movs	r0, #1
 800063a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000642:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000646:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000648:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000652:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2107      	movs	r1, #7
 8000656:	2002      	movs	r0, #2
 8000658:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 25;
 800065c:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLN = 336;
 800065e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000664:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000666:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f001 f8c6 	bl	80017f8 <HAL_RCC_OscConfig>
 800066c:	b108      	cbz	r0, 8000672 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	220f      	movs	r2, #15
 8000674:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000682:	a803      	add	r0, sp, #12
 8000684:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000686:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068c:	f001 fad0 	bl	8001c30 <HAL_RCC_ClockConfig>
 8000690:	b108      	cbz	r0, 8000696 <SystemClock_Config+0x9a>
 8000692:	b672      	cpsid	i
  while (1)
 8000694:	e7fe      	b.n	8000694 <SystemClock_Config+0x98>
  HAL_RCC_EnableCSS();
 8000696:	f001 fa91 	bl	8001bbc <HAL_RCC_EnableCSS>
}
 800069a:	b015      	add	sp, #84	@ 0x54
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <main>:
{
 80006a8:	b508      	push	{r3, lr}
  HAL_Init();
 80006aa:	f000 f931 	bl	8000910 <HAL_Init>
  SystemClock_Config();
 80006ae:	f7ff ffa5 	bl	80005fc <SystemClock_Config>
  MX_GPIO_Init();
 80006b2:	f7ff ff87 	bl	80005c4 <MX_GPIO_Init>
  osKernelInitialize();
 80006b6:	f003 f9d7 	bl	8003a68 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006ba:	f7ff ff73 	bl	80005a4 <MX_FREERTOS_Init>
  osKernelStart();
 80006be:	f003 f9e5 	bl	8003a8c <osKernelStart>
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <main+0x1a>

080006c4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM3) {
 80006c4:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80006c6:	6802      	ldr	r2, [r0, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d000      	beq.n	80006ce <HAL_TIM_PeriodElapsedCallback+0xa>
}
 80006cc:	4770      	bx	lr
    HAL_IncTick();
 80006ce:	f000 b939 	b.w	8000944 <HAL_IncTick>
 80006d2:	bf00      	nop
 80006d4:	40000400 	.word	0x40000400

080006d8 <Error_Handler>:
 80006d8:	b672      	cpsid	i
  while (1)
 80006da:	e7fe      	b.n	80006da <Error_Handler+0x2>

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <HAL_MspInit+0x3c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80006e6:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80006ea:	6459      	str	r1, [r3, #68]	@ 0x44
 80006ec:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80006ee:	f400 4080 	and.w	r0, r0, #16384	@ 0x4000
 80006f2:	9000      	str	r0, [sp, #0]
 80006f4:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	9201      	str	r2, [sp, #4]
 80006f8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80006fa:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 80006fe:	6418      	str	r0, [r3, #64]	@ 0x40
 8000700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800070a:	210f      	movs	r1, #15
 800070c:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000710:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000712:	f000 b94d 	b.w	80009b0 <HAL_NVIC_SetPriority>
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000720:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <HAL_InitTick+0x94>)
 8000722:	2200      	movs	r2, #0
 8000724:	9202      	str	r2, [sp, #8]
 8000726:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000728:	f042 0202 	orr.w	r2, r2, #2
 800072c:	641a      	str	r2, [r3, #64]	@ 0x40
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	9302      	str	r3, [sp, #8]
{
 8000736:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000738:	a901      	add	r1, sp, #4
 800073a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 800073c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800073e:	f001 fb2b 	bl	8001d98 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000742:	9b06      	ldr	r3, [sp, #24]
 8000744:	b9d3      	cbnz	r3, 800077c <HAL_InitTick+0x60>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000746:	f001 fb17 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 800074a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800074c:	4a19      	ldr	r2, [pc, #100]	@ (80007b4 <HAL_InitTick+0x98>)

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800074e:	4c1a      	ldr	r4, [pc, #104]	@ (80007b8 <HAL_InitTick+0x9c>)
 8000750:	491a      	ldr	r1, [pc, #104]	@ (80007bc <HAL_InitTick+0xa0>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000752:	fba2 2303 	umull	r2, r3, r2, r3
 8000756:	0c9b      	lsrs	r3, r3, #18
 8000758:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 800075a:	2200      	movs	r2, #0
  htim3.Init.Prescaler = uwPrescalerValue;
 800075c:	e9c4 1300 	strd	r1, r3, [r4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim3);
 8000760:	4620      	mov	r0, r4
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000762:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim3.Init.ClockDivision = 0;
 8000766:	6122      	str	r2, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	60a2      	str	r2, [r4, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076a:	61a2      	str	r2, [r4, #24]
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800076c:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim3);
 800076e:	f001 fc93 	bl	8002098 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000772:	4606      	mov	r6, r0
 8000774:	b130      	cbz	r0, 8000784 <HAL_InitTick+0x68>
    }
  }

 /* Return function status */
  return status;
}
 8000776:	4630      	mov	r0, r6
 8000778:	b008      	add	sp, #32
 800077a:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800077c:	f001 fafc 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8000780:	0043      	lsls	r3, r0, #1
 8000782:	e7e3      	b.n	800074c <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000784:	4620      	mov	r0, r4
 8000786:	f001 fb3b 	bl	8001e00 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800078a:	4606      	mov	r6, r0
 800078c:	2800      	cmp	r0, #0
 800078e:	d1f2      	bne.n	8000776 <HAL_InitTick+0x5a>
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000790:	201d      	movs	r0, #29
 8000792:	f000 f949 	bl	8000a28 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000796:	2d0f      	cmp	r5, #15
 8000798:	d901      	bls.n	800079e <HAL_InitTick+0x82>
        status = HAL_ERROR;
 800079a:	2601      	movs	r6, #1
 800079c:	e7eb      	b.n	8000776 <HAL_InitTick+0x5a>
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800079e:	4632      	mov	r2, r6
 80007a0:	4629      	mov	r1, r5
 80007a2:	201d      	movs	r0, #29
 80007a4:	f000 f904 	bl	80009b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <HAL_InitTick+0xa4>)
 80007aa:	601d      	str	r5, [r3, #0]
 80007ac:	e7e3      	b.n	8000776 <HAL_InitTick+0x5a>
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	431bde83 	.word	0x431bde83
 80007b8:	20000178 	.word	0x20000178
 80007bc:	40000400 	.word	0x40000400
 80007c0:	20000008 	.word	0x20000008

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80007c6:	f001 fb0b 	bl	8001de0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ca:	e7fe      	b.n	80007ca <NMI_Handler+0x6>

080007cc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <HardFault_Handler>
 80007ce:	bf00      	nop

080007d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler>
 80007d2:	bf00      	nop

080007d4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <BusFault_Handler>
 80007d6:	bf00      	nop

080007d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler>
 80007da:	bf00      	nop

080007dc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80007e0:	4801      	ldr	r0, [pc, #4]	@ (80007e8 <TIM3_IRQHandler+0x8>)
 80007e2:	f001 bb4f 	b.w	8001e84 <HAL_TIM_IRQHandler>
 80007e6:	bf00      	nop
 80007e8:	20000178 	.word	0x20000178

080007ec <OTG_HS_EP1_OUT_IRQHandler>:
void OTG_HS_EP1_OUT_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80007ec:	4801      	ldr	r0, [pc, #4]	@ (80007f4 <OTG_HS_EP1_OUT_IRQHandler+0x8>)
 80007ee:	f000 baed 	b.w	8000dcc <HAL_PCD_IRQHandler>
 80007f2:	bf00      	nop
 80007f4:	2000acac 	.word	0x2000acac

080007f8 <OTG_HS_EP1_IN_IRQHandler>:
}

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
 80007f8:	4801      	ldr	r0, [pc, #4]	@ (8000800 <OTG_HS_EP1_IN_IRQHandler+0x8>)
 80007fa:	f000 bae7 	b.w	8000dcc <HAL_PCD_IRQHandler>
 80007fe:	bf00      	nop
 8000800:	2000acac 	.word	0x2000acac

08000804 <OTG_HS_IRQHandler>:
}

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
 8000804:	4801      	ldr	r0, [pc, #4]	@ (800080c <OTG_HS_IRQHandler+0x8>)
 8000806:	f000 bae1 	b.w	8000dcc <HAL_PCD_IRQHandler>
 800080a:	bf00      	nop
 800080c:	2000acac 	.word	0x2000acac

08000810 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000810:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000812:	1e16      	subs	r6, r2, #0
 8000814:	dd07      	ble.n	8000826 <_read+0x16>
 8000816:	460c      	mov	r4, r1
 8000818:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800081a:	f3af 8000 	nop.w
 800081e:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	42a5      	cmp	r5, r4
 8000824:	d1f9      	bne.n	800081a <_read+0xa>
  }

  return len;
}
 8000826:	4630      	mov	r0, r6
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	bf00      	nop

0800082c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800082c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	1e16      	subs	r6, r2, #0
 8000830:	dd07      	ble.n	8000842 <_write+0x16>
 8000832:	460c      	mov	r4, r1
 8000834:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8000836:	f814 0b01 	ldrb.w	r0, [r4], #1
 800083a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	42a5      	cmp	r5, r4
 8000840:	d1f9      	bne.n	8000836 <_write+0xa>
  }
  return len;
}
 8000842:	4630      	mov	r0, r6
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	bf00      	nop

08000848 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop

08000850 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000850:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000854:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000856:	2000      	movs	r0, #0
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop

0800085c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800085c:	2001      	movs	r0, #1
 800085e:	4770      	bx	lr

08000860 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000860:	2000      	movs	r0, #0
 8000862:	4770      	bx	lr

08000864 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000864:	490c      	ldr	r1, [pc, #48]	@ (8000898 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000866:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8000868:	680b      	ldr	r3, [r1, #0]
{
 800086a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4c0c      	ldr	r4, [pc, #48]	@ (80008a0 <_sbrk+0x3c>)
 800086e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000870:	b12b      	cbz	r3, 800087e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000872:	4418      	add	r0, r3
 8000874:	4290      	cmp	r0, r2
 8000876:	d807      	bhi.n	8000888 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000878:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800087a:	4618      	mov	r0, r3
 800087c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <_sbrk+0x40>)
 8000880:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000882:	4418      	add	r0, r3
 8000884:	4290      	cmp	r0, r2
 8000886:	d9f7      	bls.n	8000878 <_sbrk+0x14>
    errno = ENOMEM;
 8000888:	f005 faea 	bl	8005e60 <__errno>
 800088c:	230c      	movs	r3, #12
 800088e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000894:	4618      	mov	r0, r3
 8000896:	bd10      	pop	{r4, pc}
 8000898:	200001c0 	.word	0x200001c0
 800089c:	20030000 	.word	0x20030000
 80008a0:	00004000 	.word	0x00004000
 80008a4:	2000b2e0 	.word	0x2000b2e0

080008a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a8:	4a03      	ldr	r2, [pc, #12]	@ (80008b8 <SystemInit+0x10>)
 80008aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80008ae:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008b2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80008bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008c0:	f7ff fff2 	bl	80008a8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c4:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008c6:	490d      	ldr	r1, [pc, #52]	@ (80008fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008ea:	f005 fabf 	bl	8005e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ee:	f7ff fedb 	bl	80006a8 <main>
  bx  lr    
 80008f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80008f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000900:	08006bb4 	.word	0x08006bb4
  ldr r2, =_sbss
 8000904:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000908:	2000b2dc 	.word	0x2000b2dc

0800090c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC_IRQHandler>
	...

08000910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <HAL_Init+0x30>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800091a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000922:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800092a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092c:	2003      	movs	r0, #3
 800092e:	f000 f82d 	bl	800098c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000932:	200f      	movs	r0, #15
 8000934:	f7ff fef2 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000938:	f7ff fed0 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800093c:	2000      	movs	r0, #0
 800093e:	bd08      	pop	{r3, pc}
 8000940:	40023c00 	.word	0x40023c00

08000944 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000944:	4a03      	ldr	r2, [pc, #12]	@ (8000954 <HAL_IncTick+0x10>)
 8000946:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <HAL_IncTick+0x14>)
 8000948:	6811      	ldr	r1, [r2, #0]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	440b      	add	r3, r1
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	200001c4 	.word	0x200001c4
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800095c:	4b01      	ldr	r3, [pc, #4]	@ (8000964 <HAL_GetTick+0x8>)
 800095e:	6818      	ldr	r0, [r3, #0]
}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	200001c4 	.word	0x200001c4

08000968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000968:	b538      	push	{r3, r4, r5, lr}
 800096a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800096c:	f7ff fff6 	bl	800095c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000970:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000972:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000974:	d002      	beq.n	800097c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000976:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <HAL_Delay+0x20>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800097c:	f7ff ffee 	bl	800095c <HAL_GetTick>
 8000980:	1b40      	subs	r0, r0, r5
 8000982:	42a0      	cmp	r0, r4
 8000984:	d3fa      	bcc.n	800097c <HAL_Delay+0x14>
  {
  }
}
 8000986:	bd38      	pop	{r3, r4, r5, pc}
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4907      	ldr	r1, [pc, #28]	@ (80009ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800098e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000990:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000996:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80009a6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <HAL_NVIC_SetPriority+0x70>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ba:	f1c3 0e07 	rsb	lr, r3, #7
 80009be:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c6:	bf28      	it	cs
 80009c8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009cc:	f1bc 0f06 	cmp.w	ip, #6
 80009d0:	d91c      	bls.n	8000a0c <HAL_NVIC_SetPriority+0x5c>
 80009d2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	fa03 f30c 	lsl.w	r3, r3, ip
 80009de:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	fa03 f30e 	lsl.w	r3, r3, lr
 80009ea:	ea21 0303 	bic.w	r3, r1, r3
 80009ee:	fa03 f30c 	lsl.w	r3, r3, ip
 80009f2:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80009f6:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80009fa:	db0a      	blt.n	8000a12 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000a00:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000a04:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a08:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a0c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0e:	4694      	mov	ip, r2
 8000a10:	e7e7      	b.n	80009e2 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <HAL_NVIC_SetPriority+0x74>)
 8000a14:	f000 000f 	and.w	r0, r0, #15
 8000a18:	4402      	add	r2, r0
 8000a1a:	7613      	strb	r3, [r2, #24]
 8000a1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a20:	e000ed00 	.word	0xe000ed00
 8000a24:	e000ecfc 	.word	0xe000ecfc

08000a28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	db07      	blt.n	8000a3c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2c:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <HAL_NVIC_EnableIRQ+0x18>)
 8000a2e:	0941      	lsrs	r1, r0, #5
 8000a30:	2301      	movs	r3, #1
 8000a32:	f000 001f 	and.w	r0, r0, #31
 8000a36:	4083      	lsls	r3, r0
 8000a38:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a48:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a4a:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8000c94 <HAL_GPIO_Init+0x250>
{
 8000a50:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8000a52:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a56:	4689      	mov	r9, r1
 8000a58:	e003      	b.n	8000a62 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	2b10      	cmp	r3, #16
 8000a5e:	f000 809c 	beq.w	8000b9a <HAL_GPIO_Init+0x156>
    ioposition = 0x01U << position;
 8000a62:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a66:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8000a6a:	43a2      	bics	r2, r4
 8000a6c:	d1f5      	bne.n	8000a5a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a6e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8000a72:	f001 0203 	and.w	r2, r1, #3
 8000a76:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a7a:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a7c:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a7e:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a82:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a84:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a88:	f240 808a 	bls.w	8000ba0 <HAL_GPIO_Init+0x15c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a8c:	2a03      	cmp	r2, #3
 8000a8e:	f040 80c0 	bne.w	8000c12 <HAL_GPIO_Init+0x1ce>
      temp = GPIOx->MODER;
 8000a92:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a94:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a98:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a9a:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a9c:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8000aa0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000aa2:	d0da      	beq.n	8000a5a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	9203      	str	r2, [sp, #12]
 8000aa8:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8000aac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000ab0:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8000ab4:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8000ab8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000abc:	9203      	str	r2, [sp, #12]
 8000abe:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ac0:	f023 0203 	bic.w	r2, r3, #3
 8000ac4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ac8:	f003 0703 	and.w	r7, r3, #3
 8000acc:	260f      	movs	r6, #15
 8000ace:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8000ad2:	00bf      	lsls	r7, r7, #2
 8000ad4:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ad8:	4e6b      	ldr	r6, [pc, #428]	@ (8000c88 <HAL_GPIO_Init+0x244>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ada:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000adc:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ade:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ae2:	d031      	beq.n	8000b48 <HAL_GPIO_Init+0x104>
 8000ae4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8000ae8:	42b0      	cmp	r0, r6
 8000aea:	f000 809d 	beq.w	8000c28 <HAL_GPIO_Init+0x1e4>
 8000aee:	4e67      	ldr	r6, [pc, #412]	@ (8000c8c <HAL_GPIO_Init+0x248>)
 8000af0:	42b0      	cmp	r0, r6
 8000af2:	f000 809f 	beq.w	8000c34 <HAL_GPIO_Init+0x1f0>
 8000af6:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8000c98 <HAL_GPIO_Init+0x254>
 8000afa:	4560      	cmp	r0, ip
 8000afc:	f000 80a0 	beq.w	8000c40 <HAL_GPIO_Init+0x1fc>
 8000b00:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000c9c <HAL_GPIO_Init+0x258>
 8000b04:	4560      	cmp	r0, ip
 8000b06:	f000 80a1 	beq.w	8000c4c <HAL_GPIO_Init+0x208>
 8000b0a:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8000ca0 <HAL_GPIO_Init+0x25c>
 8000b0e:	4560      	cmp	r0, ip
 8000b10:	f000 80a8 	beq.w	8000c64 <HAL_GPIO_Init+0x220>
 8000b14:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 8000ca4 <HAL_GPIO_Init+0x260>
 8000b18:	4560      	cmp	r0, ip
 8000b1a:	f000 80a9 	beq.w	8000c70 <HAL_GPIO_Init+0x22c>
 8000b1e:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8000ca8 <HAL_GPIO_Init+0x264>
 8000b22:	4560      	cmp	r0, ip
 8000b24:	f000 8098 	beq.w	8000c58 <HAL_GPIO_Init+0x214>
 8000b28:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8000cac <HAL_GPIO_Init+0x268>
 8000b2c:	4560      	cmp	r0, ip
 8000b2e:	f000 80a5 	beq.w	8000c7c <HAL_GPIO_Init+0x238>
 8000b32:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8000cb0 <HAL_GPIO_Init+0x26c>
 8000b36:	4560      	cmp	r0, ip
 8000b38:	bf0c      	ite	eq
 8000b3a:	f04f 0c09 	moveq.w	ip, #9
 8000b3e:	f04f 0c0a 	movne.w	ip, #10
 8000b42:	fa0c f707 	lsl.w	r7, ip, r7
 8000b46:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b48:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b4a:	4a51      	ldr	r2, [pc, #324]	@ (8000c90 <HAL_GPIO_Init+0x24c>)
 8000b4c:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b4e:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8000b50:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000b54:	4e4e      	ldr	r6, [pc, #312]	@ (8000c90 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8000b56:	bf54      	ite	pl
 8000b58:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000b5a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8000b5e:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8000b60:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000b62:	4e4b      	ldr	r6, [pc, #300]	@ (8000c90 <HAL_GPIO_Init+0x24c>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b64:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8000b66:	bf54      	ite	pl
 8000b68:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000b6a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8000b6e:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8000b70:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b72:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000b74:	4e46      	ldr	r6, [pc, #280]	@ (8000c90 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8000b76:	bf54      	ite	pl
 8000b78:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000b7a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8000b7e:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b80:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b82:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b84:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000b88:	4941      	ldr	r1, [pc, #260]	@ (8000c90 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8000b8a:	bf54      	ite	pl
 8000b8c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000b8e:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b92:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8000b94:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b96:	f47f af64 	bne.w	8000a62 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8000b9a:	b005      	add	sp, #20
 8000b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8000ba0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba2:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba6:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8000baa:	fa07 f70c 	lsl.w	r7, r7, ip
 8000bae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000bb2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bb4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb6:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bba:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8000bbe:	409f      	lsls	r7, r3
 8000bc0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000bc4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000bc6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bc8:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bcc:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8000bd0:	fa07 f70c 	lsl.w	r7, r7, ip
 8000bd4:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd8:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8000bda:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bdc:	f47f af59 	bne.w	8000a92 <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3U];
 8000be0:	08df      	lsrs	r7, r3, #3
 8000be2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8000be6:	9701      	str	r7, [sp, #4]
 8000be8:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bea:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8000bee:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bf0:	f003 0e07 	and.w	lr, r3, #7
 8000bf4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000bf8:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bfa:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bfe:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000c02:	9e00      	ldr	r6, [sp, #0]
 8000c04:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000c08:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c0a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000c0e:	6237      	str	r7, [r6, #32]
 8000c10:	e73f      	b.n	8000a92 <HAL_GPIO_Init+0x4e>
        temp = GPIOx->PUPDR;
 8000c12:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c14:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c18:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8000c1c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000c20:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8000c24:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c26:	e734      	b.n	8000a92 <HAL_GPIO_Init+0x4e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c28:	f04f 0c01 	mov.w	ip, #1
 8000c2c:	fa0c f707 	lsl.w	r7, ip, r7
 8000c30:	433d      	orrs	r5, r7
 8000c32:	e789      	b.n	8000b48 <HAL_GPIO_Init+0x104>
 8000c34:	f04f 0c02 	mov.w	ip, #2
 8000c38:	fa0c f707 	lsl.w	r7, ip, r7
 8000c3c:	433d      	orrs	r5, r7
 8000c3e:	e783      	b.n	8000b48 <HAL_GPIO_Init+0x104>
 8000c40:	f04f 0c03 	mov.w	ip, #3
 8000c44:	fa0c f707 	lsl.w	r7, ip, r7
 8000c48:	433d      	orrs	r5, r7
 8000c4a:	e77d      	b.n	8000b48 <HAL_GPIO_Init+0x104>
 8000c4c:	f04f 0c04 	mov.w	ip, #4
 8000c50:	fa0c f707 	lsl.w	r7, ip, r7
 8000c54:	433d      	orrs	r5, r7
 8000c56:	e777      	b.n	8000b48 <HAL_GPIO_Init+0x104>
 8000c58:	f04f 0c07 	mov.w	ip, #7
 8000c5c:	fa0c f707 	lsl.w	r7, ip, r7
 8000c60:	433d      	orrs	r5, r7
 8000c62:	e771      	b.n	8000b48 <HAL_GPIO_Init+0x104>
 8000c64:	f04f 0c05 	mov.w	ip, #5
 8000c68:	fa0c f707 	lsl.w	r7, ip, r7
 8000c6c:	433d      	orrs	r5, r7
 8000c6e:	e76b      	b.n	8000b48 <HAL_GPIO_Init+0x104>
 8000c70:	f04f 0c06 	mov.w	ip, #6
 8000c74:	fa0c f707 	lsl.w	r7, ip, r7
 8000c78:	433d      	orrs	r5, r7
 8000c7a:	e765      	b.n	8000b48 <HAL_GPIO_Init+0x104>
 8000c7c:	f04f 0c08 	mov.w	ip, #8
 8000c80:	fa0c f707 	lsl.w	r7, ip, r7
 8000c84:	433d      	orrs	r5, r7
 8000c86:	e75f      	b.n	8000b48 <HAL_GPIO_Init+0x104>
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40013c00 	.word	0x40013c00
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40021400 	.word	0x40021400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40021c00 	.word	0x40021c00
 8000cac:	40022000 	.word	0x40022000
 8000cb0:	40022400 	.word	0x40022400

08000cb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	b082      	sub	sp, #8
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000cb8:	b300      	cbz	r0, 8000cfc <HAL_PCD_Init+0x48>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cba:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
  USBx = hpcd->Instance;
 8000cbe:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d05a      	beq.n	8000d80 <HAL_PCD_Init+0xcc>
 8000cca:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ccc:	2303      	movs	r3, #3

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000cce:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cd2:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  {
    hpcd->Init.dma_enable = 0U;
 8000cd6:	bf04      	itt	eq
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cdc:	f001 fb00 	bl	80022e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ce0:	7c23      	ldrb	r3, [r4, #16]
 8000ce2:	f88d 3000 	strb.w	r3, [sp]
 8000ce6:	1d25      	adds	r5, r4, #4
 8000ce8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000cec:	6820      	ldr	r0, [r4, #0]
 8000cee:	f001 fa2d 	bl	800214c <USB_CoreInit>
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	b130      	cbz	r0, 8000d04 <HAL_PCD_Init+0x50>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000cfc:	2501      	movs	r5, #1
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000cfe:	4628      	mov	r0, r5
 8000d00:	b002      	add	sp, #8
 8000d02:	bd70      	pop	{r4, r5, r6, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000d04:	6820      	ldr	r0, [r4, #0]
 8000d06:	f001 faf3 	bl	80022f0 <USB_SetCurrentMode>
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	d1f2      	bne.n	8000cf6 <HAL_PCD_Init+0x42>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d10:	7926      	ldrb	r6, [r4, #4]
 8000d12:	b306      	cbz	r6, 8000d56 <HAL_PCD_Init+0xa2>
 8000d14:	4623      	mov	r3, r4
 8000d16:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8000d18:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
 8000d1c:	7511      	strb	r1, [r2, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d1e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d20:	3101      	adds	r1, #1
 8000d22:	42b1      	cmp	r1, r6
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d24:	e9c2 0007 	strd	r0, r0, [r2, #28]
    hpcd->IN_ep[i].is_in = 1U;
 8000d28:	f882 c015 	strb.w	ip, [r2, #21]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d2c:	7610      	strb	r0, [r2, #24]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d2e:	f842 0f24 	str.w	r0, [r2, #36]!
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d32:	d1f3      	bne.n	8000d1c <HAL_PCD_Init+0x68>
 8000d34:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8000d36:	460a      	mov	r2, r1
    hpcd->OUT_ep[i].num = i;
 8000d38:	f883 1254 	strb.w	r1, [r3, #596]	@ 0x254
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d3c:	3101      	adds	r1, #1
 8000d3e:	42b1      	cmp	r1, r6
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d40:	e9c3 2297 	strd	r2, r2, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].is_in = 0U;
 8000d44:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d48:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d4c:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d50:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000d54:	d1f0      	bne.n	8000d38 <HAL_PCD_Init+0x84>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d56:	7c20      	ldrb	r0, [r4, #16]
 8000d58:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000d5c:	f88d 0000 	strb.w	r0, [sp]
 8000d60:	6820      	ldr	r0, [r4, #0]
 8000d62:	f001 fb4b 	bl	80023fc <USB_DevInit>
 8000d66:	4605      	mov	r5, r0
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d1c4      	bne.n	8000cf6 <HAL_PCD_Init+0x42>
  hpcd->State = HAL_PCD_STATE_READY;
 8000d6c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000d6e:	7460      	strb	r0, [r4, #17]
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d70:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000d72:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d76:	f001 fee3 	bl	8002b40 <USB_DevDisconnect>
}
 8000d7a:	4628      	mov	r0, r5
 8000d7c:	b002      	add	sp, #8
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000d80:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8000d84:	f004 fd42 	bl	800580c <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8000d88:	6820      	ldr	r0, [r4, #0]
 8000d8a:	e79f      	b.n	8000ccc <HAL_PCD_Init+0x18>

08000d8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d8c:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8000d8e:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8000d92:	2b01      	cmp	r3, #1
{
 8000d94:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d96:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8000d98:	d016      	beq.n	8000dc8 <HAL_PCD_Start+0x3c>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8000da0:	68c3      	ldr	r3, [r0, #12]
 8000da2:	065b      	lsls	r3, r3, #25
 8000da4:	d502      	bpl.n	8000dac <HAL_PCD_Start+0x20>
 8000da6:	7b63      	ldrb	r3, [r4, #13]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d008      	beq.n	8000dbe <HAL_PCD_Start+0x32>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8000dac:	f001 fa90 	bl	80022d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000db0:	6820      	ldr	r0, [r4, #0]
 8000db2:	f001 feb5 	bl	8002b20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8000dbc:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000dbe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8000dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dc4:	6383      	str	r3, [r0, #56]	@ 0x38
 8000dc6:	e7f1      	b.n	8000dac <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 8000dc8:	2002      	movs	r0, #2
}
 8000dca:	bd10      	pop	{r4, pc}

08000dcc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000dd0:	6807      	ldr	r7, [r0, #0]
{
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000dd6:	4638      	mov	r0, r7
 8000dd8:	f001 fef0 	bl	8002bbc <USB_GetMode>
 8000ddc:	b110      	cbz	r0, 8000de4 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 8000dde:	b009      	add	sp, #36	@ 0x24
 8000de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000de4:	4605      	mov	r5, r0
 8000de6:	6820      	ldr	r0, [r4, #0]
 8000de8:	f001 feba 	bl	8002b60 <USB_ReadInterrupts>
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d0f6      	beq.n	8000dde <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000df0:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000df4:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000df6:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8000dfa:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000dfe:	f001 feaf 	bl	8002b60 <USB_ReadInterrupts>
 8000e02:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e06:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000e08:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000e0c:	9303      	str	r3, [sp, #12]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e0e:	bf1e      	ittt	ne
 8000e10:	6943      	ldrne	r3, [r0, #20]
 8000e12:	f003 0302 	andne.w	r3, r3, #2
 8000e16:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000e18:	f001 fea2 	bl	8002b60 <USB_ReadInterrupts>
 8000e1c:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e20:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000e22:	d012      	beq.n	8000e4a <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e24:	6983      	ldr	r3, [r0, #24]
 8000e26:	f023 0310 	bic.w	r3, r3, #16
 8000e2a:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8000e2c:	6a3e      	ldr	r6, [r7, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e2e:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000e32:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000e34:	f006 080f 	and.w	r8, r6, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e38:	f000 82b6 	beq.w	80013a8 <HAL_PCD_IRQHandler+0x5dc>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000e3c:	2b06      	cmp	r3, #6
 8000e3e:	f000 825f 	beq.w	8001300 <HAL_PCD_IRQHandler+0x534>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e42:	6983      	ldr	r3, [r0, #24]
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e4a:	f001 fe89 	bl	8002b60 <USB_ReadInterrupts>
 8000e4e:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000e52:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e54:	f040 81f3 	bne.w	800123e <HAL_PCD_IRQHandler+0x472>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000e58:	f001 fe82 	bl	8002b60 <USB_ReadInterrupts>
 8000e5c:	0346      	lsls	r6, r0, #13
 8000e5e:	f100 8151 	bmi.w	8001104 <HAL_PCD_IRQHandler+0x338>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000e62:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000e64:	f001 fe7c 	bl	8002b60 <USB_ReadInterrupts>
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	f2c0 80c2 	blt.w	8000ff2 <HAL_PCD_IRQHandler+0x226>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000e6e:	6820      	ldr	r0, [r4, #0]
 8000e70:	f001 fe76 	bl	8002b60 <USB_ReadInterrupts>
 8000e74:	0503      	lsls	r3, r0, #20
 8000e76:	d47e      	bmi.n	8000f76 <HAL_PCD_IRQHandler+0x1aa>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000e78:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000e7a:	f001 fe71 	bl	8002b60 <USB_ReadInterrupts>
 8000e7e:	04c0      	lsls	r0, r0, #19
 8000e80:	f100 80e1 	bmi.w	8001046 <HAL_PCD_IRQHandler+0x27a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000e84:	6820      	ldr	r0, [r4, #0]
 8000e86:	f001 fe6b 	bl	8002b60 <USB_ReadInterrupts>
 8000e8a:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8000e8e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000e90:	f040 80c2 	bne.w	8001018 <HAL_PCD_IRQHandler+0x24c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000e94:	f001 fe64 	bl	8002b60 <USB_ReadInterrupts>
 8000e98:	0701      	lsls	r1, r0, #28
 8000e9a:	f100 812a 	bmi.w	80010f2 <HAL_PCD_IRQHandler+0x326>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8000e9e:	6820      	ldr	r0, [r4, #0]
 8000ea0:	f001 fe5e 	bl	8002b60 <USB_ReadInterrupts>
 8000ea4:	0602      	lsls	r2, r0, #24
 8000ea6:	d51d      	bpl.n	8000ee4 <HAL_PCD_IRQHandler+0x118>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000eae:	61bb      	str	r3, [r7, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8000eb0:	7923      	ldrb	r3, [r4, #4]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d916      	bls.n	8000ee4 <HAL_PCD_IRQHandler+0x118>
 8000eb6:	4626      	mov	r6, r4
 8000eb8:	2501      	movs	r5, #1
 8000eba:	e002      	b.n	8000ec2 <HAL_PCD_IRQHandler+0xf6>
 8000ebc:	3501      	adds	r5, #1
 8000ebe:	42ab      	cmp	r3, r5
 8000ec0:	d910      	bls.n	8000ee4 <HAL_PCD_IRQHandler+0x118>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8000ec2:	f896 227b 	ldrb.w	r2, [r6, #635]	@ 0x27b
 8000ec6:	2a01      	cmp	r2, #1
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8000ec8:	f106 0624 	add.w	r6, r6, #36	@ 0x24
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8000ecc:	d1f6      	bne.n	8000ebc <HAL_PCD_IRQHandler+0xf0>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ece:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8000ed2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8000ed6:	6820      	ldr	r0, [r4, #0]
 8000ed8:	f501 7115 	add.w	r1, r1, #596	@ 0x254
 8000edc:	f001 fd32 	bl	8002944 <USB_EPStopXfer>

  return ret;
 8000ee0:	7923      	ldrb	r3, [r4, #4]
 8000ee2:	e7eb      	b.n	8000ebc <HAL_PCD_IRQHandler+0xf0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000ee4:	6820      	ldr	r0, [r4, #0]
 8000ee6:	f001 fe3b 	bl	8002b60 <USB_ReadInterrupts>
 8000eea:	02c3      	lsls	r3, r0, #11
 8000eec:	d541      	bpl.n	8000f72 <HAL_PCD_IRQHandler+0x1a6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8000eee:	7923      	ldrb	r3, [r4, #4]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d920      	bls.n	8000f36 <HAL_PCD_IRQHandler+0x16a>
 8000ef4:	f507 6812 	add.w	r8, r7, #2336	@ 0x920
 8000ef8:	4626      	mov	r6, r4
 8000efa:	2501      	movs	r5, #1
 8000efc:	e004      	b.n	8000f08 <HAL_PCD_IRQHandler+0x13c>
 8000efe:	3501      	adds	r5, #1
 8000f00:	42ab      	cmp	r3, r5
 8000f02:	f106 0624 	add.w	r6, r6, #36	@ 0x24
 8000f06:	d916      	bls.n	8000f36 <HAL_PCD_IRQHandler+0x16a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8000f08:	f896 203c 	ldrb.w	r2, [r6, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8000f0c:	f8d8 1000 	ldr.w	r1, [r8]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8000f10:	2a01      	cmp	r2, #1
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8000f12:	f108 0820 	add.w	r8, r8, #32
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8000f16:	d1f2      	bne.n	8000efe <HAL_PCD_IRQHandler+0x132>
 8000f18:	2900      	cmp	r1, #0
 8000f1a:	daf0      	bge.n	8000efe <HAL_PCD_IRQHandler+0x132>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f1c:	2324      	movs	r3, #36	@ 0x24
 8000f1e:	f005 010f 	and.w	r1, r5, #15
 8000f22:	fb03 4101 	mla	r1, r3, r1, r4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8000f26:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8000f28:	f886 203b 	strb.w	r2, [r6, #59]	@ 0x3b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8000f2c:	3114      	adds	r1, #20
 8000f2e:	f001 fd09 	bl	8002944 <USB_EPStopXfer>
  return ret;
 8000f32:	7923      	ldrb	r3, [r4, #4]
 8000f34:	e7e3      	b.n	8000efe <HAL_PCD_IRQHandler+0x132>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000f36:	6820      	ldr	r0, [r4, #0]
 8000f38:	6943      	ldr	r3, [r0, #20]
 8000f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f3e:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000f40:	f001 fe0e 	bl	8002b60 <USB_ReadInterrupts>
 8000f44:	0286      	lsls	r6, r0, #10
 8000f46:	d421      	bmi.n	8000f8c <HAL_PCD_IRQHandler+0x1c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000f48:	6820      	ldr	r0, [r4, #0]
 8000f4a:	f001 fe09 	bl	8002b60 <USB_ReadInterrupts>
 8000f4e:	0040      	lsls	r0, r0, #1
 8000f50:	f100 80c6 	bmi.w	80010e0 <HAL_PCD_IRQHandler+0x314>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000f54:	6820      	ldr	r0, [r4, #0]
 8000f56:	f001 fe03 	bl	8002b60 <USB_ReadInterrupts>
 8000f5a:	0741      	lsls	r1, r0, #29
 8000f5c:	f57f af3f 	bpl.w	8000dde <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000f64:	076a      	lsls	r2, r5, #29
 8000f66:	f100 8240 	bmi.w	80013ea <HAL_PCD_IRQHandler+0x61e>
      hpcd->Instance->GOTGINT |= RegVal;
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	432a      	orrs	r2, r5
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	e735      	b.n	8000dde <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000f72:	6820      	ldr	r0, [r4, #0]
 8000f74:	e7e4      	b.n	8000f40 <HAL_PCD_IRQHandler+0x174>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000f76:	9b03      	ldr	r3, [sp, #12]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	07de      	lsls	r6, r3, #31
 8000f7c:	f100 8231 	bmi.w	80013e2 <HAL_PCD_IRQHandler+0x616>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000f80:	6820      	ldr	r0, [r4, #0]
 8000f82:	6943      	ldr	r3, [r0, #20]
 8000f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f88:	6143      	str	r3, [r0, #20]
 8000f8a:	e776      	b.n	8000e7a <HAL_PCD_IRQHandler+0xae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8000f8c:	7926      	ldrb	r6, [r4, #4]
 8000f8e:	2e01      	cmp	r6, #1
 8000f90:	d929      	bls.n	8000fe6 <HAL_PCD_IRQHandler+0x21a>
 8000f92:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 8000f96:	4623      	mov	r3, r4
 8000f98:	2101      	movs	r1, #1
 8000f9a:	e003      	b.n	8000fa4 <HAL_PCD_IRQHandler+0x1d8>
 8000f9c:	42b1      	cmp	r1, r6
 8000f9e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000fa2:	d020      	beq.n	8000fe6 <HAL_PCD_IRQHandler+0x21a>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8000fa4:	f893 027c 	ldrb.w	r0, [r3, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8000fa8:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8000faa:	2801      	cmp	r0, #1
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8000fac:	f101 0101 	add.w	r1, r1, #1
 8000fb0:	f102 0220 	add.w	r2, r2, #32
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8000fb4:	d1f2      	bne.n	8000f9c <HAL_PCD_IRQHandler+0x1d0>
 8000fb6:	2d00      	cmp	r5, #0
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8000fb8:	f405 3c80 	and.w	ip, r5, #65536	@ 0x10000
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8000fbc:	daee      	bge.n	8000f9c <HAL_PCD_IRQHandler+0x1d0>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8000fbe:	f8d4 54d4 	ldr.w	r5, [r4, #1236]	@ 0x4d4
 8000fc2:	f005 0501 	and.w	r5, r5, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8000fc6:	45ac      	cmp	ip, r5
 8000fc8:	d1e8      	bne.n	8000f9c <HAL_PCD_IRQHandler+0x1d0>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8000fca:	f883 027b 	strb.w	r0, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8000fce:	69b8      	ldr	r0, [r7, #24]
 8000fd0:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8000fd4:	61b8      	str	r0, [r7, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	0605      	lsls	r5, r0, #24
 8000fda:	d4df      	bmi.n	8000f9c <HAL_PCD_IRQHandler+0x1d0>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8000fdc:	9a03      	ldr	r2, [sp, #12]
 8000fde:	6853      	ldr	r3, [r2, #4]
 8000fe0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe4:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000fe6:	6820      	ldr	r0, [r4, #0]
 8000fe8:	6943      	ldr	r3, [r0, #20]
 8000fea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fee:	6143      	str	r3, [r0, #20]
 8000ff0:	e7ab      	b.n	8000f4a <HAL_PCD_IRQHandler+0x17e>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000ff2:	9a03      	ldr	r2, [sp, #12]
 8000ff4:	6853      	ldr	r3, [r2, #4]
 8000ff6:	f023 0301 	bic.w	r3, r3, #1
 8000ffa:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8000ffc:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8001000:	2b01      	cmp	r3, #1
 8001002:	f000 8176 	beq.w	80012f2 <HAL_PCD_IRQHandler+0x526>
        HAL_PCD_ResumeCallback(hpcd);
 8001006:	4620      	mov	r0, r4
 8001008:	f004 fc9c 	bl	8005944 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	6943      	ldr	r3, [r0, #20]
 8001010:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001014:	6143      	str	r3, [r0, #20]
 8001016:	e72b      	b.n	8000e70 <HAL_PCD_IRQHandler+0xa4>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001018:	f001 fdd4 	bl	8002bc4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800101c:	6820      	ldr	r0, [r4, #0]
 800101e:	f001 fac7 	bl	80025b0 <USB_GetDevSpeed>
 8001022:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001024:	6825      	ldr	r5, [r4, #0]
 8001026:	f000 fea1 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 800102a:	79e2      	ldrb	r2, [r4, #7]
 800102c:	4601      	mov	r1, r0
 800102e:	4628      	mov	r0, r5
 8001030:	f001 f8d4 	bl	80021dc <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001034:	4620      	mov	r0, r4
 8001036:	f004 fc57 	bl	80058e8 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800103a:	6820      	ldr	r0, [r4, #0]
 800103c:	6943      	ldr	r3, [r0, #20]
 800103e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001042:	6143      	str	r3, [r0, #20]
 8001044:	e726      	b.n	8000e94 <HAL_PCD_IRQHandler+0xc8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001046:	9a03      	ldr	r2, [sp, #12]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001048:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800104a:	6853      	ldr	r3, [r2, #4]
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001052:	2110      	movs	r1, #16
 8001054:	f001 f984 	bl	8002360 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001058:	7920      	ldrb	r0, [r4, #4]
 800105a:	b1d8      	cbz	r0, 8001094 <HAL_PCD_IRQHandler+0x2c8>
 800105c:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001060:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8001064:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800106c:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800106e:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001072:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001076:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800107a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800107e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001082:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001084:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001088:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800108a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108e:	f103 0320 	add.w	r3, r3, #32
 8001092:	d1e7      	bne.n	8001064 <HAL_PCD_IRQHandler+0x298>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001094:	9a03      	ldr	r2, [sp, #12]
 8001096:	69d3      	ldr	r3, [r2, #28]
 8001098:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800109c:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800109e:	7be3      	ldrb	r3, [r4, #15]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f040 811a 	bne.w	80012da <HAL_PCD_IRQHandler+0x50e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80010a6:	9a03      	ldr	r2, [sp, #12]
 80010a8:	6953      	ldr	r3, [r2, #20]
 80010aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010ae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80010b2:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80010b4:	6913      	ldr	r3, [r2, #16]
 80010b6:	f043 030b 	orr.w	r3, r3, #11
 80010ba:	6113      	str	r3, [r2, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80010bc:	f8d7 3800 	ldr.w	r3, [r7, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80010c0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80010c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80010c6:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80010ca:	79a1      	ldrb	r1, [r4, #6]
 80010cc:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80010d0:	f001 fd8a 	bl	8002be8 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80010d4:	6820      	ldr	r0, [r4, #0]
 80010d6:	6943      	ldr	r3, [r0, #20]
 80010d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010dc:	6143      	str	r3, [r0, #20]
 80010de:	e6d2      	b.n	8000e86 <HAL_PCD_IRQHandler+0xba>
      HAL_PCD_ConnectCallback(hpcd);
 80010e0:	4620      	mov	r0, r4
 80010e2:	f004 fc3b 	bl	800595c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80010e6:	6820      	ldr	r0, [r4, #0]
 80010e8:	6943      	ldr	r3, [r0, #20]
 80010ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80010ee:	6143      	str	r3, [r0, #20]
 80010f0:	e731      	b.n	8000f56 <HAL_PCD_IRQHandler+0x18a>
      HAL_PCD_SOFCallback(hpcd);
 80010f2:	4620      	mov	r0, r4
 80010f4:	f004 fbf4 	bl	80058e0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80010f8:	6820      	ldr	r0, [r4, #0]
 80010fa:	6943      	ldr	r3, [r0, #20]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	6143      	str	r3, [r0, #20]
 8001102:	e6cd      	b.n	8000ea0 <HAL_PCD_IRQHandler+0xd4>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001104:	6820      	ldr	r0, [r4, #0]
 8001106:	f001 fd37 	bl	8002b78 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800110a:	4681      	mov	r9, r0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800110c:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800110e:	f1b9 0f00 	cmp.w	r9, #0
 8001112:	f43f aea7 	beq.w	8000e64 <HAL_PCD_IRQHandler+0x98>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001116:	e9cd 7504 	strd	r7, r5, [sp, #16]
 800111a:	f507 6610 	add.w	r6, r7, #2304	@ 0x900
 800111e:	46a0      	mov	r8, r4
      epnum = 0U;
 8001120:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001124:	4607      	mov	r7, r0
 8001126:	e009      	b.n	800113c <HAL_PCD_IRQHandler+0x370>
      while (ep_intr != 0U)
 8001128:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 800112c:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 8001130:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 8001134:	f106 0620 	add.w	r6, r6, #32
 8001138:	f000 80f5 	beq.w	8001326 <HAL_PCD_IRQHandler+0x55a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800113c:	f019 0f01 	tst.w	r9, #1
 8001140:	d0f2      	beq.n	8001128 <HAL_PCD_IRQHandler+0x35c>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001142:	fa5f fb8a 	uxtb.w	fp, sl
 8001146:	4638      	mov	r0, r7
 8001148:	4659      	mov	r1, fp
 800114a:	f001 fd27 	bl	8002b9c <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800114e:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001150:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001152:	d512      	bpl.n	800117a <HAL_PCD_IRQHandler+0x3ae>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001154:	9803      	ldr	r0, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001156:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001158:	6b43      	ldr	r3, [r0, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800115a:	f00a 020f 	and.w	r2, sl, #15
 800115e:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001162:	ea23 0302 	bic.w	r3, r3, r2
 8001166:	6343      	str	r3, [r0, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001168:	60b1      	str	r1, [r6, #8]
            if (hpcd->Init.dma_enable == 1U)
 800116a:	79a1      	ldrb	r1, [r4, #6]
 800116c:	2901      	cmp	r1, #1
 800116e:	f000 8141 	beq.w	80013f4 <HAL_PCD_IRQHandler+0x628>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001172:	4659      	mov	r1, fp
 8001174:	4620      	mov	r0, r4
 8001176:	f004 fba9 	bl	80058cc <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800117a:	072b      	lsls	r3, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800117c:	bf44      	itt	mi
 800117e:	2308      	movmi	r3, #8
 8001180:	60b3      	strmi	r3, [r6, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001182:	06ef      	lsls	r7, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001184:	bf44      	itt	mi
 8001186:	2310      	movmi	r3, #16
 8001188:	60b3      	strmi	r3, [r6, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800118a:	0668      	lsls	r0, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800118c:	bf44      	itt	mi
 800118e:	2340      	movmi	r3, #64	@ 0x40
 8001190:	60b3      	strmi	r3, [r6, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001192:	07a9      	lsls	r1, r5, #30
 8001194:	f100 80fd 	bmi.w	8001392 <HAL_PCD_IRQHandler+0x5c6>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001198:	062a      	lsls	r2, r5, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800119a:	6827      	ldr	r7, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800119c:	d5c4      	bpl.n	8001128 <HAL_PCD_IRQHandler+0x35c>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800119e:	e9d8 5309 	ldrd	r5, r3, [r8, #36]	@ 0x24
 80011a2:	42ab      	cmp	r3, r5
 80011a4:	d8c0      	bhi.n	8001128 <HAL_PCD_IRQHandler+0x35c>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011a6:	f507 6110 	add.w	r1, r7, #2304	@ 0x900
  len32b = (len + 3U) / 4U;
 80011aa:	f8d8 001c 	ldr.w	r0, [r8, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011ae:	9707      	str	r7, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011b0:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 80011b4:	eba5 0c03 	sub.w	ip, r5, r3
  len32b = (len + 3U) / 4U;
 80011b8:	4584      	cmp	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011ba:	698a      	ldr	r2, [r1, #24]
  len32b = (len + 3U) / 4U;
 80011bc:	bf28      	it	cs
 80011be:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011c0:	fa1f fe82 	uxth.w	lr, r2
  len32b = (len + 3U) / 4U;
 80011c4:	f10c 0c03 	add.w	ip, ip, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80011c8:	ebbe 0f9c 	cmp.w	lr, ip, lsr #2
 80011cc:	f0c0 8148 	bcc.w	8001460 <HAL_PCD_IRQHandler+0x694>
 80011d0:	9606      	str	r6, [sp, #24]
 80011d2:	460e      	mov	r6, r1
 80011d4:	e020      	b.n	8001218 <HAL_PCD_IRQHandler+0x44c>
 80011d6:	f8d8 301c 	ldr.w	r3, [r8, #28]
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80011da:	f8d8 1020 	ldr.w	r1, [r8, #32]
 80011de:	429d      	cmp	r5, r3
 80011e0:	bf28      	it	cs
 80011e2:	461d      	movcs	r5, r3
 80011e4:	79a3      	ldrb	r3, [r4, #6]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	465a      	mov	r2, fp
 80011ea:	b2ab      	uxth	r3, r5
 80011ec:	4638      	mov	r0, r7
 80011ee:	f001 fbf3 	bl	80029d8 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 80011f2:	f8d8 3020 	ldr.w	r3, [r8, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011f6:	69b2      	ldr	r2, [r6, #24]
    ep->xfer_buff  += len;
 80011f8:	442b      	add	r3, r5
 80011fa:	f8c8 3020 	str.w	r3, [r8, #32]
    ep->xfer_count += len;
 80011fe:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001202:	b292      	uxth	r2, r2
    ep->xfer_count += len;
 8001204:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8001206:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001208:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_count += len;
 800120c:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001210:	f0c0 8122 	bcc.w	8001458 <HAL_PCD_IRQHandler+0x68c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001214:	f8d8 5024 	ldr.w	r5, [r8, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001218:	429d      	cmp	r5, r3
    len = ep->xfer_len - ep->xfer_count;
 800121a:	eba5 0503 	sub.w	r5, r5, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800121e:	d8da      	bhi.n	80011d6 <HAL_PCD_IRQHandler+0x40a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001220:	9e06      	ldr	r6, [sp, #24]
 8001222:	6827      	ldr	r7, [r4, #0]
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001224:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001226:	f00a 050f 	and.w	r5, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800122a:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800122e:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001230:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001234:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001236:	ea23 0302 	bic.w	r3, r3, r2
 800123a:	634b      	str	r3, [r1, #52]	@ 0x34
 800123c:	e774      	b.n	8001128 <HAL_PCD_IRQHandler+0x35c>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800123e:	f001 fc93 	bl	8002b68 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8001242:	4606      	mov	r6, r0
 8001244:	6820      	ldr	r0, [r4, #0]
 8001246:	2e00      	cmp	r6, #0
 8001248:	f43f ae06 	beq.w	8000e58 <HAL_PCD_IRQHandler+0x8c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800124c:	9504      	str	r5, [sp, #16]
 800124e:	f507 6830 	add.w	r8, r7, #2816	@ 0xb00
 8001252:	46a3      	mov	fp, r4
      epnum = 0U;
 8001254:	f04f 0a00 	mov.w	sl, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001258:	4625      	mov	r5, r4
 800125a:	e007      	b.n	800126c <HAL_PCD_IRQHandler+0x4a0>
      while (ep_intr != 0U)
 800125c:	0876      	lsrs	r6, r6, #1
        epnum++;
 800125e:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 8001262:	f108 0820 	add.w	r8, r8, #32
 8001266:	f10b 0b24 	add.w	fp, fp, #36	@ 0x24
 800126a:	d060      	beq.n	800132e <HAL_PCD_IRQHandler+0x562>
        if ((ep_intr & 0x1U) != 0U)
 800126c:	07f4      	lsls	r4, r6, #31
 800126e:	d5f5      	bpl.n	800125c <HAL_PCD_IRQHandler+0x490>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001270:	fa5f f48a 	uxtb.w	r4, sl
 8001274:	4621      	mov	r1, r4
 8001276:	f001 fc87 	bl	8002b88 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800127a:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800127e:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001280:	d169      	bne.n	8001356 <HAL_PCD_IRQHandler+0x58a>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001282:	f019 0f08 	tst.w	r9, #8
 8001286:	d155      	bne.n	8001334 <HAL_PCD_IRQHandler+0x568>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001288:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800128c:	bf1c      	itt	ne
 800128e:	2210      	movne	r2, #16
 8001290:	f8c8 2008 	strne.w	r2, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001294:	f019 0f02 	tst.w	r9, #2
 8001298:	d00f      	beq.n	80012ba <HAL_PCD_IRQHandler+0x4ee>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	0611      	lsls	r1, r2, #24
 800129e:	d504      	bpl.n	80012aa <HAL_PCD_IRQHandler+0x4de>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80012a0:	9b03      	ldr	r3, [sp, #12]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80012a8:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 80012aa:	f89b 2257 	ldrb.w	r2, [fp, #599]	@ 0x257
 80012ae:	2a01      	cmp	r2, #1
 80012b0:	f000 80da 	beq.w	8001468 <HAL_PCD_IRQHandler+0x69c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012ba:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012be:	bf1c      	itt	ne
 80012c0:	2320      	movne	r3, #32
 80012c2:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012c6:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012ca:	bf18      	it	ne
 80012cc:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 80012d0:	6828      	ldr	r0, [r5, #0]
 80012d2:	bf18      	it	ne
 80012d4:	f8c8 3008 	strne.w	r3, [r8, #8]
 80012d8:	e7c0      	b.n	800125c <HAL_PCD_IRQHandler+0x490>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80012da:	9a03      	ldr	r2, [sp, #12]
 80012dc:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 80012e0:	f043 030b 	orr.w	r3, r3, #11
 80012e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80012e8:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80012ea:	f043 030b 	orr.w	r3, r3, #11
 80012ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f0:	e6e4      	b.n	80010bc <HAL_PCD_IRQHandler+0x2f0>
        hpcd->LPM_State = LPM_L0;
 80012f2:	2100      	movs	r1, #0
 80012f4:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012f8:	4620      	mov	r0, r4
 80012fa:	f000 fa7b 	bl	80017f4 <HAL_PCDEx_LPM_Callback>
 80012fe:	e685      	b.n	800100c <HAL_PCD_IRQHandler+0x240>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001300:	2208      	movs	r2, #8
 8001302:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8001306:	4638      	mov	r0, r7
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001308:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800130c:	f001 fb7a 	bl	8002a04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001310:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8001314:	f3c6 130a 	ubfx	r3, r6, #4, #11
 8001318:	f8d2 1268 	ldr.w	r1, [r2, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800131c:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800131e:	440b      	add	r3, r1
 8001320:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8001324:	e58d      	b.n	8000e42 <HAL_PCD_IRQHandler+0x76>
 8001326:	4638      	mov	r0, r7
 8001328:	9d05      	ldr	r5, [sp, #20]
 800132a:	9f04      	ldr	r7, [sp, #16]
 800132c:	e59a      	b.n	8000e64 <HAL_PCD_IRQHandler+0x98>
 800132e:	462c      	mov	r4, r5
 8001330:	9d04      	ldr	r5, [sp, #16]
 8001332:	e591      	b.n	8000e58 <HAL_PCD_IRQHandler+0x8c>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001334:	6829      	ldr	r1, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001336:	2208      	movs	r2, #8
 8001338:	f8c8 2008 	str.w	r2, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800133c:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800133e:	f501 6230 	add.w	r2, r1, #2816	@ 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001342:	496c      	ldr	r1, [pc, #432]	@ (80014f4 <HAL_PCD_IRQHandler+0x728>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001344:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001348:	4288      	cmp	r0, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800134a:	6893      	ldr	r3, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800134c:	d865      	bhi.n	800141a <HAL_PCD_IRQHandler+0x64e>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800134e:	4628      	mov	r0, r5
 8001350:	f004 faac 	bl	80058ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001354:	e798      	b.n	8001288 <HAL_PCD_IRQHandler+0x4bc>
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001356:	6828      	ldr	r0, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001358:	2201      	movs	r2, #1
 800135a:	f8c8 2008 	str.w	r2, [r8, #8]
  if (hpcd->Init.dma_enable == 1U)
 800135e:	79a9      	ldrb	r1, [r5, #6]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001360:	f8d0 e040 	ldr.w	lr, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001364:	f500 6230 	add.w	r2, r0, #2816	@ 0xb00
 8001368:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 800136c:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800136e:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8001370:	d065      	beq.n	800143e <HAL_PCD_IRQHandler+0x672>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001372:	4961      	ldr	r1, [pc, #388]	@ (80014f8 <HAL_PCD_IRQHandler+0x72c>)
 8001374:	458e      	cmp	lr, r1
 8001376:	d07f      	beq.n	8001478 <HAL_PCD_IRQHandler+0x6ac>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001378:	f1ba 0f00 	cmp.w	sl, #0
 800137c:	d104      	bne.n	8001388 <HAL_PCD_IRQHandler+0x5bc>
 800137e:	f8d5 2264 	ldr.w	r2, [r5, #612]	@ 0x264
 8001382:	2a00      	cmp	r2, #0
 8001384:	f000 80aa 	beq.w	80014dc <HAL_PCD_IRQHandler+0x710>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001388:	4621      	mov	r1, r4
 800138a:	4628      	mov	r0, r5
 800138c:	f004 fa94 	bl	80058b8 <HAL_PCD_DataOutStageCallback>
 8001390:	e777      	b.n	8001282 <HAL_PCD_IRQHandler+0x4b6>
            (void)USB_FlushTxFifo(USBx, epnum);
 8001392:	9804      	ldr	r0, [sp, #16]
 8001394:	4651      	mov	r1, sl
 8001396:	f000 ffe3 	bl	8002360 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 800139a:	f898 3017 	ldrb.w	r3, [r8, #23]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d071      	beq.n	8001486 <HAL_PCD_IRQHandler+0x6ba>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013a2:	2302      	movs	r3, #2
 80013a4:	60b3      	str	r3, [r6, #8]
 80013a6:	e6f7      	b.n	8001198 <HAL_PCD_IRQHandler+0x3cc>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013a8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013ac:	421e      	tst	r6, r3
 80013ae:	f43f ad48 	beq.w	8000e42 <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013b2:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 80013b6:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80013ba:	f3c6 120a 	ubfx	r2, r6, #4, #11
 80013be:	f8d8 1260 	ldr.w	r1, [r8, #608]	@ 0x260
 80013c2:	4638      	mov	r0, r7
 80013c4:	4616      	mov	r6, r2
 80013c6:	f001 fb1d 	bl	8002a04 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ca:	f8d8 3260 	ldr.w	r3, [r8, #608]	@ 0x260
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ce:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013d0:	4433      	add	r3, r6
 80013d2:	f8c8 3260 	str.w	r3, [r8, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013d6:	f8d8 3268 	ldr.w	r3, [r8, #616]	@ 0x268
 80013da:	4433      	add	r3, r6
 80013dc:	f8c8 3268 	str.w	r3, [r8, #616]	@ 0x268
 80013e0:	e52f      	b.n	8000e42 <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 80013e2:	4620      	mov	r0, r4
 80013e4:	f004 fa96 	bl	8005914 <HAL_PCD_SuspendCallback>
 80013e8:	e5ca      	b.n	8000f80 <HAL_PCD_IRQHandler+0x1b4>
        HAL_PCD_DisconnectCallback(hpcd);
 80013ea:	4620      	mov	r0, r4
 80013ec:	f004 faba 	bl	8005964 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	e5ba      	b.n	8000f6a <HAL_PCD_IRQHandler+0x19e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013f4:	e9d8 2307 	ldrd	r2, r3, [r8, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	f8c8 3020 	str.w	r3, [r8, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013fe:	f1ba 0f00 	cmp.w	sl, #0
 8001402:	f47f aeb6 	bne.w	8001172 <HAL_PCD_IRQHandler+0x3a6>
 8001406:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001408:	2b00      	cmp	r3, #0
 800140a:	f47f aeb2 	bne.w	8001172 <HAL_PCD_IRQHandler+0x3a6>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800140e:	6820      	ldr	r0, [r4, #0]
 8001410:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001414:	f001 fbe8 	bl	8002be8 <USB_EP0_OutStart>
 8001418:	e6ab      	b.n	8001172 <HAL_PCD_IRQHandler+0x3a6>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800141a:	0418      	lsls	r0, r3, #16
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800141c:	bf44      	itt	mi
 800141e:	f44f 4100 	movmi.w	r1, #32768	@ 0x8000
 8001422:	6091      	strmi	r1, [r2, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8001424:	4628      	mov	r0, r5
 8001426:	f004 fa41 	bl	80058ac <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800142a:	79a9      	ldrb	r1, [r5, #6]
 800142c:	2901      	cmp	r1, #1
 800142e:	f47f af2b 	bne.w	8001288 <HAL_PCD_IRQHandler+0x4bc>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001432:	6828      	ldr	r0, [r5, #0]
 8001434:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8001438:	f001 fbd6 	bl	8002be8 <USB_EP0_OutStart>
 800143c:	e724      	b.n	8001288 <HAL_PCD_IRQHandler+0x4bc>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800143e:	0719      	lsls	r1, r3, #28
 8001440:	d529      	bpl.n	8001496 <HAL_PCD_IRQHandler+0x6ca>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001442:	492c      	ldr	r1, [pc, #176]	@ (80014f4 <HAL_PCD_IRQHandler+0x728>)
 8001444:	458e      	cmp	lr, r1
 8001446:	f67f af1c 	bls.w	8001282 <HAL_PCD_IRQHandler+0x4b6>
 800144a:	0418      	lsls	r0, r3, #16
 800144c:	f57f af19 	bpl.w	8001282 <HAL_PCD_IRQHandler+0x4b6>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001450:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001454:	6091      	str	r1, [r2, #8]
 8001456:	e714      	b.n	8001282 <HAL_PCD_IRQHandler+0x4b6>
  if (ep->xfer_len <= ep->xfer_count)
 8001458:	9e06      	ldr	r6, [sp, #24]
 800145a:	f8d8 5024 	ldr.w	r5, [r8, #36]	@ 0x24
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800145e:	6827      	ldr	r7, [r4, #0]
  if (ep->xfer_len <= ep->xfer_count)
 8001460:	42ab      	cmp	r3, r5
 8001462:	f4ff ae61 	bcc.w	8001128 <HAL_PCD_IRQHandler+0x35c>
 8001466:	e6dd      	b.n	8001224 <HAL_PCD_IRQHandler+0x458>
              ep->is_iso_incomplete = 0U;
 8001468:	2200      	movs	r2, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800146a:	4621      	mov	r1, r4
              ep->is_iso_incomplete = 0U;
 800146c:	f88b 2257 	strb.w	r2, [fp, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001470:	4628      	mov	r0, r5
 8001472:	f004 fa6b 	bl	800594c <HAL_PCD_ISOOUTIncompleteCallback>
 8001476:	e71d      	b.n	80012b4 <HAL_PCD_IRQHandler+0x4e8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001478:	0419      	lsls	r1, r3, #16
 800147a:	d4e9      	bmi.n	8001450 <HAL_PCD_IRQHandler+0x684>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800147c:	069b      	lsls	r3, r3, #26
 800147e:	d583      	bpl.n	8001388 <HAL_PCD_IRQHandler+0x5bc>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001480:	2120      	movs	r1, #32
 8001482:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001484:	e780      	b.n	8001388 <HAL_PCD_IRQHandler+0x5bc>
              ep->is_iso_incomplete = 0U;
 8001486:	2300      	movs	r3, #0
 8001488:	f888 3017 	strb.w	r3, [r8, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800148c:	4659      	mov	r1, fp
 800148e:	4620      	mov	r0, r4
 8001490:	f004 fa60 	bl	8005954 <HAL_PCD_ISOINIncompleteCallback>
 8001494:	e785      	b.n	80013a2 <HAL_PCD_IRQHandler+0x5d6>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001496:	0699      	lsls	r1, r3, #26
 8001498:	d502      	bpl.n	80014a0 <HAL_PCD_IRQHandler+0x6d4>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800149a:	2120      	movs	r1, #32
 800149c:	6091      	str	r1, [r2, #8]
 800149e:	e6f0      	b.n	8001282 <HAL_PCD_IRQHandler+0x4b6>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80014a0:	f013 0f28 	tst.w	r3, #40	@ 0x28
 80014a4:	f47f aeed 	bne.w	8001282 <HAL_PCD_IRQHandler+0x4b6>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80014a8:	4912      	ldr	r1, [pc, #72]	@ (80014f4 <HAL_PCD_IRQHandler+0x728>)
 80014aa:	458e      	cmp	lr, r1
 80014ac:	d901      	bls.n	80014b2 <HAL_PCD_IRQHandler+0x6e6>
 80014ae:	041b      	lsls	r3, r3, #16
 80014b0:	d4ce      	bmi.n	8001450 <HAL_PCD_IRQHandler+0x684>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80014b2:	6911      	ldr	r1, [r2, #16]
 80014b4:	f8db 2274 	ldr.w	r2, [fp, #628]	@ 0x274
 80014b8:	f3c1 0112 	ubfx	r1, r1, #0, #19
 80014bc:	1a52      	subs	r2, r2, r1
 80014be:	f8cb 2268 	str.w	r2, [fp, #616]	@ 0x268
        if (epnum == 0U)
 80014c2:	f1ba 0f00 	cmp.w	sl, #0
 80014c6:	f47f af5f 	bne.w	8001388 <HAL_PCD_IRQHandler+0x5bc>
          if (ep->xfer_len == 0U)
 80014ca:	f8d5 1264 	ldr.w	r1, [r5, #612]	@ 0x264
 80014ce:	b159      	cbz	r1, 80014e8 <HAL_PCD_IRQHandler+0x71c>
            ep->xfer_buff += ep->xfer_count;
 80014d0:	f8d5 1260 	ldr.w	r1, [r5, #608]	@ 0x260
 80014d4:	4411      	add	r1, r2
 80014d6:	f8c5 1260 	str.w	r1, [r5, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80014da:	e755      	b.n	8001388 <HAL_PCD_IRQHandler+0x5bc>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80014dc:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 80014e0:	4651      	mov	r1, sl
 80014e2:	f001 fb81 	bl	8002be8 <USB_EP0_OutStart>
 80014e6:	e74f      	b.n	8001388 <HAL_PCD_IRQHandler+0x5bc>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014e8:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 80014ec:	2101      	movs	r1, #1
 80014ee:	f001 fb7b 	bl	8002be8 <USB_EP0_OutStart>
 80014f2:	e749      	b.n	8001388 <HAL_PCD_IRQHandler+0x5bc>
 80014f4:	4f54300a 	.word	0x4f54300a
 80014f8:	4f54310a 	.word	0x4f54310a

080014fc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80014fc:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8001500:	2a01      	cmp	r2, #1
 8001502:	d00c      	beq.n	800151e <HAL_PCD_SetAddress+0x22>
{
 8001504:	b510      	push	{r4, lr}
 8001506:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001508:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800150a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800150c:	f884 2494 	strb.w	r2, [r4, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001510:	7461      	strb	r1, [r4, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001512:	f001 faf5 	bl	8002b00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001516:	2000      	movs	r0, #0
 8001518:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800151c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800151e:	2002      	movs	r0, #2
}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <HAL_PCD_EP_Open>:
{
 8001524:	b510      	push	{r4, lr}
 8001526:	f001 0e0f 	and.w	lr, r1, #15
 800152a:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 800152e:	0609      	lsls	r1, r1, #24
{
 8001530:	4604      	mov	r4, r0
 8001532:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8001536:	d426      	bmi.n	8001586 <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001538:	f50c 7115 	add.w	r1, ip, #596	@ 0x254
 800153c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800153e:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8001542:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001546:	f04f 0c00 	mov.w	ip, #0
 800154a:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800154e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001552:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8001554:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001556:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800155a:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 800155c:	b10a      	cbz	r2, 8001562 <HAL_PCD_EP_Open+0x3e>
    ep->tx_fifo_num = ep->num;
 800155e:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8001562:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001564:	bf04      	itt	eq
 8001566:	2300      	moveq	r3, #0
 8001568:	714b      	strbeq	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 800156a:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800156e:	2b01      	cmp	r3, #1
 8001570:	d015      	beq.n	800159e <HAL_PCD_EP_Open+0x7a>
 8001572:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001574:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001576:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800157a:	f001 f825 	bl	80025c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800157e:	2000      	movs	r0, #0
 8001580:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001584:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001586:	f10c 0114 	add.w	r1, ip, #20
 800158a:	4401      	add	r1, r0
    ep->is_in = 1U;
 800158c:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8001590:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001594:	f04f 0c01 	mov.w	ip, #1
 8001598:	f880 c015 	strb.w	ip, [r0, #21]
 800159c:	e7d7      	b.n	800154e <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 800159e:	2002      	movs	r0, #2
}
 80015a0:	bd10      	pop	{r4, pc}
 80015a2:	bf00      	nop

080015a4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80015a4:	f001 030f 	and.w	r3, r1, #15
 80015a8:	f001 020f 	and.w	r2, r1, #15
{
 80015ac:	b510      	push	{r4, lr}
 80015ae:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80015b2:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80015b4:	0609      	lsls	r1, r1, #24
    ep->is_in = 1U;
 80015b6:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 80015ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80015be:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 80015c2:	d415      	bmi.n	80015f0 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80015c8:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 80015ca:	f04f 0c00 	mov.w	ip, #0
 80015ce:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80015d2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80015d4:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d014      	beq.n	8001606 <HAL_PCD_EP_Close+0x62>
 80015dc:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015de:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80015e0:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015e4:	f001 f838 	bl	8002658 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80015ee:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015f0:	3314      	adds	r3, #20
 80015f2:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 80015f4:	f04f 0c01 	mov.w	ip, #1
 80015f8:	f880 c015 	strb.w	ip, [r0, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015fc:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80015fe:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001602:	2b01      	cmp	r3, #1
 8001604:	d1ea      	bne.n	80015dc <HAL_PCD_EP_Close+0x38>
 8001606:	2002      	movs	r0, #2
}
 8001608:	bd10      	pop	{r4, pc}
 800160a:	bf00      	nop

0800160c <HAL_PCD_EP_Receive>:
{
 800160c:	b510      	push	{r4, lr}
 800160e:	f001 0e0f 	and.w	lr, r1, #15
  ep->xfer_buff = pBuf;
 8001612:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 8001616:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 800161a:	4614      	mov	r4, r2
  ep->xfer_len = len;
 800161c:	f8cc 3264 	str.w	r3, [ip, #612]	@ 0x264
  ep->xfer_count = 0U;
 8001620:	2300      	movs	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001622:	f88c e254 	strb.w	lr, [ip, #596]	@ 0x254
  ep->xfer_buff = pBuf;
 8001626:	f8cc 2260 	str.w	r2, [ip, #608]	@ 0x260
  ep->xfer_count = 0U;
 800162a:	f8cc 3268 	str.w	r3, [ip, #616]	@ 0x268
  ep->is_in = 0U;
 800162e:	f88c 3255 	strb.w	r3, [ip, #597]	@ 0x255
  if (hpcd->Init.dma_enable == 1U)
 8001632:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001634:	2124      	movs	r1, #36	@ 0x24
 8001636:	fb01 010e 	mla	r1, r1, lr, r0
  if (hpcd->Init.dma_enable == 1U)
 800163a:	2a01      	cmp	r2, #1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800163c:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->dma_addr = (uint32_t)pBuf;
 8001640:	bf08      	it	eq
 8001642:	f8cc 4270 	streq.w	r4, [ip, #624]	@ 0x270
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001646:	6800      	ldr	r0, [r0, #0]
 8001648:	f001 f868 	bl	800271c <USB_EPStartXfer>
}
 800164c:	2000      	movs	r0, #0
 800164e:	bd10      	pop	{r4, pc}

08001650 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001650:	f001 010f 	and.w	r1, r1, #15
 8001654:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001658:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 800165c:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop

08001664 <HAL_PCD_EP_Transmit>:
{
 8001664:	b510      	push	{r4, lr}
 8001666:	f001 0e0f 	and.w	lr, r1, #15
  ep->xfer_buff = pBuf;
 800166a:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 800166e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 8001672:	4614      	mov	r4, r2
  ep->xfer_len = len;
 8001674:	f8cc 3024 	str.w	r3, [ip, #36]	@ 0x24
  ep->xfer_count = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  ep->is_in = 1U;
 800167e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001680:	f88c e014 	strb.w	lr, [ip, #20]
  ep->xfer_buff = pBuf;
 8001684:	f8cc 2020 	str.w	r2, [ip, #32]
  ep->is_in = 1U;
 8001688:	f88c 3015 	strb.w	r3, [ip, #21]
  if (hpcd->Init.dma_enable == 1U)
 800168c:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800168e:	2124      	movs	r1, #36	@ 0x24
 8001690:	fb01 010e 	mla	r1, r1, lr, r0
  if (hpcd->Init.dma_enable == 1U)
 8001694:	429a      	cmp	r2, r3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001696:	f101 0114 	add.w	r1, r1, #20
    ep->dma_addr = (uint32_t)pBuf;
 800169a:	bf08      	it	eq
 800169c:	f8cc 4030 	streq.w	r4, [ip, #48]	@ 0x30
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80016a0:	6800      	ldr	r0, [r0, #0]
 80016a2:	f001 f83b 	bl	800271c <USB_EPStartXfer>
}
 80016a6:	2000      	movs	r0, #0
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	bf00      	nop

080016ac <HAL_PCD_EP_SetStall>:
{
 80016ac:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016ae:	7903      	ldrb	r3, [r0, #4]
 80016b0:	f001 050f 	and.w	r5, r1, #15
 80016b4:	42ab      	cmp	r3, r5
 80016b6:	d332      	bcc.n	800171e <HAL_PCD_EP_SetStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 80016b8:	060b      	lsls	r3, r1, #24
 80016ba:	4604      	mov	r4, r0
 80016bc:	d41c      	bmi.n	80016f8 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 80016be:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 80016c2:	2224      	movs	r2, #36	@ 0x24
 80016c4:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 80016c8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 80016cc:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 80016d6:	2301      	movs	r3, #1
 80016d8:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016da:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80016dc:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d01a      	beq.n	800171a <HAL_PCD_EP_SetStall+0x6e>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016e4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80016e6:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016ea:	f001 f9af 	bl	8002a4c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016ee:	b1c5      	cbz	r5, 8001722 <HAL_PCD_EP_SetStall+0x76>
  __HAL_UNLOCK(hpcd);
 80016f0:	2000      	movs	r0, #0
 80016f2:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80016f8:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016fc:	2124      	movs	r1, #36	@ 0x24
 80016fe:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8001702:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001706:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001708:	3114      	adds	r1, #20
    ep->is_in = 1U;
 800170a:	755a      	strb	r2, [r3, #21]
  ep->is_stall = 1U;
 800170c:	2301      	movs	r3, #1
 800170e:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001710:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001712:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 8001716:	429a      	cmp	r2, r3
 8001718:	d1e4      	bne.n	80016e4 <HAL_PCD_EP_SetStall+0x38>
 800171a:	2002      	movs	r0, #2
}
 800171c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800171e:	2001      	movs	r0, #1
}
 8001720:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001722:	79a1      	ldrb	r1, [r4, #6]
 8001724:	6820      	ldr	r0, [r4, #0]
 8001726:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800172a:	f001 fa5d 	bl	8002be8 <USB_EP0_OutStart>
 800172e:	e7df      	b.n	80016f0 <HAL_PCD_EP_SetStall+0x44>

08001730 <HAL_PCD_EP_ClrStall>:
{
 8001730:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001732:	7903      	ldrb	r3, [r0, #4]
 8001734:	f001 020f 	and.w	r2, r1, #15
 8001738:	4293      	cmp	r3, r2
 800173a:	d32e      	bcc.n	800179a <HAL_PCD_EP_ClrStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 800173c:	4604      	mov	r4, r0
 800173e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 8001742:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8001746:	0609      	lsls	r1, r1, #24
 8001748:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 800174c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 8001750:	d416      	bmi.n	8001780 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001752:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001756:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8001758:	2500      	movs	r5, #0
 800175a:	f880 5255 	strb.w	r5, [r0, #597]	@ 0x255
  ep->is_stall = 0U;
 800175e:	2500      	movs	r5, #0
 8001760:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001762:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001764:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001768:	2b01      	cmp	r3, #1
 800176a:	d014      	beq.n	8001796 <HAL_PCD_EP_ClrStall+0x66>
 800176c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800176e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001770:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001774:	f001 f998 	bl	8002aa8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001778:	f884 5494 	strb.w	r5, [r4, #1172]	@ 0x494
  return HAL_OK;
 800177c:	4628      	mov	r0, r5
}
 800177e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001780:	3314      	adds	r3, #20
 8001782:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8001784:	2501      	movs	r5, #1
 8001786:	7545      	strb	r5, [r0, #21]
  ep->is_stall = 0U;
 8001788:	2500      	movs	r5, #0
 800178a:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800178c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800178e:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001792:	2b01      	cmp	r3, #1
 8001794:	d1ea      	bne.n	800176c <HAL_PCD_EP_ClrStall+0x3c>
 8001796:	2002      	movs	r0, #2
}
 8001798:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800179a:	2001      	movs	r0, #1
}
 800179c:	bd38      	pop	{r3, r4, r5, pc}
 800179e:	bf00      	nop

080017a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80017a0:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80017a2:	6804      	ldr	r4, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80017a4:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80017a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (fifo == 0U)
 80017a8:	b929      	cbnz	r1, 80017b6 <HAL_PCDEx_SetTxFiFo+0x16>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80017aa:	431a      	orrs	r2, r3
 80017ac:	62a2      	str	r2, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80017ae:	2000      	movs	r0, #0
 80017b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017b4:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80017b6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80017b8:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80017ba:	eb03 4c10 	add.w	ip, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80017be:	d00a      	beq.n	80017d6 <HAL_PCDEx_SetTxFiFo+0x36>
 80017c0:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80017c2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80017c6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 80017ca:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80017cc:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 80017ce:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80017d0:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80017d4:	d1f5      	bne.n	80017c2 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80017d6:	3140      	adds	r1, #64	@ 0x40
 80017d8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80017dc:	ea42 020c 	orr.w	r2, r2, ip
 80017e0:	6062      	str	r2, [r4, #4]
}
 80017e2:	2000      	movs	r0, #0
 80017e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop

080017ec <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80017ec:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80017ee:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80017f0:	6259      	str	r1, [r3, #36]	@ 0x24
}
 80017f2:	4770      	bx	lr

080017f4 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop

080017f8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f8:	2800      	cmp	r0, #0
 80017fa:	f000 81d8 	beq.w	8001bae <HAL_RCC_OscConfig+0x3b6>
{
 80017fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	6803      	ldr	r3, [r0, #0]
 8001804:	07dd      	lsls	r5, r3, #31
{
 8001806:	b082      	sub	sp, #8
 8001808:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	d52f      	bpl.n	800186c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800180c:	499d      	ldr	r1, [pc, #628]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
 800180e:	688a      	ldr	r2, [r1, #8]
 8001810:	f002 020c 	and.w	r2, r2, #12
 8001814:	2a04      	cmp	r2, #4
 8001816:	f000 80ec 	beq.w	80019f2 <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800181a:	688a      	ldr	r2, [r1, #8]
 800181c:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001820:	2a08      	cmp	r2, #8
 8001822:	f000 80e2 	beq.w	80019ea <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001826:	6863      	ldr	r3, [r4, #4]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182c:	f000 80eb 	beq.w	8001a06 <HAL_RCC_OscConfig+0x20e>
 8001830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001834:	f000 8173 	beq.w	8001b1e <HAL_RCC_OscConfig+0x326>
 8001838:	4d92      	ldr	r5, [pc, #584]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
 800183a:	682a      	ldr	r2, [r5, #0]
 800183c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001840:	602a      	str	r2, [r5, #0]
 8001842:	682a      	ldr	r2, [r5, #0]
 8001844:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001848:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 80e0 	bne.w	8001a10 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff f884 	bl	800095c <HAL_GetTick>
 8001854:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	e005      	b.n	8001864 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff f880 	bl	800095c <HAL_GetTick>
 800185c:	1b80      	subs	r0, r0, r6
 800185e:	2864      	cmp	r0, #100	@ 0x64
 8001860:	f200 8100 	bhi.w	8001a64 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001864:	682b      	ldr	r3, [r5, #0]
 8001866:	039f      	lsls	r7, r3, #14
 8001868:	d4f6      	bmi.n	8001858 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	079d      	lsls	r5, r3, #30
 800186e:	d528      	bpl.n	80018c2 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001870:	4a84      	ldr	r2, [pc, #528]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
 8001872:	6891      	ldr	r1, [r2, #8]
 8001874:	f011 0f0c 	tst.w	r1, #12
 8001878:	f000 809b 	beq.w	80019b2 <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187c:	6891      	ldr	r1, [r2, #8]
 800187e:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001882:	2908      	cmp	r1, #8
 8001884:	f000 8091 	beq.w	80019aa <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001888:	68e3      	ldr	r3, [r4, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 810c 	beq.w	8001aa8 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b7d      	ldr	r3, [pc, #500]	@ (8001a88 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001892:	4e7c      	ldr	r6, [pc, #496]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001898:	f7ff f860 	bl	800095c <HAL_GetTick>
 800189c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189e:	e005      	b.n	80018ac <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff f85c 	bl	800095c <HAL_GetTick>
 80018a4:	1b40      	subs	r0, r0, r5
 80018a6:	2802      	cmp	r0, #2
 80018a8:	f200 80dc 	bhi.w	8001a64 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	6833      	ldr	r3, [r6, #0]
 80018ae:	079f      	lsls	r7, r3, #30
 80018b0:	d5f6      	bpl.n	80018a0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b2:	6833      	ldr	r3, [r6, #0]
 80018b4:	6922      	ldr	r2, [r4, #16]
 80018b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80018ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018be:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	071a      	lsls	r2, r3, #28
 80018c4:	d45c      	bmi.n	8001980 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c6:	075d      	lsls	r5, r3, #29
 80018c8:	d53a      	bpl.n	8001940 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
 80018cc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80018ce:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 80018d2:	f040 8088 	bne.w	80019e6 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80018da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018de:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018ea:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	4e67      	ldr	r6, [pc, #412]	@ (8001a8c <HAL_RCC_OscConfig+0x294>)
 80018ee:	6833      	ldr	r3, [r6, #0]
 80018f0:	05d8      	lsls	r0, r3, #23
 80018f2:	f140 80a7 	bpl.w	8001a44 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f6:	68a3      	ldr	r3, [r4, #8]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	f000 80b7 	beq.w	8001a6c <HAL_RCC_OscConfig+0x274>
 80018fe:	2b05      	cmp	r3, #5
 8001900:	f000 811d 	beq.w	8001b3e <HAL_RCC_OscConfig+0x346>
 8001904:	4e5f      	ldr	r6, [pc, #380]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
 8001906:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8001908:	f022 0201 	bic.w	r2, r2, #1
 800190c:	6732      	str	r2, [r6, #112]	@ 0x70
 800190e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8001910:	f022 0204 	bic.w	r2, r2, #4
 8001914:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80ad 	bne.w	8001a76 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff f81e 	bl	800095c <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001924:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001926:	e005      	b.n	8001934 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff f818 	bl	800095c <HAL_GetTick>
 800192c:	1bc0      	subs	r0, r0, r7
 800192e:	4540      	cmp	r0, r8
 8001930:	f200 8098 	bhi.w	8001a64 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001934:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001936:	079b      	lsls	r3, r3, #30
 8001938:	d4f6      	bmi.n	8001928 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800193a:	2d00      	cmp	r5, #0
 800193c:	f040 80f9 	bne.w	8001b32 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001940:	69a3      	ldr	r3, [r4, #24]
 8001942:	b1cb      	cbz	r3, 8001978 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001944:	4d4f      	ldr	r5, [pc, #316]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
 8001946:	68aa      	ldr	r2, [r5, #8]
 8001948:	f002 020c 	and.w	r2, r2, #12
 800194c:	2a08      	cmp	r2, #8
 800194e:	f000 80bc 	beq.w	8001aca <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001952:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b4c      	ldr	r3, [pc, #304]	@ (8001a88 <HAL_RCC_OscConfig+0x290>)
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195c:	f000 80f9 	beq.w	8001b52 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7fe fffc 	bl	800095c <HAL_GetTick>
 8001964:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	e004      	b.n	8001972 <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7fe fff8 	bl	800095c <HAL_GetTick>
 800196c:	1b00      	subs	r0, r0, r4
 800196e:	2802      	cmp	r0, #2
 8001970:	d878      	bhi.n	8001a64 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	682b      	ldr	r3, [r5, #0]
 8001974:	019b      	lsls	r3, r3, #6
 8001976:	d4f7      	bmi.n	8001968 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001978:	2000      	movs	r0, #0
}
 800197a:	b002      	add	sp, #8
 800197c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001980:	6963      	ldr	r3, [r4, #20]
 8001982:	b1fb      	cbz	r3, 80019c4 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8001984:	4b40      	ldr	r3, [pc, #256]	@ (8001a88 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	4e3f      	ldr	r6, [pc, #252]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8001988:	2201      	movs	r2, #1
 800198a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800198e:	f7fe ffe5 	bl	800095c <HAL_GetTick>
 8001992:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001994:	e004      	b.n	80019a0 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001996:	f7fe ffe1 	bl	800095c <HAL_GetTick>
 800199a:	1b40      	subs	r0, r0, r5
 800199c:	2802      	cmp	r0, #2
 800199e:	d861      	bhi.n	8001a64 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a0:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80019a2:	079b      	lsls	r3, r3, #30
 80019a4:	d5f7      	bpl.n	8001996 <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	e78d      	b.n	80018c6 <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	6852      	ldr	r2, [r2, #4]
 80019ac:	0251      	lsls	r1, r2, #9
 80019ae:	f53f af6b 	bmi.w	8001888 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	4a34      	ldr	r2, [pc, #208]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	0792      	lsls	r2, r2, #30
 80019b8:	d538      	bpl.n	8001a2c <HAL_RCC_OscConfig+0x234>
 80019ba:	68e2      	ldr	r2, [r4, #12]
 80019bc:	2a01      	cmp	r2, #1
 80019be:	d035      	beq.n	8001a2c <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 80019c0:	2001      	movs	r0, #1
 80019c2:	e7da      	b.n	800197a <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 80019c4:	4a30      	ldr	r2, [pc, #192]	@ (8001a88 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c6:	4e2f      	ldr	r6, [pc, #188]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 80019c8:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80019cc:	f7fe ffc6 	bl	800095c <HAL_GetTick>
 80019d0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d2:	e004      	b.n	80019de <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d4:	f7fe ffc2 	bl	800095c <HAL_GetTick>
 80019d8:	1b40      	subs	r0, r0, r5
 80019da:	2802      	cmp	r0, #2
 80019dc:	d842      	bhi.n	8001a64 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019de:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80019e0:	079f      	lsls	r7, r3, #30
 80019e2:	d4f7      	bmi.n	80019d4 <HAL_RCC_OscConfig+0x1dc>
 80019e4:	e7df      	b.n	80019a6 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 80019e6:	2500      	movs	r5, #0
 80019e8:	e780      	b.n	80018ec <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ea:	684a      	ldr	r2, [r1, #4]
 80019ec:	0251      	lsls	r1, r2, #9
 80019ee:	f57f af1a 	bpl.w	8001826 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f2:	4a24      	ldr	r2, [pc, #144]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	0392      	lsls	r2, r2, #14
 80019f8:	f57f af38 	bpl.w	800186c <HAL_RCC_OscConfig+0x74>
 80019fc:	6862      	ldr	r2, [r4, #4]
 80019fe:	2a00      	cmp	r2, #0
 8001a00:	f47f af34 	bne.w	800186c <HAL_RCC_OscConfig+0x74>
 8001a04:	e7dc      	b.n	80019c0 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a06:	4a1f      	ldr	r2, [pc, #124]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
 8001a08:	6813      	ldr	r3, [r2, #0]
 8001a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001a10:	f7fe ffa4 	bl	800095c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a14:	4e1b      	ldr	r6, [pc, #108]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001a16:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a18:	e004      	b.n	8001a24 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1a:	f7fe ff9f 	bl	800095c <HAL_GetTick>
 8001a1e:	1b40      	subs	r0, r0, r5
 8001a20:	2864      	cmp	r0, #100	@ 0x64
 8001a22:	d81f      	bhi.n	8001a64 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a24:	6833      	ldr	r3, [r6, #0]
 8001a26:	039b      	lsls	r3, r3, #14
 8001a28:	d5f7      	bpl.n	8001a1a <HAL_RCC_OscConfig+0x222>
 8001a2a:	e71e      	b.n	800186a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2c:	4915      	ldr	r1, [pc, #84]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
 8001a2e:	6920      	ldr	r0, [r4, #16]
 8001a30:	680a      	ldr	r2, [r1, #0]
 8001a32:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8001a36:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001a3a:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3c:	071a      	lsls	r2, r3, #28
 8001a3e:	f57f af42 	bpl.w	80018c6 <HAL_RCC_OscConfig+0xce>
 8001a42:	e79d      	b.n	8001980 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a44:	6833      	ldr	r3, [r6, #0]
 8001a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a4a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a4c:	f7fe ff86 	bl	800095c <HAL_GetTick>
 8001a50:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a52:	6833      	ldr	r3, [r6, #0]
 8001a54:	05d9      	lsls	r1, r3, #23
 8001a56:	f53f af4e 	bmi.w	80018f6 <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5a:	f7fe ff7f 	bl	800095c <HAL_GetTick>
 8001a5e:	1bc0      	subs	r0, r0, r7
 8001a60:	2802      	cmp	r0, #2
 8001a62:	d9f6      	bls.n	8001a52 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8001a64:	2003      	movs	r0, #3
}
 8001a66:	b002      	add	sp, #8
 8001a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6c:	4a05      	ldr	r2, [pc, #20]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
 8001a6e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8001a76:	f7fe ff71 	bl	800095c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7a:	4f02      	ldr	r7, [pc, #8]	@ (8001a84 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001a7c:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_OscConfig+0x2a2>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	42470000 	.word	0x42470000
 8001a8c:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a90:	f7fe ff64 	bl	800095c <HAL_GetTick>
 8001a94:	1b80      	subs	r0, r0, r6
 8001a96:	4540      	cmp	r0, r8
 8001a98:	d8e4      	bhi.n	8001a64 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a9c:	079a      	lsls	r2, r3, #30
 8001a9e:	d5f7      	bpl.n	8001a90 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8001aa0:	2d00      	cmp	r5, #0
 8001aa2:	f43f af4d 	beq.w	8001940 <HAL_RCC_OscConfig+0x148>
 8001aa6:	e044      	b.n	8001b32 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8001aa8:	4a42      	ldr	r2, [pc, #264]	@ (8001bb4 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4e43      	ldr	r6, [pc, #268]	@ (8001bb8 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8001aac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001aae:	f7fe ff55 	bl	800095c <HAL_GetTick>
 8001ab2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab4:	e004      	b.n	8001ac0 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7fe ff51 	bl	800095c <HAL_GetTick>
 8001aba:	1b40      	subs	r0, r0, r5
 8001abc:	2802      	cmp	r0, #2
 8001abe:	d8d1      	bhi.n	8001a64 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac0:	6833      	ldr	r3, [r6, #0]
 8001ac2:	0799      	lsls	r1, r3, #30
 8001ac4:	d4f7      	bmi.n	8001ab6 <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	e6fb      	b.n	80018c2 <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	f43f af78 	beq.w	80019c0 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8001ad0:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad2:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad8:	4291      	cmp	r1, r2
 8001ada:	f47f af71 	bne.w	80019c0 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae0:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae4:	4291      	cmp	r1, r2
 8001ae6:	f47f af6b 	bne.w	80019c0 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001aec:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001af0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001af6:	f47f af63 	bne.w	80019c0 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001afa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001afc:	0852      	lsrs	r2, r2, #1
 8001afe:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001b02:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b04:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001b08:	f47f af5a 	bne.w	80019c0 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b0c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001b0e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b12:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001b16:	bf14      	ite	ne
 8001b18:	2001      	movne	r0, #1
 8001b1a:	2000      	moveq	r0, #0
 8001b1c:	e72d      	b.n	800197a <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1e:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <HAL_RCC_OscConfig+0x3c0>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b2e:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b30:	e76e      	b.n	8001a10 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b32:	4a21      	ldr	r2, [pc, #132]	@ (8001bb8 <HAL_RCC_OscConfig+0x3c0>)
 8001b34:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3c:	e700      	b.n	8001940 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <HAL_RCC_OscConfig+0x3c0>)
 8001b40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b42:	f042 0204 	orr.w	r2, r2, #4
 8001b46:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b48:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b50:	e791      	b.n	8001a76 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8001b52:	f7fe ff03 	bl	800095c <HAL_GetTick>
 8001b56:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b58:	e005      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7fe feff 	bl	800095c <HAL_GetTick>
 8001b5e:	1b80      	subs	r0, r0, r6
 8001b60:	2802      	cmp	r0, #2
 8001b62:	f63f af7f 	bhi.w	8001a64 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	682b      	ldr	r3, [r5, #0]
 8001b68:	0199      	lsls	r1, r3, #6
 8001b6a:	d4f6      	bmi.n	8001b5a <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b6c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001b70:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001b72:	430b      	orrs	r3, r1
 8001b74:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b78:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8001b7c:	0852      	lsrs	r2, r2, #1
 8001b7e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001b82:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001b84:	490b      	ldr	r1, [pc, #44]	@ (8001bb4 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001b8a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b8c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b8e:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001b90:	f7fe fee4 	bl	800095c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b94:	4d08      	ldr	r5, [pc, #32]	@ (8001bb8 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8001b96:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b98:	e005      	b.n	8001ba6 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7fe fedf 	bl	800095c <HAL_GetTick>
 8001b9e:	1b00      	subs	r0, r0, r4
 8001ba0:	2802      	cmp	r0, #2
 8001ba2:	f63f af5f 	bhi.w	8001a64 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	682b      	ldr	r3, [r5, #0]
 8001ba8:	019a      	lsls	r2, r3, #6
 8001baa:	d5f6      	bpl.n	8001b9a <HAL_RCC_OscConfig+0x3a2>
 8001bac:	e6e4      	b.n	8001978 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8001bae:	2001      	movs	r0, #1
}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	42470000 	.word	0x42470000
 8001bb8:	40023800 	.word	0x40023800

08001bbc <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001bbc:	4b01      	ldr	r3, [pc, #4]	@ (8001bc4 <HAL_RCC_EnableCSS+0x8>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001bc2:	4770      	bx	lr
 8001bc4:	42470000 	.word	0x42470000

08001bc8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc8:	4916      	ldr	r1, [pc, #88]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8001bca:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bcc:	688b      	ldr	r3, [r1, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d01b      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x46>
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d117      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bda:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bdc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bde:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be0:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be8:	d113      	bne.n	8001c12 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bea:	480f      	ldr	r0, [pc, #60]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x60>)
 8001bec:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001bf0:	fba1 0100 	umull	r0, r1, r1, r0
 8001bf4:	f7fe fb54 	bl	80002a0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c00:	3301      	adds	r3, #1
 8001c02:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001c04:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c08:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001c0a:	4807      	ldr	r0, [pc, #28]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8001c0c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c0e:	4807      	ldr	r0, [pc, #28]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001c10:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	4806      	ldr	r0, [pc, #24]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x64>)
 8001c14:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c18:	2300      	movs	r3, #0
 8001c1a:	fba1 0100 	umull	r0, r1, r1, r0
 8001c1e:	f7fe fb3f 	bl	80002a0 <__aeabi_uldivmod>
 8001c22:	e7e9      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x30>
 8001c24:	40023800 	.word	0x40023800
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	017d7840 	.word	0x017d7840

08001c30 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001c30:	2800      	cmp	r0, #0
 8001c32:	f000 8087 	beq.w	8001d44 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c36:	4a48      	ldr	r2, [pc, #288]	@ (8001d58 <HAL_RCC_ClockConfig+0x128>)
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	428b      	cmp	r3, r1
{
 8001c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c44:	460d      	mov	r5, r1
 8001c46:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c48:	d209      	bcs.n	8001c5e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	b2cb      	uxtb	r3, r1
 8001c4c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	428b      	cmp	r3, r1
 8001c56:	d002      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001c58:	2001      	movs	r0, #1
}
 8001c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	0798      	lsls	r0, r3, #30
 8001c62:	d514      	bpl.n	8001c8e <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	0759      	lsls	r1, r3, #29
 8001c66:	d504      	bpl.n	8001c72 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	493c      	ldr	r1, [pc, #240]	@ (8001d5c <HAL_RCC_ClockConfig+0x12c>)
 8001c6a:	688a      	ldr	r2, [r1, #8]
 8001c6c:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8001c70:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c72:	071a      	lsls	r2, r3, #28
 8001c74:	d504      	bpl.n	8001c80 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c76:	4939      	ldr	r1, [pc, #228]	@ (8001d5c <HAL_RCC_ClockConfig+0x12c>)
 8001c78:	688a      	ldr	r2, [r1, #8]
 8001c7a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8001c7e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4936      	ldr	r1, [pc, #216]	@ (8001d5c <HAL_RCC_ClockConfig+0x12c>)
 8001c82:	68a0      	ldr	r0, [r4, #8]
 8001c84:	688a      	ldr	r2, [r1, #8]
 8001c86:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001c8a:	4302      	orrs	r2, r0
 8001c8c:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8e:	07df      	lsls	r7, r3, #31
 8001c90:	d521      	bpl.n	8001cd6 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	6862      	ldr	r2, [r4, #4]
 8001c94:	2a01      	cmp	r2, #1
 8001c96:	d057      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c98:	1e93      	subs	r3, r2, #2
 8001c9a:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d5c <HAL_RCC_ClockConfig+0x12c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca0:	d94d      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca2:	0799      	lsls	r1, r3, #30
 8001ca4:	d5d8      	bpl.n	8001c58 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca6:	4e2d      	ldr	r6, [pc, #180]	@ (8001d5c <HAL_RCC_ClockConfig+0x12c>)
 8001ca8:	68b3      	ldr	r3, [r6, #8]
 8001caa:	f023 0303 	bic.w	r3, r3, #3
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001cb2:	f7fe fe53 	bl	800095c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb6:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8001cba:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbc:	e004      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbe:	f7fe fe4d 	bl	800095c <HAL_GetTick>
 8001cc2:	1bc0      	subs	r0, r0, r7
 8001cc4:	4540      	cmp	r0, r8
 8001cc6:	d844      	bhi.n	8001d52 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc8:	68b3      	ldr	r3, [r6, #8]
 8001cca:	6862      	ldr	r2, [r4, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001cd4:	d1f3      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd6:	4a20      	ldr	r2, [pc, #128]	@ (8001d58 <HAL_RCC_ClockConfig+0x128>)
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	42ab      	cmp	r3, r5
 8001ce0:	d906      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	b2eb      	uxtb	r3, r5
 8001ce4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	6813      	ldr	r3, [r2, #0]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	42ab      	cmp	r3, r5
 8001cee:	d1b3      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	075a      	lsls	r2, r3, #29
 8001cf4:	d506      	bpl.n	8001d04 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf6:	4919      	ldr	r1, [pc, #100]	@ (8001d5c <HAL_RCC_ClockConfig+0x12c>)
 8001cf8:	68e0      	ldr	r0, [r4, #12]
 8001cfa:	688a      	ldr	r2, [r1, #8]
 8001cfc:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8001d00:	4302      	orrs	r2, r0
 8001d02:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d04:	071b      	lsls	r3, r3, #28
 8001d06:	d507      	bpl.n	8001d18 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d08:	4a14      	ldr	r2, [pc, #80]	@ (8001d5c <HAL_RCC_ClockConfig+0x12c>)
 8001d0a:	6921      	ldr	r1, [r4, #16]
 8001d0c:	6893      	ldr	r3, [r2, #8]
 8001d0e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001d12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d16:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d18:	f7ff ff56 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d5c <HAL_RCC_ClockConfig+0x12c>)
 8001d1e:	4c10      	ldr	r4, [pc, #64]	@ (8001d60 <HAL_RCC_ClockConfig+0x130>)
 8001d20:	6892      	ldr	r2, [r2, #8]
 8001d22:	4910      	ldr	r1, [pc, #64]	@ (8001d64 <HAL_RCC_ClockConfig+0x134>)
 8001d24:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001d28:	4603      	mov	r3, r0
 8001d2a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 8001d2c:	480e      	ldr	r0, [pc, #56]	@ (8001d68 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d2e:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8001d30:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d32:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8001d34:	f7fe fcf2 	bl	800071c <HAL_InitTick>
  return HAL_OK;
 8001d38:	2000      	movs	r0, #0
}
 8001d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	0198      	lsls	r0, r3, #6
 8001d40:	d4b1      	bmi.n	8001ca6 <HAL_RCC_ClockConfig+0x76>
 8001d42:	e789      	b.n	8001c58 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001d44:	2001      	movs	r0, #1
}
 8001d46:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d48:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <HAL_RCC_ClockConfig+0x12c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	039e      	lsls	r6, r3, #14
 8001d4e:	d4aa      	bmi.n	8001ca6 <HAL_RCC_ClockConfig+0x76>
 8001d50:	e782      	b.n	8001c58 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8001d52:	2003      	movs	r0, #3
 8001d54:	e781      	b.n	8001c5a <HAL_RCC_ClockConfig+0x2a>
 8001d56:	bf00      	nop
 8001d58:	40023c00 	.word	0x40023c00
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	08006ac8 	.word	0x08006ac8
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000008 	.word	0x20000008

08001d6c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001d6c:	4b01      	ldr	r3, [pc, #4]	@ (8001d74 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d78:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001d7a:	4905      	ldr	r1, [pc, #20]	@ (8001d90 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d80:	6808      	ldr	r0, [r1, #0]
 8001d82:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
}
 8001d88:	40d8      	lsrs	r0, r3
 8001d8a:	4770      	bx	lr
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	20000000 	.word	0x20000000
 8001d94:	08006ac0 	.word	0x08006ac0

08001d98 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d98:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	f002 0203 	and.w	r2, r2, #3
 8001da4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8001dac:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8001db4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	08db      	lsrs	r3, r3, #3
{
 8001dba:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dbc:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dc0:	4c05      	ldr	r4, [pc, #20]	@ (8001dd8 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dc2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dc4:	6823      	ldr	r3, [r4, #0]
}
 8001dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	600b      	str	r3, [r1, #0]
}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40023c00 	.word	0x40023c00

08001ddc <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <HAL_RCC_NMI_IRQHandler>:
{
 8001de0:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001de2:	4c05      	ldr	r4, [pc, #20]	@ (8001df8 <HAL_RCC_NMI_IRQHandler+0x18>)
 8001de4:	68e3      	ldr	r3, [r4, #12]
 8001de6:	061b      	lsls	r3, r3, #24
 8001de8:	d400      	bmi.n	8001dec <HAL_RCC_NMI_IRQHandler+0xc>
}
 8001dea:	bd10      	pop	{r4, pc}
    HAL_RCC_CSSCallback();
 8001dec:	f7ff fff6 	bl	8001ddc <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	73a3      	strb	r3, [r4, #14]
}
 8001df4:	bd10      	pop	{r4, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800

08001dfc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop

08001e00 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e00:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d12f      	bne.n	8001e68 <HAL_TIM_Base_Start_IT+0x68>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e08:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e0a:	4918      	ldr	r1, [pc, #96]	@ (8001e6c <HAL_TIM_Base_Start_IT+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e12:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e14:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1c:	d019      	beq.n	8001e52 <HAL_TIM_Base_Start_IT+0x52>
 8001e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e22:	d016      	beq.n	8001e52 <HAL_TIM_Base_Start_IT+0x52>
 8001e24:	4a12      	ldr	r2, [pc, #72]	@ (8001e70 <HAL_TIM_Base_Start_IT+0x70>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d013      	beq.n	8001e52 <HAL_TIM_Base_Start_IT+0x52>
 8001e2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00f      	beq.n	8001e52 <HAL_TIM_Base_Start_IT+0x52>
 8001e32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00b      	beq.n	8001e52 <HAL_TIM_Base_Start_IT+0x52>
 8001e3a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <HAL_TIM_Base_Start_IT+0x52>
 8001e42:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_Base_Start_IT+0x52>
 8001e4a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d104      	bne.n	8001e5c <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e58:	2a06      	cmp	r2, #6
 8001e5a:	d003      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8001e64:	2000      	movs	r0, #0
 8001e66:	4770      	bx	lr
    return HAL_ERROR;
 8001e68:	2001      	movs	r0, #1
}
 8001e6a:	4770      	bx	lr
 8001e6c:	40010000 	.word	0x40010000
 8001e70:	40000400 	.word	0x40000400

08001e74 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop

08001e78 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop

08001e7c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop

08001e84 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8001e84:	6803      	ldr	r3, [r0, #0]
{
 8001e86:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8001e88:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e8a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e8c:	07a9      	lsls	r1, r5, #30
{
 8001e8e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e90:	d501      	bpl.n	8001e96 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e92:	07b2      	lsls	r2, r6, #30
 8001e94:	d451      	bmi.n	8001f3a <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e96:	0769      	lsls	r1, r5, #29
 8001e98:	d501      	bpl.n	8001e9e <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e9a:	0772      	lsls	r2, r6, #29
 8001e9c:	d43a      	bmi.n	8001f14 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e9e:	072b      	lsls	r3, r5, #28
 8001ea0:	d501      	bpl.n	8001ea6 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ea2:	0730      	lsls	r0, r6, #28
 8001ea4:	d424      	bmi.n	8001ef0 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ea6:	06ea      	lsls	r2, r5, #27
 8001ea8:	d501      	bpl.n	8001eae <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001eaa:	06f3      	lsls	r3, r6, #27
 8001eac:	d410      	bmi.n	8001ed0 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001eae:	07e8      	lsls	r0, r5, #31
 8001eb0:	d501      	bpl.n	8001eb6 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001eb2:	07f1      	lsls	r1, r6, #31
 8001eb4:	d457      	bmi.n	8001f66 <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001eb6:	062a      	lsls	r2, r5, #24
 8001eb8:	d501      	bpl.n	8001ebe <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001eba:	0633      	lsls	r3, r6, #24
 8001ebc:	d45b      	bmi.n	8001f76 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ebe:	0668      	lsls	r0, r5, #25
 8001ec0:	d501      	bpl.n	8001ec6 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ec2:	0671      	lsls	r1, r6, #25
 8001ec4:	d45f      	bmi.n	8001f86 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ec6:	06aa      	lsls	r2, r5, #26
 8001ec8:	d501      	bpl.n	8001ece <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eca:	06b3      	lsls	r3, r6, #26
 8001ecc:	d442      	bmi.n	8001f54 <HAL_TIM_IRQHandler+0xd0>
}
 8001ece:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	f06f 0210 	mvn.w	r2, #16
 8001ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ed8:	2208      	movs	r2, #8
 8001eda:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee4:	d063      	beq.n	8001fae <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee6:	f7ff ffc7 	bl	8001e78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	2300      	movs	r3, #0
 8001eec:	7723      	strb	r3, [r4, #28]
 8001eee:	e7de      	b.n	8001eae <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	f06f 0208 	mvn.w	r2, #8
 8001ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ef8:	2204      	movs	r2, #4
 8001efa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001f00:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f02:	d151      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f04:	f7ff ffb6 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff ffb7 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	7723      	strb	r3, [r4, #28]
 8001f12:	e7c8      	b.n	8001ea6 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	f06f 0204 	mvn.w	r2, #4
 8001f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001f26:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f28:	d13b      	bne.n	8001fa2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	f7ff ffa3 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f7ff ffa4 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f34:	2300      	movs	r3, #0
 8001f36:	7723      	strb	r3, [r4, #28]
 8001f38:	e7b1      	b.n	8001e9e <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f3a:	f06f 0202 	mvn.w	r2, #2
 8001f3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f40:	2201      	movs	r2, #1
 8001f42:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	079b      	lsls	r3, r3, #30
 8001f48:	d025      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	f7ff ff95 	bl	8001e78 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	7723      	strb	r3, [r4, #28]
 8001f52:	e7a0      	b.n	8001e96 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001f5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f5c:	611a      	str	r2, [r3, #16]
}
 8001f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001f62:	f000 b8c7 	b.w	80020f4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	f06f 0201 	mvn.w	r2, #1
 8001f6c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f7fe fba8 	bl	80006c4 <HAL_TIM_PeriodElapsedCallback>
 8001f74:	e79f      	b.n	8001eb6 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f7c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f000 f8ba 	bl	80020f8 <HAL_TIMEx_BreakCallback>
 8001f84:	e79b      	b.n	8001ebe <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f8c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f7ff ff76 	bl	8001e80 <HAL_TIM_TriggerCallback>
 8001f94:	e797      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	f7ff ff6d 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7ff ff6e 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
 8001fa0:	e7d5      	b.n	8001f4e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	f7ff ff69 	bl	8001e78 <HAL_TIM_IC_CaptureCallback>
 8001fa6:	e7c5      	b.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa8:	f7ff ff66 	bl	8001e78 <HAL_TIM_IC_CaptureCallback>
 8001fac:	e7af      	b.n	8001f0e <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	f7ff ff61 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7ff ff62 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
 8001fb8:	e797      	b.n	8001eea <HAL_TIM_IRQHandler+0x66>
 8001fba:	bf00      	nop

08001fbc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fbc:	4a34      	ldr	r2, [pc, #208]	@ (8002090 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8001fbe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc0:	4290      	cmp	r0, r2
{
 8001fc2:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc4:	d050      	beq.n	8002068 <TIM_Base_SetConfig+0xac>
 8001fc6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001fca:	d03b      	beq.n	8002044 <TIM_Base_SetConfig+0x88>
 8001fcc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001fd0:	4290      	cmp	r0, r2
 8001fd2:	d037      	beq.n	8002044 <TIM_Base_SetConfig+0x88>
 8001fd4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fd8:	4290      	cmp	r0, r2
 8001fda:	d033      	beq.n	8002044 <TIM_Base_SetConfig+0x88>
 8001fdc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fe0:	4290      	cmp	r0, r2
 8001fe2:	d02f      	beq.n	8002044 <TIM_Base_SetConfig+0x88>
 8001fe4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001fe8:	4290      	cmp	r0, r2
 8001fea:	d03d      	beq.n	8002068 <TIM_Base_SetConfig+0xac>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fec:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001ff0:	4290      	cmp	r0, r2
 8001ff2:	d02b      	beq.n	800204c <TIM_Base_SetConfig+0x90>
 8001ff4:	4a27      	ldr	r2, [pc, #156]	@ (8002094 <TIM_Base_SetConfig+0xd8>)
 8001ff6:	4290      	cmp	r0, r2
 8001ff8:	d028      	beq.n	800204c <TIM_Base_SetConfig+0x90>
 8001ffa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ffe:	4290      	cmp	r0, r2
 8002000:	d024      	beq.n	800204c <TIM_Base_SetConfig+0x90>
 8002002:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002006:	4290      	cmp	r0, r2
 8002008:	d020      	beq.n	800204c <TIM_Base_SetConfig+0x90>
 800200a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800200e:	4290      	cmp	r0, r2
 8002010:	d01c      	beq.n	800204c <TIM_Base_SetConfig+0x90>
 8002012:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002016:	4290      	cmp	r0, r2
 8002018:	d018      	beq.n	800204c <TIM_Base_SetConfig+0x90>

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800201a:	680a      	ldr	r2, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800201c:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800201e:	6949      	ldr	r1, [r1, #20]
 8002020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002024:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002026:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002028:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800202a:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800202c:	2301      	movs	r3, #1
 800202e:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002030:	6903      	ldr	r3, [r0, #16]
 8002032:	07db      	lsls	r3, r3, #31
 8002034:	d503      	bpl.n	800203e <TIM_Base_SetConfig+0x82>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002036:	6903      	ldr	r3, [r0, #16]
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6103      	str	r3, [r0, #16]
  }
}
 800203e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002042:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002044:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800204a:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204c:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800204e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002054:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800205a:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800205c:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800205e:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8002060:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002062:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002064:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002066:	e7e1      	b.n	800202c <TIM_Base_SetConfig+0x70>
    tmpcr1 |= Structure->CounterMode;
 8002068:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800206c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002070:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8002072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002076:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002078:	694a      	ldr	r2, [r1, #20]
 800207a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800207e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002080:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002082:	688b      	ldr	r3, [r1, #8]
 8002084:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002086:	680b      	ldr	r3, [r1, #0]
 8002088:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800208a:	690b      	ldr	r3, [r1, #16]
 800208c:	6303      	str	r3, [r0, #48]	@ 0x30
 800208e:	e7cd      	b.n	800202c <TIM_Base_SetConfig+0x70>
 8002090:	40010000 	.word	0x40010000
 8002094:	40014400 	.word	0x40014400

08002098 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002098:	b350      	cbz	r0, 80020f0 <HAL_TIM_Base_Init+0x58>
{
 800209a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800209c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80020a0:	4604      	mov	r4, r0
 80020a2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80020a6:	b1f3      	cbz	r3, 80020e6 <HAL_TIM_Base_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80020aa:	2302      	movs	r3, #2
 80020ac:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80020b4:	f7ff ff82 	bl	8001fbc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020be:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80020c2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80020c6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80020ca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ce:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80020d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020d6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80020da:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80020de:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80020e2:	2000      	movs	r0, #0
}
 80020e4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80020e6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80020ea:	f7ff fe87 	bl	8001dfc <HAL_TIM_Base_MspInit>
 80020ee:	e7db      	b.n	80020a8 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80020f0:	2001      	movs	r0, #1
}
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop

080020f8 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop

080020fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80020fc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	e002      	b.n	800210a <USB_CoreReset+0xe>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002104:	6903      	ldr	r3, [r0, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db09      	blt.n	800211e <USB_CoreReset+0x22>
    count++;
 800210a:	9b01      	ldr	r3, [sp, #4]
 800210c:	3301      	adds	r3, #1
 800210e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002110:	9b01      	ldr	r3, [sp, #4]
 8002112:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002116:	d9f5      	bls.n	8002104 <USB_CoreReset+0x8>
      return HAL_TIMEOUT;
 8002118:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 800211a:	b002      	add	sp, #8
 800211c:	4770      	bx	lr
  count = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002122:	6903      	ldr	r3, [r0, #16]
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6103      	str	r3, [r0, #16]
 800212a:	e003      	b.n	8002134 <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800212c:	6903      	ldr	r3, [r0, #16]
 800212e:	f013 0301 	ands.w	r3, r3, #1
 8002132:	d007      	beq.n	8002144 <USB_CoreReset+0x48>
    count++;
 8002134:	9b01      	ldr	r3, [sp, #4]
 8002136:	3301      	adds	r3, #1
 8002138:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002140:	d9f4      	bls.n	800212c <USB_CoreReset+0x30>
 8002142:	e7e9      	b.n	8002118 <USB_CoreReset+0x1c>
  return HAL_OK;
 8002144:	4618      	mov	r0, r3
}
 8002146:	b002      	add	sp, #8
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <USB_CoreInit>:
{
 800214c:	b084      	sub	sp, #16
 800214e:	b510      	push	{r4, lr}
 8002150:	f10d 0c0c 	add.w	ip, sp, #12
 8002154:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002158:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800215c:	2b01      	cmp	r3, #1
{
 800215e:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002160:	d124      	bne.n	80021ac <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002162:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    if (cfg.use_external_vbus == 1U)
 8002164:	f89d 2018 	ldrb.w	r2, [sp, #24]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800216c:	6383      	str	r3, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800216e:	68c3      	ldr	r3, [r0, #12]
 8002170:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002178:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800217a:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800217c:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800217e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002182:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002184:	d025      	beq.n	80021d2 <USB_CoreInit+0x86>
    ret = USB_CoreReset(USBx);
 8002186:	4620      	mov	r0, r4
 8002188:	f7ff ffb8 	bl	80020fc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800218c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d107      	bne.n	80021a4 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002194:	68a3      	ldr	r3, [r4, #8]
 8002196:	f043 0306 	orr.w	r3, r3, #6
 800219a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800219c:	68a3      	ldr	r3, [r4, #8]
 800219e:	f043 0320 	orr.w	r3, r3, #32
 80021a2:	60a3      	str	r3, [r4, #8]
}
 80021a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021a8:	b004      	add	sp, #16
 80021aa:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80021ac:	68c3      	ldr	r3, [r0, #12]
 80021ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021b2:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80021b4:	f7ff ffa2 	bl	80020fc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80021b8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80021bc:	b923      	cbnz	r3, 80021c8 <USB_CoreInit+0x7c>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80021c6:	e7e1      	b.n	800218c <USB_CoreInit+0x40>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80021c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ce:	63a3      	str	r3, [r4, #56]	@ 0x38
 80021d0:	e7dc      	b.n	800218c <USB_CoreInit+0x40>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80021d2:	68c3      	ldr	r3, [r0, #12]
 80021d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021d8:	60c3      	str	r3, [r0, #12]
 80021da:	e7d4      	b.n	8002186 <USB_CoreInit+0x3a>

080021dc <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80021dc:	2a02      	cmp	r2, #2
{
 80021de:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 80021e0:	d00a      	beq.n	80021f8 <USB_SetTurnaroundTime+0x1c>
 80021e2:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 80021ec:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	430a      	orrs	r2, r1
}
 80021f2:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80021f4:	60da      	str	r2, [r3, #12]
}
 80021f6:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80021f8:	4a26      	ldr	r2, [pc, #152]	@ (8002294 <USB_SetTurnaroundTime+0xb8>)
 80021fa:	4827      	ldr	r0, [pc, #156]	@ (8002298 <USB_SetTurnaroundTime+0xbc>)
 80021fc:	440a      	add	r2, r1
 80021fe:	4282      	cmp	r2, r0
 8002200:	d932      	bls.n	8002268 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002202:	4a26      	ldr	r2, [pc, #152]	@ (800229c <USB_SetTurnaroundTime+0xc0>)
 8002204:	4826      	ldr	r0, [pc, #152]	@ (80022a0 <USB_SetTurnaroundTime+0xc4>)
 8002206:	440a      	add	r2, r1
 8002208:	4282      	cmp	r2, r0
 800220a:	d930      	bls.n	800226e <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800220c:	4825      	ldr	r0, [pc, #148]	@ (80022a4 <USB_SetTurnaroundTime+0xc8>)
 800220e:	f5a1 0274 	sub.w	r2, r1, #15990784	@ 0xf40000
 8002212:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 8002216:	4282      	cmp	r2, r0
 8002218:	d92c      	bls.n	8002274 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800221a:	4823      	ldr	r0, [pc, #140]	@ (80022a8 <USB_SetTurnaroundTime+0xcc>)
 800221c:	f1a1 7283 	sub.w	r2, r1, #17170432	@ 0x1060000
 8002220:	f5a2 42e7 	sub.w	r2, r2, #29568	@ 0x7380
 8002224:	4282      	cmp	r2, r0
 8002226:	d328      	bcc.n	800227a <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002228:	4a20      	ldr	r2, [pc, #128]	@ (80022ac <USB_SetTurnaroundTime+0xd0>)
 800222a:	4821      	ldr	r0, [pc, #132]	@ (80022b0 <USB_SetTurnaroundTime+0xd4>)
 800222c:	440a      	add	r2, r1
 800222e:	4282      	cmp	r2, r0
 8002230:	d926      	bls.n	8002280 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002232:	4a20      	ldr	r2, [pc, #128]	@ (80022b4 <USB_SetTurnaroundTime+0xd8>)
 8002234:	4820      	ldr	r0, [pc, #128]	@ (80022b8 <USB_SetTurnaroundTime+0xdc>)
 8002236:	440a      	add	r2, r1
 8002238:	4282      	cmp	r2, r0
 800223a:	d324      	bcc.n	8002286 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800223c:	4a1f      	ldr	r2, [pc, #124]	@ (80022bc <USB_SetTurnaroundTime+0xe0>)
 800223e:	4820      	ldr	r0, [pc, #128]	@ (80022c0 <USB_SetTurnaroundTime+0xe4>)
 8002240:	440a      	add	r2, r1
 8002242:	4282      	cmp	r2, r0
 8002244:	d3cd      	bcc.n	80021e2 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002246:	481f      	ldr	r0, [pc, #124]	@ (80022c4 <USB_SetTurnaroundTime+0xe8>)
 8002248:	f1a1 72b7 	sub.w	r2, r1, #23986176	@ 0x16e0000
 800224c:	f5a2 5258 	sub.w	r2, r2, #13824	@ 0x3600
 8002250:	4282      	cmp	r2, r0
 8002252:	d31b      	bcc.n	800228c <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002254:	4a1c      	ldr	r2, [pc, #112]	@ (80022c8 <USB_SetTurnaroundTime+0xec>)
 8002256:	481d      	ldr	r0, [pc, #116]	@ (80022cc <USB_SetTurnaroundTime+0xf0>)
 8002258:	440a      	add	r2, r1
 800225a:	4282      	cmp	r2, r0
 800225c:	bf2c      	ite	cs
 800225e:	f44f 51c0 	movcs.w	r1, #6144	@ 0x1800
 8002262:	f44f 51e0 	movcc.w	r1, #7168	@ 0x1c00
 8002266:	e7be      	b.n	80021e6 <USB_SetTurnaroundTime+0xa>
 8002268:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 800226c:	e7bb      	b.n	80021e6 <USB_SetTurnaroundTime+0xa>
 800226e:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8002272:	e7b8      	b.n	80021e6 <USB_SetTurnaroundTime+0xa>
 8002274:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 8002278:	e7b5      	b.n	80021e6 <USB_SetTurnaroundTime+0xa>
 800227a:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800227e:	e7b2      	b.n	80021e6 <USB_SetTurnaroundTime+0xa>
 8002280:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 8002284:	e7af      	b.n	80021e6 <USB_SetTurnaroundTime+0xa>
 8002286:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 800228a:	e7ac      	b.n	80021e6 <USB_SetTurnaroundTime+0xa>
 800228c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002290:	e7a9      	b.n	80021e6 <USB_SetTurnaroundTime+0xa>
 8002292:	bf00      	nop
 8002294:	ff275340 	.word	0xff275340
 8002298:	000c34ff 	.word	0x000c34ff
 800229c:	ff1b1e40 	.word	0xff1b1e40
 80022a0:	000f423f 	.word	0x000f423f
 80022a4:	00124f7f 	.word	0x00124f7f
 80022a8:	0013d620 	.word	0x0013d620
 80022ac:	fee5b660 	.word	0xfee5b660
 80022b0:	0016e35f 	.word	0x0016e35f
 80022b4:	feced300 	.word	0xfeced300
 80022b8:	001b7740 	.word	0x001b7740
 80022bc:	feb35bc0 	.word	0xfeb35bc0
 80022c0:	002191c0 	.word	0x002191c0
 80022c4:	00387520 	.word	0x00387520
 80022c8:	fe5954e0 	.word	0xfe5954e0
 80022cc:	00419ce0 	.word	0x00419ce0

080022d0 <USB_EnableGlobalInt>:
{
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	609a      	str	r2, [r3, #8]
}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop

080022e0 <USB_DisableGlobalInt>:
{
 80022e0:	4603      	mov	r3, r0
}
 80022e2:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	609a      	str	r2, [r3, #8]
}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop

080022f0 <USB_SetCurrentMode>:
{
 80022f0:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80022f2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80022f4:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80022f6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 80022fa:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80022fc:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80022fe:	d018      	beq.n	8002332 <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 8002300:	b9a9      	cbnz	r1, 800232e <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002302:	68c3      	ldr	r3, [r0, #12]
 8002304:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  uint32_t ms = 0U;
 8002308:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800230a:	60c3      	str	r3, [r0, #12]
 800230c:	e001      	b.n	8002312 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800230e:	2cc8      	cmp	r4, #200	@ 0xc8
 8002310:	d00d      	beq.n	800232e <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 8002312:	200a      	movs	r0, #10
 8002314:	f7fe fb28 	bl	8000968 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8002318:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800231a:	07db      	lsls	r3, r3, #31
      ms += 10U;
 800231c:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002320:	d4f5      	bmi.n	800230e <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002322:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8002326:	fab0 f080 	clz	r0, r0
 800232a:	0940      	lsrs	r0, r0, #5
}
 800232c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800232e:	2001      	movs	r0, #1
}
 8002330:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002332:	68c3      	ldr	r3, [r0, #12]
 8002334:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  uint32_t ms = 0U;
 8002338:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800233a:	60c3      	str	r3, [r0, #12]
 800233c:	e001      	b.n	8002342 <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800233e:	2cc8      	cmp	r4, #200	@ 0xc8
 8002340:	d0f5      	beq.n	800232e <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 8002342:	200a      	movs	r0, #10
 8002344:	f7fe fb10 	bl	8000968 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8002348:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800234a:	07da      	lsls	r2, r3, #31
      ms += 10U;
 800234c:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002350:	d5f5      	bpl.n	800233e <USB_SetCurrentMode+0x4e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002352:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8002356:	fab0 f080 	clz	r0, r0
 800235a:	0940      	lsrs	r0, r0, #5
 800235c:	e7e6      	b.n	800232c <USB_SetCurrentMode+0x3c>
 800235e:	bf00      	nop

08002360 <USB_FlushTxFifo>:
{
 8002360:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	e002      	b.n	800236e <USB_FlushTxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002368:	6903      	ldr	r3, [r0, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db09      	blt.n	8002382 <USB_FlushTxFifo+0x22>
    count++;
 800236e:	9b01      	ldr	r3, [sp, #4]
 8002370:	3301      	adds	r3, #1
 8002372:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002374:	9b01      	ldr	r3, [sp, #4]
 8002376:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800237a:	d9f5      	bls.n	8002368 <USB_FlushTxFifo+0x8>
      return HAL_TIMEOUT;
 800237c:	2003      	movs	r0, #3
}
 800237e:	b002      	add	sp, #8
 8002380:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002382:	0189      	lsls	r1, r1, #6
  count = 0U;
 8002384:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002386:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800238a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800238c:	6101      	str	r1, [r0, #16]
 800238e:	e003      	b.n	8002398 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002390:	6903      	ldr	r3, [r0, #16]
 8002392:	f013 0320 	ands.w	r3, r3, #32
 8002396:	d007      	beq.n	80023a8 <USB_FlushTxFifo+0x48>
    count++;
 8002398:	9b01      	ldr	r3, [sp, #4]
 800239a:	3301      	adds	r3, #1
 800239c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800239e:	9b01      	ldr	r3, [sp, #4]
 80023a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80023a4:	d9f4      	bls.n	8002390 <USB_FlushTxFifo+0x30>
 80023a6:	e7e9      	b.n	800237c <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 80023a8:	4618      	mov	r0, r3
}
 80023aa:	b002      	add	sp, #8
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop

080023b0 <USB_FlushRxFifo>:
{
 80023b0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	e002      	b.n	80023be <USB_FlushRxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80023b8:	6903      	ldr	r3, [r0, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db09      	blt.n	80023d2 <USB_FlushRxFifo+0x22>
    count++;
 80023be:	9b01      	ldr	r3, [sp, #4]
 80023c0:	3301      	adds	r3, #1
 80023c2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80023c4:	9b01      	ldr	r3, [sp, #4]
 80023c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80023ca:	d9f5      	bls.n	80023b8 <USB_FlushRxFifo+0x8>
      return HAL_TIMEOUT;
 80023cc:	2003      	movs	r0, #3
}
 80023ce:	b002      	add	sp, #8
 80023d0:	4770      	bx	lr
  count = 0U;
 80023d2:	2200      	movs	r2, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80023d4:	2310      	movs	r3, #16
  count = 0U;
 80023d6:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80023d8:	6103      	str	r3, [r0, #16]
 80023da:	e003      	b.n	80023e4 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80023dc:	6903      	ldr	r3, [r0, #16]
 80023de:	f013 0310 	ands.w	r3, r3, #16
 80023e2:	d007      	beq.n	80023f4 <USB_FlushRxFifo+0x44>
    count++;
 80023e4:	9b01      	ldr	r3, [sp, #4]
 80023e6:	3301      	adds	r3, #1
 80023e8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80023ea:	9b01      	ldr	r3, [sp, #4]
 80023ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80023f0:	d9f4      	bls.n	80023dc <USB_FlushRxFifo+0x2c>
 80023f2:	e7eb      	b.n	80023cc <USB_FlushRxFifo+0x1c>
  return HAL_OK;
 80023f4:	4618      	mov	r0, r3
}
 80023f6:	b002      	add	sp, #8
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop

080023fc <USB_DevInit>:
{
 80023fc:	b084      	sub	sp, #16
 80023fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002400:	ac07      	add	r4, sp, #28
 8002402:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002406:	2300      	movs	r3, #0
 8002408:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800240c:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
{
 8002410:	4604      	mov	r4, r0
    USBx->DIEPTXF[i] = 0U;
 8002412:	4619      	mov	r1, r3
 8002414:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002418:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800241c:	3301      	adds	r3, #1
 800241e:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002420:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002422:	d1f7      	bne.n	8002414 <USB_DevInit+0x18>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002424:	f504 6700 	add.w	r7, r4, #2048	@ 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8002428:	2e00      	cmp	r6, #0
 800242a:	f040 809f 	bne.w	800256c <USB_DevInit+0x170>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	607b      	str	r3, [r7, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002436:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002438:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800243c:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800243e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002440:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002444:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002446:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002448:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800244c:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002454:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8002458:	2b01      	cmp	r3, #1
 800245a:	f000 8097 	beq.w	800258c <USB_DevInit+0x190>
  USBx_DEVICE->DCFG |= speed;
 800245e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
 8002462:	f043 0303 	orr.w	r3, r3, #3
 8002466:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800246a:	2110      	movs	r1, #16
 800246c:	4620      	mov	r0, r4
 800246e:	f7ff ff77 	bl	8002360 <USB_FlushTxFifo>
 8002472:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002474:	4620      	mov	r0, r4
 8002476:	f7ff ff9b 	bl	80023b0 <USB_FlushRxFifo>
 800247a:	ea41 0e00 	orr.w	lr, r1, r0
 800247e:	fa5f fe8e 	uxtb.w	lr, lr
  USBx_DEVICE->DIEPMSK = 0U;
 8002482:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002484:	f1be 0e00 	subs.w	lr, lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8002488:	613a      	str	r2, [r7, #16]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800248a:	bf18      	it	ne
 800248c:	f04f 0e01 	movne.w	lr, #1
  USBx_DEVICE->DOEPMSK = 0U;
 8002490:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002492:	61fa      	str	r2, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002494:	b305      	cbz	r5, 80024d8 <USB_DevInit+0xdc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002496:	f8d4 1900 	ldr.w	r1, [r4, #2304]	@ 0x900
 800249a:	2900      	cmp	r1, #0
 800249c:	f504 6310 	add.w	r3, r4, #2304	@ 0x900
 80024a0:	db15      	blt.n	80024ce <USB_DevInit+0xd2>
      USBx_INEP(i)->DIEPCTL = 0U;
 80024a2:	2100      	movs	r1, #0
 80024a4:	6019      	str	r1, [r3, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80024a6:	2000      	movs	r0, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80024a8:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80024ac:	3201      	adds	r2, #1
 80024ae:	42aa      	cmp	r2, r5
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80024b0:	6118      	str	r0, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80024b2:	6099      	str	r1, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80024b4:	f103 0320 	add.w	r3, r3, #32
 80024b8:	d036      	beq.n	8002528 <USB_DevInit+0x12c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80024ba:	f8d3 c000 	ldr.w	ip, [r3]
 80024be:	f1bc 0f00 	cmp.w	ip, #0
 80024c2:	daee      	bge.n	80024a2 <USB_DevInit+0xa6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80024c4:	f04f 4c90 	mov.w	ip, #1207959552	@ 0x48000000
 80024c8:	f8c3 c000 	str.w	ip, [r3]
 80024cc:	e7ee      	b.n	80024ac <USB_DevInit+0xb0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80024ce:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80024d2:	f8c4 1900 	str.w	r1, [r4, #2304]	@ 0x900
 80024d6:	e7e6      	b.n	80024a6 <USB_DevInit+0xaa>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024de:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 80024e0:	2200      	movs	r2, #0
  if (cfg.dma_enable == 0U)
 80024e2:	f89d 301e 	ldrb.w	r3, [sp, #30]
  USBx->GINTMSK = 0U;
 80024e6:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80024e8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80024ec:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 80024ee:	b91b      	cbnz	r3, 80024f8 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80024f0:	69a3      	ldr	r3, [r4, #24]
 80024f2:	f043 0310 	orr.w	r3, r3, #16
 80024f6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80024f8:	69a2      	ldr	r2, [r4, #24]
 80024fa:	4b2c      	ldr	r3, [pc, #176]	@ (80025ac <USB_DevInit+0x1b0>)
 80024fc:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 80024fe:	f89d 2022 	ldrb.w	r2, [sp, #34]	@ 0x22
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002502:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002504:	b11a      	cbz	r2, 800250e <USB_DevInit+0x112>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002506:	69a3      	ldr	r3, [r4, #24]
 8002508:	f043 0308 	orr.w	r3, r3, #8
 800250c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800250e:	2e01      	cmp	r6, #1
 8002510:	d105      	bne.n	800251e <USB_DevInit+0x122>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002512:	69a3      	ldr	r3, [r4, #24]
 8002514:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	61a3      	str	r3, [r4, #24]
}
 800251e:	4670      	mov	r0, lr
 8002520:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002524:	b004      	add	sp, #16
 8002526:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002528:	f8d4 2b00 	ldr.w	r2, [r4, #2816]	@ 0xb00
 800252c:	2a00      	cmp	r2, #0
 800252e:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
 8002532:	db15      	blt.n	8002560 <USB_DevInit+0x164>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002534:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002536:	2100      	movs	r1, #0
 8002538:	6019      	str	r1, [r3, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800253a:	f04f 0c00 	mov.w	ip, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800253e:	f64f 307f 	movw	r0, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002542:	3201      	adds	r2, #1
 8002544:	42aa      	cmp	r2, r5
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002546:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800254a:	6098      	str	r0, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800254c:	f103 0320 	add.w	r3, r3, #32
 8002550:	d0c2      	beq.n	80024d8 <USB_DevInit+0xdc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002552:	6819      	ldr	r1, [r3, #0]
 8002554:	2900      	cmp	r1, #0
 8002556:	daee      	bge.n	8002536 <USB_DevInit+0x13a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002558:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 800255c:	6019      	str	r1, [r3, #0]
 800255e:	e7f0      	b.n	8002542 <USB_DevInit+0x146>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002560:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002564:	f8c4 2b00 	str.w	r2, [r4, #2816]	@ 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002568:	2200      	movs	r2, #0
 800256a:	e7e6      	b.n	800253a <USB_DevInit+0x13e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800256c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800256e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002572:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002574:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002576:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800257a:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002582:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8002586:	2b01      	cmp	r3, #1
 8002588:	f47f af69 	bne.w	800245e <USB_DevInit+0x62>
    if (cfg.speed == USBD_HS_SPEED)
 800258c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8002590:	b923      	cbnz	r3, 800259c <USB_DevInit+0x1a0>
  USBx_DEVICE->DCFG |= speed;
 8002592:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
 8002596:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  return HAL_OK;
 800259a:	e766      	b.n	800246a <USB_DevInit+0x6e>
  USBx_DEVICE->DCFG |= speed;
 800259c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  return HAL_OK;
 80025a8:	e75f      	b.n	800246a <USB_DevInit+0x6e>
 80025aa:	bf00      	nop
 80025ac:	803c3800 	.word	0x803c3800

080025b0 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80025b0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80025b4:	f013 0006 	ands.w	r0, r3, #6
 80025b8:	d004      	beq.n	80025c4 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 80025ba:	f013 0f02 	tst.w	r3, #2
 80025be:	bf14      	ite	ne
 80025c0:	2002      	movne	r0, #2
 80025c2:	200f      	moveq	r0, #15
}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop

080025c8 <USB_ActivateEndpoint>:
{
 80025c8:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80025ca:	780a      	ldrb	r2, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80025cc:	2301      	movs	r3, #1
 80025ce:	f002 0e0f 	and.w	lr, r2, #15
 80025d2:	fa03 f30e 	lsl.w	r3, r3, lr
  if (ep->is_in == 1U)
 80025d6:	f891 e001 	ldrb.w	lr, [r1, #1]
 80025da:	f1be 0f01 	cmp.w	lr, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80025de:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80025e2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  if (ep->is_in == 1U)
 80025e6:	d01a      	beq.n	800261e <USB_ActivateEndpoint+0x56>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80025e8:	f8dc 201c 	ldr.w	r2, [ip, #28]
 80025ec:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80025f0:	f8cc 301c 	str.w	r3, [ip, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80025f4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	d40e      	bmi.n	800261a <USB_ActivateEndpoint+0x52>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80025fc:	688b      	ldr	r3, [r1, #8]
 80025fe:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
                                    ((uint32_t)ep->type << 18) |
 8002602:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002604:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002608:	4323      	orrs	r3, r4
 800260a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002616:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800261a:	2000      	movs	r0, #0
 800261c:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800261e:	f8dc 401c 	ldr.w	r4, [ip, #28]
 8002622:	4323      	orrs	r3, r4
 8002624:	f8cc 301c 	str.w	r3, [ip, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002628:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800262c:	041c      	lsls	r4, r3, #16
 800262e:	d4f4      	bmi.n	800261a <USB_ActivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002630:	688b      	ldr	r3, [r1, #8]
 8002632:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002636:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263c:	4323      	orrs	r3, r4
 800263e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002642:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800264a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800264e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8002652:	2000      	movs	r0, #0
 8002654:	bd10      	pop	{r4, pc}
 8002656:	bf00      	nop

08002658 <USB_DeactivateEndpoint>:
{
 8002658:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 800265a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800265c:	7849      	ldrb	r1, [r1, #1]
 800265e:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002660:	eb00 1342 	add.w	r3, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8002664:	d02c      	beq.n	80026c0 <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002666:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800266a:	2900      	cmp	r1, #0
 800266c:	db1b      	blt.n	80026a6 <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800266e:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8002672:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002676:	f002 020f 	and.w	r2, r2, #15
 800267a:	fa01 f202 	lsl.w	r2, r1, r2
 800267e:	ea24 0402 	bic.w	r4, r4, r2
 8002682:	f8c0 483c 	str.w	r4, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002686:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800268a:	4922      	ldr	r1, [pc, #136]	@ (8002714 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800268c:	ea24 0202 	bic.w	r2, r4, r2
 8002690:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002694:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
}
 8002698:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800269c:	4011      	ands	r1, r2
}
 800269e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80026a0:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
}
 80026a4:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026a6:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80026aa:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 80026ae:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80026b2:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80026b6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80026ba:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
 80026be:	e7d6      	b.n	800266e <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80026c0:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80026c4:	2900      	cmp	r1, #0
 80026c6:	da0b      	bge.n	80026e0 <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80026c8:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80026cc:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 80026d0:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80026d4:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80026d8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80026dc:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80026e0:	f8d0 183c 	ldr.w	r1, [r0, #2108]	@ 0x83c
 80026e4:	f002 040f 	and.w	r4, r2, #15
 80026e8:	2201      	movs	r2, #1
 80026ea:	40a2      	lsls	r2, r4
 80026ec:	ea21 0102 	bic.w	r1, r1, r2
 80026f0:	f8c0 183c 	str.w	r1, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80026f4:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80026f8:	4907      	ldr	r1, [pc, #28]	@ (8002718 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80026fa:	ea24 0202 	bic.w	r2, r4, r2
 80026fe:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002702:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
}
 8002706:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800270a:	4011      	ands	r1, r2
}
 800270c:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800270e:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
}
 8002712:	4770      	bx	lr
 8002714:	eff37800 	.word	0xeff37800
 8002718:	ec337800 	.word	0xec337800

0800271c <USB_EPStartXfer>:
{
 800271c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 8002720:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002722:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 8002724:	690d      	ldr	r5, [r1, #16]
        if (ep->type == EP_TYPE_ISOC)
 8002726:	f891 e004 	ldrb.w	lr, [r1, #4]
  if (ep->is_in == 1U)
 800272a:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800272c:	eb00 1346 	add.w	r3, r0, r6, lsl #5
  if (ep->is_in == 1U)
 8002730:	d05d      	beq.n	80027ee <USB_EPStartXfer+0xd2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002732:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	@ 0xb10
 8002736:	0ce4      	lsrs	r4, r4, #19
 8002738:	04e4      	lsls	r4, r4, #19
 800273a:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800273e:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	@ 0xb10
 8002742:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 8002746:	f424 14c0 	bic.w	r4, r4, #1572864	@ 0x180000
 800274a:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800274e:	f503 6c30 	add.w	ip, r3, #2816	@ 0xb00
        ep->xfer_len = ep->maxpacket;
 8002752:	688c      	ldr	r4, [r1, #8]
    if (epnum == 0U)
 8002754:	bb56      	cbnz	r6, 80027ac <USB_EPStartXfer+0x90>
      if (ep->xfer_len > 0U)
 8002756:	b105      	cbz	r5, 800275a <USB_EPStartXfer+0x3e>
        ep->xfer_len = ep->maxpacket;
 8002758:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 800275a:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800275c:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8002760:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002764:	432c      	orrs	r4, r5
 8002766:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800276a:	f8dc 4010 	ldr.w	r4, [ip, #16]
    if (dma == 1U)
 800276e:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002770:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8002774:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8002778:	d033      	beq.n	80027e2 <USB_EPStartXfer+0xc6>
    if (ep->type == EP_TYPE_ISOC)
 800277a:	f1be 0f01 	cmp.w	lr, #1
 800277e:	d10c      	bne.n	800279a <USB_EPStartXfer+0x7e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002780:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 8002784:	f412 7f80 	tst.w	r2, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002788:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800278c:	bf0c      	ite	eq
 800278e:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002792:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 8002796:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800279a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800279e:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 80027a2:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 80027a6:	2000      	movs	r0, #0
 80027a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (ep->xfer_len == 0U)
 80027ac:	2d00      	cmp	r5, #0
 80027ae:	d0d5      	beq.n	800275c <USB_EPStartXfer+0x40>
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80027b0:	4e63      	ldr	r6, [pc, #396]	@ (8002940 <USB_EPStartXfer+0x224>)
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80027b2:	4425      	add	r5, r4
 80027b4:	3d01      	subs	r5, #1
 80027b6:	fbb5 f5f4 	udiv	r5, r5, r4
 80027ba:	b2ad      	uxth	r5, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 80027bc:	fb05 f404 	mul.w	r4, r5, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80027c0:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 80027c4:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80027c8:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80027ca:	4335      	orrs	r5, r6
 80027cc:	f8cc 5010 	str.w	r5, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80027d0:	f8dc 5010 	ldr.w	r5, [ip, #16]
 80027d4:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80027d8:	432c      	orrs	r4, r5
    if (dma == 1U)
 80027da:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80027dc:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 80027e0:	d1cb      	bne.n	800277a <USB_EPStartXfer+0x5e>
      if ((uint32_t)ep->xfer_buff != 0U)
 80027e2:	68ca      	ldr	r2, [r1, #12]
 80027e4:	2a00      	cmp	r2, #0
 80027e6:	d0c8      	beq.n	800277a <USB_EPStartXfer+0x5e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80027e8:	f8cc 2014 	str.w	r2, [ip, #20]
 80027ec:	e7c5      	b.n	800277a <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80027ee:	f503 6410 	add.w	r4, r3, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 80027f2:	2d00      	cmp	r5, #0
 80027f4:	d033      	beq.n	800285e <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80027f6:	6927      	ldr	r7, [r4, #16]
        if (ep->xfer_len > ep->maxpacket)
 80027f8:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80027fc:	0cff      	lsrs	r7, r7, #19
 80027fe:	04ff      	lsls	r7, r7, #19
 8002800:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002802:	6927      	ldr	r7, [r4, #16]
 8002804:	f027 57ff 	bic.w	r7, r7, #534773760	@ 0x1fe00000
 8002808:	f427 17c0 	bic.w	r7, r7, #1572864	@ 0x180000
 800280c:	6127      	str	r7, [r4, #16]
      if (epnum == 0U)
 800280e:	2e00      	cmp	r6, #0
 8002810:	d151      	bne.n	80028b6 <USB_EPStartXfer+0x19a>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002812:	6927      	ldr	r7, [r4, #16]
        if (ep->xfer_len > ep->maxpacket)
 8002814:	454d      	cmp	r5, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002816:	f447 2700 	orr.w	r7, r7, #524288	@ 0x80000
          ep->xfer_len = ep->maxpacket;
 800281a:	bf84      	itt	hi
 800281c:	f8c1 9010 	strhi.w	r9, [r1, #16]
 8002820:	464d      	movhi	r5, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002822:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002824:	6927      	ldr	r7, [r4, #16]
 8002826:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800282a:	433d      	orrs	r5, r7
    if (dma == 1U)
 800282c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800282e:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8002830:	d025      	beq.n	800287e <USB_EPStartXfer+0x162>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002832:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002836:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800283a:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 800283e:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        if (ep->xfer_len > 0U)
 8002842:	690c      	ldr	r4, [r1, #16]
      if (ep->type != EP_TYPE_ISOC)
 8002844:	d059      	beq.n	80028fa <USB_EPStartXfer+0x1de>
        if (ep->xfer_len > 0U)
 8002846:	2c00      	cmp	r4, #0
 8002848:	d0ad      	beq.n	80027a6 <USB_EPStartXfer+0x8a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800284a:	f8d0 2834 	ldr.w	r2, [r0, #2100]	@ 0x834
 800284e:	f006 060f 	and.w	r6, r6, #15
 8002852:	2301      	movs	r3, #1
 8002854:	40b3      	lsls	r3, r6
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 800285c:	e7a3      	b.n	80027a6 <USB_EPStartXfer+0x8a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800285e:	6925      	ldr	r5, [r4, #16]
 8002860:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8002864:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8002868:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800286a:	6925      	ldr	r5, [r4, #16]
 800286c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8002870:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002872:	6925      	ldr	r5, [r4, #16]
 8002874:	0ced      	lsrs	r5, r5, #19
 8002876:	04ed      	lsls	r5, r5, #19
    if (dma == 1U)
 8002878:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800287a:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800287c:	d1d9      	bne.n	8002832 <USB_EPStartXfer+0x116>
      if ((uint32_t)ep->dma_addr != 0U)
 800287e:	69ca      	ldr	r2, [r1, #28]
 8002880:	b102      	cbz	r2, 8002884 <USB_EPStartXfer+0x168>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002882:	6162      	str	r2, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8002884:	f1be 0f01 	cmp.w	lr, #1
 8002888:	d10c      	bne.n	80028a4 <USB_EPStartXfer+0x188>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800288a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 800288e:	f412 7f80 	tst.w	r2, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002892:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002896:	bf0c      	ite	eq
 8002898:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800289c:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 80028a0:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80028a4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80028a8:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 80028ac:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
 80028b0:	2000      	movs	r0, #0
 80028b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80028b6:	f8df c088 	ldr.w	ip, [pc, #136]	@ 8002940 <USB_EPStartXfer+0x224>
 80028ba:	f8d4 8010 	ldr.w	r8, [r4, #16]
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80028be:	eb05 0709 	add.w	r7, r5, r9
 80028c2:	3f01      	subs	r7, #1
 80028c4:	fbb7 f7f9 	udiv	r7, r7, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80028c8:	ea0c 4cc7 	and.w	ip, ip, r7, lsl #19
 80028cc:	ea4c 0c08 	orr.w	ip, ip, r8
        if (ep->type == EP_TYPE_ISOC)
 80028d0:	f1be 0f01 	cmp.w	lr, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80028d4:	f8c4 c010 	str.w	ip, [r4, #16]
        if (ep->type == EP_TYPE_ISOC)
 80028d8:	b2bf      	uxth	r7, r7
 80028da:	d1a3      	bne.n	8002824 <USB_EPStartXfer+0x108>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80028dc:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80028e0:	f02c 4cc0 	bic.w	ip, ip, #1610612736	@ 0x60000000
 80028e4:	f8c4 c010 	str.w	ip, [r4, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80028e8:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80028ec:	077f      	lsls	r7, r7, #29
 80028ee:	f007 47c0 	and.w	r7, r7, #1610612736	@ 0x60000000
 80028f2:	ea47 070c 	orr.w	r7, r7, ip
 80028f6:	6127      	str	r7, [r4, #16]
 80028f8:	e794      	b.n	8002824 <USB_EPStartXfer+0x108>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80028fa:	f8d0 5808 	ldr.w	r5, [r0, #2056]	@ 0x808
 80028fe:	f415 7f80 	tst.w	r5, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002902:	f8d3 5900 	ldr.w	r5, [r3, #2304]	@ 0x900
 8002906:	bf0c      	ite	eq
 8002908:	f045 5500 	orreq.w	r5, r5, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800290c:	f045 5580 	orrne.w	r5, r5, #268435456	@ 0x10000000
 8002910:	f8c3 5900 	str.w	r5, [r3, #2304]	@ 0x900
  if (dma == 0U)
 8002914:	2a00      	cmp	r2, #0
 8002916:	f47f af46 	bne.w	80027a6 <USB_EPStartXfer+0x8a>
    count32b = ((uint32_t)len + 3U) / 4U;
 800291a:	b2a3      	uxth	r3, r4
 800291c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	f43f af41 	beq.w	80027a6 <USB_EPStartXfer+0x8a>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002924:	68ca      	ldr	r2, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002926:	eb00 3606 	add.w	r6, r0, r6, lsl #12
 800292a:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800292e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002932:	f852 1b04 	ldr.w	r1, [r2], #4
 8002936:	6031      	str	r1, [r6, #0]
    for (i = 0U; i < count32b; i++)
 8002938:	4293      	cmp	r3, r2
 800293a:	d1fa      	bne.n	8002932 <USB_EPStartXfer+0x216>
 800293c:	e733      	b.n	80027a6 <USB_EPStartXfer+0x8a>
 800293e:	bf00      	nop
 8002940:	1ff80000 	.word	0x1ff80000

08002944 <USB_EPStopXfer>:
{
 8002944:	b410      	push	{r4}
  if (ep->is_in == 1U)
 8002946:	784a      	ldrb	r2, [r1, #1]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002948:	780b      	ldrb	r3, [r1, #0]
{
 800294a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800294c:	2100      	movs	r1, #0
  if (ep->is_in == 1U)
 800294e:	2a01      	cmp	r2, #1
  __IO uint32_t count = 0U;
 8002950:	9101      	str	r1, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002952:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 8002956:	d023      	beq.n	80029a0 <USB_EPStopXfer+0x5c>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002958:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 800295c:	18c2      	adds	r2, r0, r3
 800295e:	58c1      	ldr	r1, [r0, r3]
 8002960:	2900      	cmp	r1, #0
 8002962:	db04      	blt.n	800296e <USB_EPStopXfer+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;
 8002964:	2000      	movs	r0, #0
}
 8002966:	b003      	add	sp, #12
 8002968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800296c:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800296e:	58c4      	ldr	r4, [r0, r3]
 8002970:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8002974:	50c4      	str	r4, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8002976:	58c4      	ldr	r4, [r0, r3]
 8002978:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 800297c:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 800297e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002982:	e002      	b.n	800298a <USB_EPStopXfer+0x46>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8002984:	6813      	ldr	r3, [r2, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	daec      	bge.n	8002964 <USB_EPStopXfer+0x20>
        count++;
 800298a:	9b01      	ldr	r3, [sp, #4]
 800298c:	3301      	adds	r3, #1
 800298e:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8002990:	9b01      	ldr	r3, [sp, #4]
 8002992:	428b      	cmp	r3, r1
 8002994:	d9f6      	bls.n	8002984 <USB_EPStopXfer+0x40>
          ret = HAL_ERROR;
 8002996:	2001      	movs	r0, #1
}
 8002998:	b003      	add	sp, #12
 800299a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800299e:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80029a0:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 80029a4:	18c2      	adds	r2, r0, r3
 80029a6:	58c1      	ldr	r1, [r0, r3]
 80029a8:	2900      	cmp	r1, #0
 80029aa:	dadb      	bge.n	8002964 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80029ac:	58c4      	ldr	r4, [r0, r3]
 80029ae:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 80029b2:	50c4      	str	r4, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80029b4:	58c4      	ldr	r4, [r0, r3]
 80029b6:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 80029ba:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 80029bc:	f242 7110 	movw	r1, #10000	@ 0x2710
 80029c0:	e002      	b.n	80029c8 <USB_EPStopXfer+0x84>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80029c2:	6813      	ldr	r3, [r2, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	dacd      	bge.n	8002964 <USB_EPStopXfer+0x20>
        count++;
 80029c8:	9b01      	ldr	r3, [sp, #4]
 80029ca:	3301      	adds	r3, #1
 80029cc:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80029ce:	9b01      	ldr	r3, [sp, #4]
 80029d0:	428b      	cmp	r3, r1
 80029d2:	d9f6      	bls.n	80029c2 <USB_EPStopXfer+0x7e>
 80029d4:	e7df      	b.n	8002996 <USB_EPStopXfer+0x52>
 80029d6:	bf00      	nop

080029d8 <USB_WritePacket>:
{
 80029d8:	b410      	push	{r4}
 80029da:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 80029de:	b964      	cbnz	r4, 80029fa <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 80029e0:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	d009      	beq.n	80029fa <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80029e6:	3201      	adds	r2, #1
 80029e8:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80029ec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80029f0:	f851 2b04 	ldr.w	r2, [r1], #4
 80029f4:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80029f6:	428b      	cmp	r3, r1
 80029f8:	d1fa      	bne.n	80029f0 <USB_WritePacket+0x18>
}
 80029fa:	2000      	movs	r0, #0
 80029fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop

08002a04 <USB_ReadPacket>:
{
 8002a04:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 8002a06:	ea5f 0e92 	movs.w	lr, r2, lsr #2
{
 8002a0a:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8002a0c:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8002a10:	d01a      	beq.n	8002a48 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002a12:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
  uint8_t *pDest = dest;
 8002a16:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002a1c:	6822      	ldr	r2, [r4, #0]
 8002a1e:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 8002a22:	459e      	cmp	lr, r3
 8002a24:	d1f9      	bne.n	8002a1a <USB_ReadPacket+0x16>
    pDest++;
 8002a26:	eb01 008e 	add.w	r0, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 8002a2a:	b166      	cbz	r6, 8002a46 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002a2c:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
 8002a30:	4406      	add	r6, r0
 8002a32:	6829      	ldr	r1, [r5, #0]
 8002a34:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002a36:	fa21 f203 	lsr.w	r2, r1, r3
 8002a3a:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 8002a3e:	42b0      	cmp	r0, r6
 8002a40:	f103 0308 	add.w	r3, r3, #8
 8002a44:	d1f7      	bne.n	8002a36 <USB_ReadPacket+0x32>
}
 8002a46:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8002a48:	4608      	mov	r0, r1
 8002a4a:	e7ee      	b.n	8002a2a <USB_ReadPacket+0x26>

08002a4c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8002a4c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002a4e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002a50:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002a52:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8002a56:	d00c      	beq.n	8002a72 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002a58:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8002a5c:	2a00      	cmp	r2, #0
 8002a5e:	db00      	blt.n	8002a62 <USB_EPSetStall+0x16>
 8002a60:	b9d3      	cbnz	r3, 8002a98 <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002a62:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002a66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a6a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8002a6e:	2000      	movs	r0, #0
 8002a70:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002a72:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8002a76:	2a00      	cmp	r2, #0
 8002a78:	db06      	blt.n	8002a88 <USB_EPSetStall+0x3c>
 8002a7a:	b12b      	cbz	r3, 8002a88 <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002a7c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002a80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a84:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002a88:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002a8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a90:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8002a94:	2000      	movs	r0, #0
 8002a96:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002a98:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002a9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002aa0:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8002aa4:	e7dd      	b.n	8002a62 <USB_EPSetStall+0x16>
 8002aa6:	bf00      	nop

08002aa8 <USB_EPClearStall>:
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002aa8:	790b      	ldrb	r3, [r1, #4]
  if (ep->is_in == 1U)
 8002aaa:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002aac:	f891 c000 	ldrb.w	ip, [r1]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002ab0:	3b02      	subs	r3, #2
  if (ep->is_in == 1U)
 8002ab2:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ab4:	eb00 104c 	add.w	r0, r0, ip, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002ab8:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 8002aba:	d011      	beq.n	8002ae0 <USB_EPClearStall+0x38>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002abc:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002ac0:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ac2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002ac6:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002aca:	d901      	bls.n	8002ad0 <USB_EPClearStall+0x28>
}
 8002acc:	2000      	movs	r0, #0
 8002ace:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002ad0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8002adc:	2000      	movs	r0, #0
 8002ade:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ae0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002ae4:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ae6:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002aea:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002aee:	d8ed      	bhi.n	8002acc <USB_EPClearStall+0x24>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002af0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8002afc:	2000      	movs	r0, #0
 8002afe:	4770      	bx	lr

08002b00 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002b00:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002b04:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b08:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002b0c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002b10:	0109      	lsls	r1, r1, #4
 8002b12:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8002b16:	4319      	orrs	r1, r3
 8002b18:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	4770      	bx	lr

08002b20 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002b20:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 8002b24:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002b26:	f022 0203 	bic.w	r2, r2, #3
 8002b2a:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002b2e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002b32:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8002b36:	f023 0302 	bic.w	r3, r3, #2
}
 8002b3a:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002b3c:	604b      	str	r3, [r1, #4]
}
 8002b3e:	4770      	bx	lr

08002b40 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002b40:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 8002b44:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002b46:	f022 0203 	bic.w	r2, r2, #3
 8002b4a:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002b4e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002b52:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8002b56:	f043 0302 	orr.w	r3, r3, #2
}
 8002b5a:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002b5c:	604b      	str	r3, [r1, #4]
}
 8002b5e:	4770      	bx	lr

08002b60 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002b60:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002b62:	6980      	ldr	r0, [r0, #24]
}
 8002b64:	4010      	ands	r0, r2
 8002b66:	4770      	bx	lr

08002b68 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002b68:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8002b6c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002b70:	69c0      	ldr	r0, [r0, #28]
 8002b72:	4018      	ands	r0, r3
}
 8002b74:	0c00      	lsrs	r0, r0, #16
 8002b76:	4770      	bx	lr

08002b78 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002b78:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8002b7c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002b80:	69c0      	ldr	r0, [r0, #28]
 8002b82:	4018      	ands	r0, r3
}
 8002b84:	b280      	uxth	r0, r0
 8002b86:	4770      	bx	lr

08002b88 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002b88:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002b8c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002b90:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002b94:	6940      	ldr	r0, [r0, #20]
}
 8002b96:	4010      	ands	r0, r2
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop

08002b9c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8002b9c:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002ba0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002ba4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002ba8:	f001 010f 	and.w	r1, r1, #15
 8002bac:	40cb      	lsrs	r3, r1
 8002bae:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002bb0:	f8d0 0908 	ldr.w	r0, [r0, #2312]	@ 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	4313      	orrs	r3, r2
}
 8002bb8:	4018      	ands	r0, r3
 8002bba:	4770      	bx	lr

08002bbc <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002bbc:	6940      	ldr	r0, [r0, #20]
}
 8002bbe:	f000 0001 	and.w	r0, r0, #1
 8002bc2:	4770      	bx	lr

08002bc4 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002bc4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
{
 8002bc8:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002bca:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8002bce:	f022 0207 	bic.w	r2, r2, #7
 8002bd2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002bd6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002bda:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8002bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
}
 8002be2:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002be4:	604b      	str	r3, [r1, #4]
}
 8002be6:	4770      	bx	lr

08002be8 <USB_EP0_OutStart>:
{
 8002be8:	b430      	push	{r4, r5}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002bea:	6c05      	ldr	r5, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002bec:	4c11      	ldr	r4, [pc, #68]	@ (8002c34 <USB_EP0_OutStart+0x4c>)
 8002bee:	42a5      	cmp	r5, r4
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002bf0:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002bf4:	d903      	bls.n	8002bfe <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002bf6:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 8002bfa:	2c00      	cmp	r4, #0
 8002bfc:	db16      	blt.n	8002c2c <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002bfe:	2400      	movs	r4, #0
 8002c00:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002c02:	691c      	ldr	r4, [r3, #16]
 8002c04:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8002c08:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002c0a:	691c      	ldr	r4, [r3, #16]
 8002c0c:	f044 0418 	orr.w	r4, r4, #24
 8002c10:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002c12:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 8002c14:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002c16:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8002c1a:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8002c1c:	d106      	bne.n	8002c2c <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002c1e:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002c20:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002c24:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8002c28:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	bc30      	pop	{r4, r5}
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	4f54300a 	.word	0x4f54300a

08002c38 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8002c38:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8002c3c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 8002c40:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8002c42:	f8d0 42c0 	ldr.w	r4, [r0, #704]	@ 0x2c0

  if (hcdc == NULL)
 8002c46:	b184      	cbz	r4, 8002c6a <USBD_CDC_EP0_RxReady+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002c48:	f8d0 32c4 	ldr.w	r3, [r0, #708]	@ 0x2c4
 8002c4c:	b15b      	cbz	r3, 8002c66 <USBD_CDC_EP0_RxReady+0x2e>
 8002c4e:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8002c52:	28ff      	cmp	r0, #255	@ 0xff
 8002c54:	d007      	beq.n	8002c66 <USBD_CDC_EP0_RxReady+0x2e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8002c60:	23ff      	movs	r3, #255	@ 0xff
 8002c62:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8002c66:	2000      	movs	r0, #0
}
 8002c68:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8002c6a:	2003      	movs	r0, #3
}
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	bf00      	nop

08002c70 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8002c70:	230a      	movs	r3, #10
 8002c72:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8002c74:	4800      	ldr	r0, [pc, #0]	@ (8002c78 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002c76:	4770      	bx	lr
 8002c78:	20000088 	.word	0x20000088

08002c7c <USBD_CDC_GetFSCfgDesc>:
{
 8002c7c:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8002c7e:	2182      	movs	r1, #130	@ 0x82
{
 8002c80:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8002c82:	480f      	ldr	r0, [pc, #60]	@ (8002cc0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8002c84:	f000 fbb2 	bl	80033ec <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8002c88:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8002c8a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8002c8c:	480c      	ldr	r0, [pc, #48]	@ (8002cc0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8002c8e:	f000 fbad 	bl	80033ec <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8002c92:	2181      	movs	r1, #129	@ 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8002c94:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8002c96:	480a      	ldr	r0, [pc, #40]	@ (8002cc0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8002c98:	f000 fba8 	bl	80033ec <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8002c9c:	b10d      	cbz	r5, 8002ca2 <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8002ca2:	b11c      	cbz	r4, 8002cac <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2140      	movs	r1, #64	@ 0x40
 8002ca8:	7121      	strb	r1, [r4, #4]
 8002caa:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8002cac:	b118      	cbz	r0, 8002cb6 <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2140      	movs	r1, #64	@ 0x40
 8002cb2:	7101      	strb	r1, [r0, #4]
 8002cb4:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8002cb6:	2343      	movs	r3, #67	@ 0x43
}
 8002cb8:	4801      	ldr	r0, [pc, #4]	@ (8002cc0 <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8002cba:	8033      	strh	r3, [r6, #0]
}
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000000c 	.word	0x2000000c

08002cc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
 8002cc4:	f7ff bfda 	b.w	8002c7c <USBD_CDC_GetFSCfgDesc>

08002cc8 <USBD_CDC_GetHSCfgDesc>:
{
 8002cc8:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8002cca:	2182      	movs	r1, #130	@ 0x82
{
 8002ccc:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8002cce:	480f      	ldr	r0, [pc, #60]	@ (8002d0c <USBD_CDC_GetHSCfgDesc+0x44>)
 8002cd0:	f000 fb8c 	bl	80033ec <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8002cd4:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8002cd6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8002cd8:	480c      	ldr	r0, [pc, #48]	@ (8002d0c <USBD_CDC_GetHSCfgDesc+0x44>)
 8002cda:	f000 fb87 	bl	80033ec <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8002cde:	2181      	movs	r1, #129	@ 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8002ce0:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8002ce2:	480a      	ldr	r0, [pc, #40]	@ (8002d0c <USBD_CDC_GetHSCfgDesc+0x44>)
 8002ce4:	f000 fb82 	bl	80033ec <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8002ce8:	b10d      	cbz	r5, 8002cee <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8002cea:	2210      	movs	r2, #16
 8002cec:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8002cee:	b11c      	cbz	r4, 8002cf8 <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	7121      	strb	r1, [r4, #4]
 8002cf6:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8002cf8:	b118      	cbz	r0, 8002d02 <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	7101      	strb	r1, [r0, #4]
 8002d00:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8002d02:	2343      	movs	r3, #67	@ 0x43
}
 8002d04:	4801      	ldr	r0, [pc, #4]	@ (8002d0c <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8002d06:	8033      	strh	r3, [r6, #0]
}
 8002d08:	bd70      	pop	{r4, r5, r6, pc}
 8002d0a:	bf00      	nop
 8002d0c:	2000000c 	.word	0x2000000c

08002d10 <USBD_CDC_DataOut>:
{
 8002d10:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8002d12:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8002d16:	33b0      	adds	r3, #176	@ 0xb0
 8002d18:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8002d1c:	b195      	cbz	r5, 8002d44 <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002d1e:	4604      	mov	r4, r0
 8002d20:	f002 fed0 	bl	8005ac4 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002d24:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002d28:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002d2c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8002d30:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8002d34:	f8d4 32c4 	ldr.w	r3, [r4, #708]	@ 0x2c4
 8002d38:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8002d40:	2000      	movs	r0, #0
}
 8002d42:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8002d44:	2003      	movs	r0, #3
}
 8002d46:	bd38      	pop	{r3, r4, r5, pc}

08002d48 <USBD_CDC_DataIn>:
{
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	f8d0 42d4 	ldr.w	r4, [r0, #724]	@ 0x2d4
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8002d4e:	f8d0 62c8 	ldr.w	r6, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8002d52:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8002d56:	f8de 52c0 	ldr.w	r5, [lr, #704]	@ 0x2c0
 8002d5a:	b345      	cbz	r5, 8002dae <USBD_CDC_DataIn+0x66>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8002d5c:	f001 040f 	and.w	r4, r1, #15
 8002d60:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8002d64:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002d68:	460a      	mov	r2, r1
 8002d6a:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8002d6e:	b96b      	cbnz	r3, 8002d8c <USBD_CDC_DataIn+0x44>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8002d70:	f8de 32c4 	ldr.w	r3, [lr, #708]	@ 0x2c4
 8002d74:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8002d76:	2100      	movs	r1, #0
 8002d78:	f8c5 1214 	str.w	r1, [r5, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8002d7c:	b123      	cbz	r3, 8002d88 <USBD_CDC_DataIn+0x40>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8002d7e:	f8d5 0208 	ldr.w	r0, [r5, #520]	@ 0x208
 8002d82:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8002d86:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8002d88:	2000      	movs	r0, #0
}
 8002d8a:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8002d8c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8002d90:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8002d94:	69f4      	ldr	r4, [r6, #28]
 8002d96:	fbb3 f6f4 	udiv	r6, r3, r4
 8002d9a:	fb04 3316 	mls	r3, r4, r6, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1e6      	bne.n	8002d70 <USBD_CDC_DataIn+0x28>
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8002da2:	f8cc 3018 	str.w	r3, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002da6:	461a      	mov	r2, r3
 8002da8:	f002 fe74 	bl	8005a94 <USBD_LL_Transmit>
 8002dac:	e7ec      	b.n	8002d88 <USBD_CDC_DataIn+0x40>
    return (uint8_t)USBD_FAIL;
 8002dae:	2003      	movs	r0, #3
}
 8002db0:	bd70      	pop	{r4, r5, r6, pc}
 8002db2:	bf00      	nop

08002db4 <USBD_CDC_Setup>:
{
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8002dba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002dbe:	b082      	sub	sp, #8
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8002dc0:	f8d3 62c0 	ldr.w	r6, [r3, #704]	@ 0x2c0
  uint8_t ifalt = 0U;
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f88d 2005 	strb.w	r2, [sp, #5]
  uint16_t status_info = 0U;
 8002dca:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hcdc == NULL)
 8002dce:	b166      	cbz	r6, 8002dea <USBD_CDC_Setup+0x36>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002dd0:	f891 c000 	ldrb.w	ip, [r1]
 8002dd4:	f01c 0260 	ands.w	r2, ip, #96	@ 0x60
 8002dd8:	4604      	mov	r4, r0
 8002dda:	460d      	mov	r5, r1
 8002ddc:	d01e      	beq.n	8002e1c <USBD_CDC_Setup+0x68>
 8002dde:	2a20      	cmp	r2, #32
 8002de0:	d006      	beq.n	8002df0 <USBD_CDC_Setup+0x3c>
          USBD_CtlError(pdev, req);
 8002de2:	4629      	mov	r1, r5
 8002de4:	4620      	mov	r0, r4
 8002de6:	f000 fdb5 	bl	8003954 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 8002dea:	2003      	movs	r0, #3
}
 8002dec:	b002      	add	sp, #8
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
      if (req->wLength != 0U)
 8002df0:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8002df2:	f891 e001 	ldrb.w	lr, [r1, #1]
      if (req->wLength != 0U)
 8002df6:	b37a      	cbz	r2, 8002e58 <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 8002df8:	f01c 0f80 	tst.w	ip, #128	@ 0x80
 8002dfc:	d04c      	beq.n	8002e98 <USBD_CDC_Setup+0xe4>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8002dfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8002e02:	4631      	mov	r1, r6
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4670      	mov	r0, lr
 8002e08:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8002e0a:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8002e0c:	2a07      	cmp	r2, #7
 8002e0e:	4631      	mov	r1, r6
 8002e10:	bf28      	it	cs
 8002e12:	2207      	movcs	r2, #7
 8002e14:	4620      	mov	r0, r4
 8002e16:	f000 fdd5 	bl	80039c4 <USBD_CtlSendData>
 8002e1a:	e022      	b.n	8002e62 <USBD_CDC_Setup+0xae>
      switch (req->bRequest)
 8002e1c:	784b      	ldrb	r3, [r1, #1]
 8002e1e:	2b0b      	cmp	r3, #11
 8002e20:	d8df      	bhi.n	8002de2 <USBD_CDC_Setup+0x2e>
 8002e22:	a201      	add	r2, pc, #4	@ (adr r2, 8002e28 <USBD_CDC_Setup+0x74>)
 8002e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e28:	08002e71 	.word	0x08002e71
 8002e2c:	08002e63 	.word	0x08002e63
 8002e30:	08002de3 	.word	0x08002de3
 8002e34:	08002de3 	.word	0x08002de3
 8002e38:	08002de3 	.word	0x08002de3
 8002e3c:	08002de3 	.word	0x08002de3
 8002e40:	08002de3 	.word	0x08002de3
 8002e44:	08002de3 	.word	0x08002de3
 8002e48:	08002de3 	.word	0x08002de3
 8002e4c:	08002de3 	.word	0x08002de3
 8002e50:	08002e85 	.word	0x08002e85
 8002e54:	08002e67 	.word	0x08002e67
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8002e58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8002e5c:	4670      	mov	r0, lr
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4798      	blx	r3
    return (uint8_t)USBD_FAIL;
 8002e62:	2000      	movs	r0, #0
 8002e64:	e7c2      	b.n	8002dec <USBD_CDC_Setup+0x38>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002e66:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d0f9      	beq.n	8002e62 <USBD_CDC_Setup+0xae>
 8002e6e:	e7b8      	b.n	8002de2 <USBD_CDC_Setup+0x2e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e70:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d1b4      	bne.n	8002de2 <USBD_CDC_Setup+0x2e>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f10d 0106 	add.w	r1, sp, #6
 8002e7e:	f000 fda1 	bl	80039c4 <USBD_CtlSendData>
 8002e82:	e7ee      	b.n	8002e62 <USBD_CDC_Setup+0xae>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e84:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d1aa      	bne.n	8002de2 <USBD_CDC_Setup+0x2e>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f10d 0105 	add.w	r1, sp, #5
 8002e92:	f000 fd97 	bl	80039c4 <USBD_CtlSendData>
 8002e96:	e7e4      	b.n	8002e62 <USBD_CDC_Setup+0xae>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8002e98:	2a40      	cmp	r2, #64	@ 0x40
 8002e9a:	bf28      	it	cs
 8002e9c:	2240      	movcs	r2, #64	@ 0x40
          hcdc->CmdOpCode = req->bRequest;
 8002e9e:	f886 e200 	strb.w	lr, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8002ea2:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8002ea6:	4631      	mov	r1, r6
 8002ea8:	f000 fda2 	bl	80039f0 <USBD_CtlPrepareRx>
 8002eac:	e7d9      	b.n	8002e62 <USBD_CDC_Setup+0xae>
 8002eae:	bf00      	nop

08002eb0 <USBD_CDC_DeInit>:
{
 8002eb0:	b538      	push	{r3, r4, r5, lr}
 8002eb2:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8002eb4:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8002eb6:	2181      	movs	r1, #129	@ 0x81
 8002eb8:	f002 fda8 	bl	8005a0c <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8002ebc:	2101      	movs	r1, #1
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8002ebe:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f002 fda3 	bl	8005a0c <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8002ec6:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8002eca:	2182      	movs	r1, #130	@ 0x82
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f002 fd9d 	bl	8005a0c <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8002ed2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8002ed6:	64e5      	str	r5, [r4, #76]	@ 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8002ed8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002edc:	f8d3 22c0 	ldr.w	r2, [r3, #704]	@ 0x2c0
 8002ee0:	b18a      	cbz	r2, 8002f06 <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8002ee2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8002eea:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8002eee:	33b0      	adds	r3, #176	@ 0xb0
 8002ef0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8002ef4:	f002 fdee 	bl	8005ad4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8002ef8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8002efc:	33b0      	adds	r3, #176	@ 0xb0
 8002efe:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8002f02:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8002f06:	2000      	movs	r0, #0
 8002f08:	bd38      	pop	{r3, r4, r5, pc}
 8002f0a:	bf00      	nop

08002f0c <USBD_CDC_Init>:
{
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002f10:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8002f14:	f002 fdda 	bl	8005acc <USBD_static_malloc>
  if (hcdc == NULL)
 8002f18:	4605      	mov	r5, r0
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	d05a      	beq.n	8002fd4 <USBD_CDC_Init+0xc8>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8002f1e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8002f22:	2100      	movs	r1, #0
 8002f24:	f002 fef7 	bl	8005d16 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8002f28:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8002f2c:	33b0      	adds	r3, #176	@ 0xb0
 8002f2e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f32:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8002f34:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f38:	b3b3      	cbz	r3, 8002fa8 <USBD_CDC_Init+0x9c>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8002f3a:	2340      	movs	r3, #64	@ 0x40
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	2181      	movs	r1, #129	@ 0x81
 8002f40:	4620      	mov	r0, r4
 8002f42:	f002 fd55 	bl	80059f0 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8002f46:	2101      	movs	r1, #1
 8002f48:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8002f4a:	2340      	movs	r3, #64	@ 0x40
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f002 fd4e 	bl	80059f0 <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8002f54:	2701      	movs	r7, #1
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8002f56:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002f58:	2308      	movs	r3, #8
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8002f5a:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002f5e:	2182      	movs	r1, #130	@ 0x82
 8002f60:	2203      	movs	r2, #3
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8002f62:	f8a4 7178 	strh.w	r7, [r4, #376]	@ 0x178
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002f66:	4620      	mov	r0, r4
 8002f68:	f002 fd42 	bl	80059f0 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8002f6c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8002f70:	f8a4 704c 	strh.w	r7, [r4, #76]	@ 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8002f74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  hcdc->RxBuffer = NULL;
 8002f78:	2600      	movs	r6, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8002f7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
  hcdc->RxBuffer = NULL;
 8002f7e:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 8002f86:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
  hcdc->TxState = 0U;
 8002f8a:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 8002f8e:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 8002f92:	b322      	cbz	r2, 8002fde <USBD_CDC_Init+0xd2>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f94:	7c23      	ldrb	r3, [r4, #16]
 8002f96:	b9bb      	cbnz	r3, 8002fc8 <USBD_CDC_Init+0xbc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8002f98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f9c:	4639      	mov	r1, r7
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f002 fd84 	bl	8005aac <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8002fa4:	2000      	movs	r0, #0
}
 8002fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8002fa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fac:	2202      	movs	r2, #2
 8002fae:	2181      	movs	r1, #129	@ 0x81
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f002 fd1d 	bl	80059f0 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	8721      	strh	r1, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8002fba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f002 fd15 	bl	80059f0 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8002fc6:	e7c5      	b.n	8002f54 <USBD_CDC_Init+0x48>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8002fc8:	2340      	movs	r3, #64	@ 0x40
 8002fca:	4639      	mov	r1, r7
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f002 fd6d 	bl	8005aac <USBD_LL_PrepareReceive>
 8002fd2:	e7e7      	b.n	8002fa4 <USBD_CDC_Init+0x98>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8002fd4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8002fd8:	33b0      	adds	r3, #176	@ 0xb0
 8002fda:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8002fde:	2002      	movs	r0, #2
}
 8002fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe2:	bf00      	nop

08002fe4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8002fe4:	4603      	mov	r3, r0
  if (fops == NULL)
 8002fe6:	b139      	cbz	r1, 8002ff8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8002fe8:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8002fec:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  return (uint8_t)USBD_OK;
 8002ff0:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 8002ff2:	f8c3 12c4 	str.w	r1, [r3, #708]	@ 0x2c4
  return (uint8_t)USBD_OK;
 8002ff6:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8002ff8:	2003      	movs	r0, #3
}
 8002ffa:	4770      	bx	lr

08002ffc <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8002ffc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003000:	33b0      	adds	r3, #176	@ 0xb0
 8003002:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8003006:	b12b      	cbz	r3, 8003014 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8003008:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800300c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8003010:	2000      	movs	r0, #0
 8003012:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003014:	2003      	movs	r0, #3
}
 8003016:	4770      	bx	lr

08003018 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003018:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800301c:	33b0      	adds	r3, #176	@ 0xb0
 800301e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8003022:	b11b      	cbz	r3, 800302c <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8003024:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8003028:	2000      	movs	r0, #0
 800302a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800302c:	2003      	movs	r0, #3
}
 800302e:	4770      	bx	lr

08003030 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003030:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8003034:	32b0      	adds	r2, #176	@ 0xb0
 8003036:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800303a:	b18a      	cbz	r2, 8003060 <USBD_CDC_ReceivePacket+0x30>
{
 800303c:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800303e:	7c03      	ldrb	r3, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003040:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003044:	b12b      	cbz	r3, 8003052 <USBD_CDC_ReceivePacket+0x22>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003046:	2340      	movs	r3, #64	@ 0x40
 8003048:	2101      	movs	r1, #1
 800304a:	f002 fd2f 	bl	8005aac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800304e:	2000      	movs	r0, #0
}
 8003050:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003052:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003056:	2101      	movs	r1, #1
 8003058:	f002 fd28 	bl	8005aac <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800305c:	2000      	movs	r0, #0
}
 800305e:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 8003060:	2003      	movs	r0, #3
}
 8003062:	4770      	bx	lr

08003064 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003064:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003066:	b188      	cbz	r0, 800308c <USBD_Init+0x28>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8003068:	2300      	movs	r3, #0
 800306a:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800306e:	f8c0 32c4 	str.w	r3, [r0, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8003072:	f8c0 32d0 	str.w	r3, [r0, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003076:	b109      	cbz	r1, 800307c <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8003078:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800307c:	2301      	movs	r3, #1
 800307e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 8003082:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);

  return ret;
}
 8003084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ret = USBD_LL_Init(pdev);
 8003088:	f002 bc70 	b.w	800596c <USBD_LL_Init>
    USBD_ErrLog("Invalid Device handle");
 800308c:	4805      	ldr	r0, [pc, #20]	@ (80030a4 <USBD_Init+0x40>)
 800308e:	f002 fde5 	bl	8005c5c <iprintf>
 8003092:	4805      	ldr	r0, [pc, #20]	@ (80030a8 <USBD_Init+0x44>)
 8003094:	f002 fde2 	bl	8005c5c <iprintf>
 8003098:	200a      	movs	r0, #10
 800309a:	f002 fdf1 	bl	8005c80 <putchar>
}
 800309e:	2003      	movs	r0, #3
 80030a0:	bd08      	pop	{r3, pc}
 80030a2:	bf00      	nop
 80030a4:	08006ad8 	.word	0x08006ad8
 80030a8:	08006ae0 	.word	0x08006ae0

080030ac <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80030ac:	b510      	push	{r4, lr}
 80030ae:	b082      	sub	sp, #8
  uint16_t len = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 80030b6:	b189      	cbz	r1, 80030dc <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80030b8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass[0] = pclass;
 80030ba:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80030be:	4604      	mov	r4, r0
 80030c0:	b123      	cbz	r3, 80030cc <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80030c2:	f10d 0006 	add.w	r0, sp, #6
 80030c6:	4798      	blx	r3
 80030c8:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80030cc:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 80030d0:	3301      	adds	r3, #1

  return USBD_OK;
 80030d2:	2000      	movs	r0, #0
  pdev->NumClasses++;
 80030d4:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
}
 80030d8:	b002      	add	sp, #8
 80030da:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 80030dc:	4805      	ldr	r0, [pc, #20]	@ (80030f4 <USBD_RegisterClass+0x48>)
 80030de:	f002 fdbd 	bl	8005c5c <iprintf>
 80030e2:	4805      	ldr	r0, [pc, #20]	@ (80030f8 <USBD_RegisterClass+0x4c>)
 80030e4:	f002 fdba 	bl	8005c5c <iprintf>
 80030e8:	200a      	movs	r0, #10
 80030ea:	f002 fdc9 	bl	8005c80 <putchar>
    return USBD_FAIL;
 80030ee:	2003      	movs	r0, #3
 80030f0:	e7f2      	b.n	80030d8 <USBD_RegisterClass+0x2c>
 80030f2:	bf00      	nop
 80030f4:	08006ad8 	.word	0x08006ad8
 80030f8:	08006af8 	.word	0x08006af8

080030fc <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80030fc:	f002 bc6c 	b.w	80059d8 <USBD_LL_Start>

08003100 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8003100:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003104:	b10b      	cbz	r3, 800310a <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800310a:	4618      	mov	r0, r3
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop

08003110 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003110:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8003112:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 800311a:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800311c:	bf18      	it	ne
 800311e:	2003      	movne	r0, #3
 8003120:	bd08      	pop	{r3, pc}
 8003122:	bf00      	nop

08003124 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003124:	b538      	push	{r3, r4, r5, lr}
 8003126:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003128:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800312c:	4628      	mov	r0, r5
 800312e:	f000 fc05 	bl	800393c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003132:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8003136:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	@ 0x2b0
 800313a:	f8c4 2298 	str.w	r2, [r4, #664]	@ 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 800313e:	2301      	movs	r3, #1
 8003140:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8003144:	f001 031f 	and.w	r3, r1, #31
 8003148:	2b01      	cmp	r3, #1
 800314a:	d009      	beq.n	8003160 <USBD_LL_SetupStage+0x3c>
 800314c:	2b02      	cmp	r3, #2
 800314e:	d013      	beq.n	8003178 <USBD_LL_SetupStage+0x54>
 8003150:	b163      	cbz	r3, 800316c <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003152:	4620      	mov	r0, r4
 8003154:	f001 0180 	and.w	r1, r1, #128	@ 0x80
      break;
  }

  return ret;
}
 8003158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800315c:	f002 bc62 	b.w	8005a24 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003160:	4629      	mov	r1, r5
 8003162:	4620      	mov	r0, r4
}
 8003164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003168:	f000 bb00 	b.w	800376c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800316c:	4629      	mov	r1, r5
 800316e:	4620      	mov	r0, r4
}
 8003170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003174:	f000 b950 	b.w	8003418 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003178:	4629      	mov	r1, r5
 800317a:	4620      	mov	r0, r4
}
 800317c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003180:	f000 bb30 	b.w	80037e4 <USBD_StdEPReq>

08003184 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003184:	b510      	push	{r4, lr}
 8003186:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 8003188:	b931      	cbnz	r1, 8003198 <USBD_LL_DataOutStage+0x14>
 800318a:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800318c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8003190:	2a03      	cmp	r2, #3
 8003192:	d010      	beq.n	80031b6 <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 8003194:	2000      	movs	r0, #0
 8003196:	bd10      	pop	{r4, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003198:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800319c:	2b03      	cmp	r3, #3
 800319e:	d1f9      	bne.n	8003194 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 80031a0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f4      	beq.n	8003194 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 80031aa:	2200      	movs	r2, #0
}
 80031ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          pdev->classId = idx;
 80031b0:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80031b4:	4718      	bx	r3
 80031b6:	460b      	mov	r3, r1
      if (pep->rem_length > pep->maxpacket)
 80031b8:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	@ 0x15c
 80031bc:	4291      	cmp	r1, r2
 80031be:	d808      	bhi.n	80031d2 <USBD_LL_DataOutStage+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80031c0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80031c4:	2a03      	cmp	r2, #3
 80031c6:	d00e      	beq.n	80031e6 <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 80031c8:	4620      	mov	r0, r4
 80031ca:	f000 fc27 	bl	8003a1c <USBD_CtlSendStatus>
}
 80031ce:	2000      	movs	r0, #0
 80031d0:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 80031d2:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80031d4:	428a      	cmp	r2, r1
 80031d6:	bf28      	it	cs
 80031d8:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 80031da:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80031de:	4661      	mov	r1, ip
 80031e0:	f000 fc14 	bl	8003a0c <USBD_CtlContinueRx>
 80031e4:	e7d6      	b.n	8003194 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80031e6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 80031ea:	6912      	ldr	r2, [r2, #16]
 80031ec:	2a00      	cmp	r2, #0
 80031ee:	d0eb      	beq.n	80031c8 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 80031f0:	f8c0 32d4 	str.w	r3, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80031f4:	4790      	blx	r2
 80031f6:	e7e7      	b.n	80031c8 <USBD_LL_DataOutStage+0x44>

080031f8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80031fc:	b961      	cbnz	r1, 8003218 <USBD_LL_DataInStage+0x20>
 80031fe:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003200:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8003204:	2a02      	cmp	r2, #2
 8003206:	d016      	beq.n	8003236 <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8003208:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800320c:	b113      	cbz	r3, 8003214 <USBD_LL_DataInStage+0x1c>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8003214:	2000      	movs	r0, #0
 8003216:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003218:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800321c:	2b03      	cmp	r3, #3
 800321e:	d1f9      	bne.n	8003214 <USBD_LL_DataInStage+0x1c>
        if (pdev->pClass[idx]->DataIn != NULL)
 8003220:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f4      	beq.n	8003214 <USBD_LL_DataInStage+0x1c>
          pdev->classId = idx;
 800322a:	2200      	movs	r2, #0
}
 800322c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8003230:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8003234:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8003236:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 800323a:	42b2      	cmp	r2, r6
 800323c:	460d      	mov	r5, r1
 800323e:	d810      	bhi.n	8003262 <USBD_LL_DataInStage+0x6a>
        if ((pep->maxpacket == pep->rem_length) &&
 8003240:	d01b      	beq.n	800327a <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003242:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003246:	2b03      	cmp	r3, #3
 8003248:	d024      	beq.n	8003294 <USBD_LL_DataInStage+0x9c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800324a:	2180      	movs	r1, #128	@ 0x80
 800324c:	4620      	mov	r0, r4
 800324e:	f002 fbe9 	bl	8005a24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8003252:	4620      	mov	r0, r4
 8003254:	f000 fbee 	bl	8003a34 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 8003258:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0d9      	beq.n	8003214 <USBD_LL_DataInStage+0x1c>
 8003260:	e7d5      	b.n	800320e <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 8003262:	1b92      	subs	r2, r2, r6
 8003264:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8003266:	4619      	mov	r1, r3
 8003268:	f000 fbba 	bl	80039e0 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800326c:	462b      	mov	r3, r5
 800326e:	462a      	mov	r2, r5
 8003270:	4629      	mov	r1, r5
 8003272:	4620      	mov	r0, r4
 8003274:	f002 fc1a 	bl	8005aac <USBD_LL_PrepareReceive>
 8003278:	e7c6      	b.n	8003208 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800327a:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800327c:	429a      	cmp	r2, r3
 800327e:	d8e0      	bhi.n	8003242 <USBD_LL_DataInStage+0x4a>
            (pep->total_length >= pep->maxpacket) &&
 8003280:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8003284:	4293      	cmp	r3, r2
 8003286:	d2dc      	bcs.n	8003242 <USBD_LL_DataInStage+0x4a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003288:	460a      	mov	r2, r1
 800328a:	f000 fba9 	bl	80039e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800328e:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 8003292:	e7eb      	b.n	800326c <USBD_LL_DataInStage+0x74>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8003294:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0d5      	beq.n	800324a <USBD_LL_DataInStage+0x52>
              pdev->classId = 0U;
 800329e:	2200      	movs	r2, #0
 80032a0:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80032a4:	4620      	mov	r0, r4
 80032a6:	4798      	blx	r3
 80032a8:	e7cf      	b.n	800324a <USBD_LL_DataInStage+0x52>
 80032aa:	bf00      	nop

080032ac <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80032ae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 80032b2:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80032b4:	2201      	movs	r2, #1
 80032b6:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
{
 80032ba:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
 80032bc:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 80032be:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_remote_wakeup = 0U;
 80032c2:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80032c6:	f880 12a0 	strb.w	r1, [r0, #672]	@ 0x2a0
  if (pdev->pClass[0] != NULL)
 80032ca:	b11b      	cbz	r3, 80032d4 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	b10b      	cbz	r3, 80032d4 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80032d0:	4798      	blx	r3
 80032d2:	b9b0      	cbnz	r0, 8003302 <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 80032d4:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2340      	movs	r3, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80032da:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80032dc:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80032de:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80032e0:	4620      	mov	r0, r4
 80032e2:	f002 fb85 	bl	80059f0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80032e6:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80032ea:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80032ee:	462b      	mov	r3, r5
 80032f0:	2200      	movs	r2, #0
 80032f2:	2180      	movs	r1, #128	@ 0x80
 80032f4:	4620      	mov	r0, r4
 80032f6:	f002 fb7b 	bl	80059f0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80032fa:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80032fc:	6225      	str	r5, [r4, #32]

  return ret;
}
 80032fe:	4638      	mov	r0, r7
 8003300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 8003302:	2703      	movs	r7, #3
 8003304:	e7e7      	b.n	80032d6 <USBD_LL_Reset+0x2a>
 8003306:	bf00      	nop

08003308 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003308:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800330a:	2000      	movs	r0, #0
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop

08003310 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8003310:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003314:	2b04      	cmp	r3, #4
 8003316:	d004      	beq.n	8003322 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8003318:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8003322:	2304      	movs	r3, #4
 8003324:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8003328:	2000      	movs	r0, #0
 800332a:	4770      	bx	lr

0800332c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800332c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003330:	2b04      	cmp	r3, #4
 8003332:	d104      	bne.n	800333e <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8003334:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800333e:	2000      	movs	r0, #0
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop

08003344 <USBD_LL_SOF>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003344:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003348:	2a03      	cmp	r2, #3
 800334a:	d001      	beq.n	8003350 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800334c:	2000      	movs	r0, #0
 800334e:	4770      	bx	lr
{
 8003350:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 8003352:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003356:	b113      	cbz	r3, 800335e <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	b103      	cbz	r3, 800335e <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 800335c:	4798      	blx	r3
}
 800335e:	2000      	movs	r0, #0
 8003360:	bd08      	pop	{r3, pc}
 8003362:	bf00      	nop

08003364 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8003364:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8003368:	32ae      	adds	r2, #174	@ 0xae
 800336a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800336e:	b162      	cbz	r2, 800338a <USBD_LL_IsoINIncomplete+0x26>
{
 8003370:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003372:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003376:	2b03      	cmp	r3, #3
 8003378:	d001      	beq.n	800337e <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800337a:	2000      	movs	r0, #0
}
 800337c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800337e:	6a13      	ldr	r3, [r2, #32]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0fa      	beq.n	800337a <USBD_LL_IsoINIncomplete+0x16>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8003384:	4798      	blx	r3
  return USBD_OK;
 8003386:	2000      	movs	r0, #0
}
 8003388:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800338a:	2003      	movs	r0, #3
}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8003390:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8003394:	32ae      	adds	r2, #174	@ 0xae
 8003396:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800339a:	b162      	cbz	r2, 80033b6 <USBD_LL_IsoOUTIncomplete+0x26>
{
 800339c:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800339e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d001      	beq.n	80033aa <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80033a6:	2000      	movs	r0, #0
}
 80033a8:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80033aa:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0fa      	beq.n	80033a6 <USBD_LL_IsoOUTIncomplete+0x16>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80033b0:	4798      	blx	r3
  return USBD_OK;
 80033b2:	2000      	movs	r0, #0
}
 80033b4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80033b6:	2003      	movs	r0, #3
}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop

080033bc <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 80033bc:	2000      	movs	r0, #0
 80033be:	4770      	bx	lr

080033c0 <USBD_LL_DevDisconnected>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80033c0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 80033c4:	2101      	movs	r1, #1
 80033c6:	f880 129c 	strb.w	r1, [r0, #668]	@ 0x29c
  if (pdev->pClass[0] != NULL)
 80033ca:	b142      	cbz	r2, 80033de <USBD_LL_DevDisconnected+0x1e>
{
 80033cc:	b508      	push	{r3, lr}
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80033ce:	6852      	ldr	r2, [r2, #4]
 80033d0:	7901      	ldrb	r1, [r0, #4]
 80033d2:	4790      	blx	r2
 80033d4:	b908      	cbnz	r0, 80033da <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 80033d6:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80033d8:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 80033da:	2003      	movs	r0, #3
}
 80033dc:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 80033de:	2000      	movs	r0, #0
}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop

080033e4 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80033e4:	2000      	movs	r0, #0
 80033e6:	4770      	bx	lr

080033e8 <USBD_CoreFindEP>:
  *         return the class index relative to the selected endpoint
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
 80033e8:	2000      	movs	r0, #0
 80033ea:	4770      	bx	lr

080033ec <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80033ec:	7802      	ldrb	r2, [r0, #0]
 80033ee:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 80033f2:	4594      	cmp	ip, r2
 80033f4:	4613      	mov	r3, r2
 80033f6:	d803      	bhi.n	8003400 <USBD_GetEpDesc+0x14>
 80033f8:	e00c      	b.n	8003414 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 80033fa:	459c      	cmp	ip, r3
 80033fc:	d90a      	bls.n	8003414 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 80033fe:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8003400:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 8003402:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8003404:	7842      	ldrb	r2, [r0, #1]
 8003406:	2a05      	cmp	r2, #5
  *ptr += pnext->bLength;
 8003408:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800340a:	d1f6      	bne.n	80033fa <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800340c:	7882      	ldrb	r2, [r0, #2]
 800340e:	428a      	cmp	r2, r1
 8003410:	d1f3      	bne.n	80033fa <USBD_GetEpDesc+0xe>
}
 8003412:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8003414:	2000      	movs	r0, #0
}
 8003416:	4770      	bx	lr

08003418 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8003418:	b570      	push	{r4, r5, r6, lr}
 800341a:	780b      	ldrb	r3, [r1, #0]
 800341c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003420:	2b20      	cmp	r3, #32
{
 8003422:	b082      	sub	sp, #8
 8003424:	460d      	mov	r5, r1
 8003426:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003428:	d00e      	beq.n	8003448 <USBD_StdDevReq+0x30>
 800342a:	2b40      	cmp	r3, #64	@ 0x40
 800342c:	d00c      	beq.n	8003448 <USBD_StdDevReq+0x30>
 800342e:	b1bb      	cbz	r3, 8003460 <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003430:	2180      	movs	r1, #128	@ 0x80
 8003432:	4620      	mov	r0, r4
 8003434:	f002 faf6 	bl	8005a24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003438:	2100      	movs	r1, #0
 800343a:	4620      	mov	r0, r4
 800343c:	f002 faf2 	bl	8005a24 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8003440:	2500      	movs	r5, #0
}
 8003442:	4628      	mov	r0, r5
 8003444:	b002      	add	sp, #8
 8003446:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8003448:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800344c:	33ae      	adds	r3, #174	@ 0xae
 800344e:	4629      	mov	r1, r5
 8003450:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	4620      	mov	r0, r4
}
 8003458:	b002      	add	sp, #8
 800345a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800345e:	4718      	bx	r3
      switch (req->bRequest)
 8003460:	784b      	ldrb	r3, [r1, #1]
 8003462:	2b09      	cmp	r3, #9
 8003464:	d8e4      	bhi.n	8003430 <USBD_StdDevReq+0x18>
 8003466:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <USBD_StdDevReq+0x54>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	080034cd 	.word	0x080034cd
 8003470:	080034f5 	.word	0x080034f5
 8003474:	08003431 	.word	0x08003431
 8003478:	08003513 	.word	0x08003513
 800347c:	08003431 	.word	0x08003431
 8003480:	0800352b 	.word	0x0800352b
 8003484:	0800356b 	.word	0x0800356b
 8003488:	08003431 	.word	0x08003431
 800348c:	080035a1 	.word	0x080035a1
 8003490:	08003495 	.word	0x08003495
  cfgidx = (uint8_t)(req->wValue);
 8003494:	7889      	ldrb	r1, [r1, #2]
 8003496:	4db4      	ldr	r5, [pc, #720]	@ (8003768 <USBD_StdDevReq+0x350>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003498:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800349a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800349c:	f200 8140 	bhi.w	8003720 <USBD_StdDevReq+0x308>
  switch (pdev->dev_state)
 80034a0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	b2de      	uxtb	r6, r3
 80034a8:	f000 8126 	beq.w	80036f8 <USBD_StdDevReq+0x2e0>
 80034ac:	2e03      	cmp	r6, #3
 80034ae:	f000 8101 	beq.w	80036b4 <USBD_StdDevReq+0x29c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80034b2:	2180      	movs	r1, #128	@ 0x80
 80034b4:	f002 fab6 	bl	8005a24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80034b8:	2100      	movs	r1, #0
 80034ba:	4620      	mov	r0, r4
 80034bc:	f002 fab2 	bl	8005a24 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80034c0:	7829      	ldrb	r1, [r5, #0]
 80034c2:	4620      	mov	r0, r4
 80034c4:	f7ff fe24 	bl	8003110 <USBD_ClrClassConfig>
    return USBD_FAIL;
 80034c8:	2503      	movs	r5, #3
 80034ca:	e7ba      	b.n	8003442 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80034cc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80034d0:	3b01      	subs	r3, #1
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d8ac      	bhi.n	8003430 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 80034d6:	88ca      	ldrh	r2, [r1, #6]
 80034d8:	2a02      	cmp	r2, #2
 80034da:	d1a9      	bne.n	8003430 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup != 0U)
 80034dc:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80034e0:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf0c      	ite	eq
 80034e6:	2301      	moveq	r3, #1
 80034e8:	2303      	movne	r3, #3
 80034ea:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80034ee:	f000 fa69 	bl	80039c4 <USBD_CtlSendData>
      break;
 80034f2:	e7a5      	b.n	8003440 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80034f4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80034f8:	3b01      	subs	r3, #1
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d898      	bhi.n	8003430 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80034fe:	884b      	ldrh	r3, [r1, #2]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d19d      	bne.n	8003440 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800350a:	4620      	mov	r0, r4
 800350c:	f000 fa86 	bl	8003a1c <USBD_CtlSendStatus>
 8003510:	e796      	b.n	8003440 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003512:	884b      	ldrh	r3, [r1, #2]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d0f6      	beq.n	8003506 <USBD_StdDevReq+0xee>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8003518:	2b02      	cmp	r3, #2
 800351a:	d189      	bne.n	8003430 <USBD_StdDevReq+0x18>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800351c:	888b      	ldrh	r3, [r1, #4]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8003524:	f000 fa7a 	bl	8003a1c <USBD_CtlSendStatus>
 8003528:	e78a      	b.n	8003440 <USBD_StdDevReq+0x28>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800352a:	888b      	ldrh	r3, [r1, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f47f af7f 	bne.w	8003430 <USBD_StdDevReq+0x18>
 8003532:	88cb      	ldrh	r3, [r1, #6]
 8003534:	2b00      	cmp	r3, #0
 8003536:	f47f af7b 	bne.w	8003430 <USBD_StdDevReq+0x18>
 800353a:	884d      	ldrh	r5, [r1, #2]
 800353c:	2d7f      	cmp	r5, #127	@ 0x7f
 800353e:	f63f af77 	bhi.w	8003430 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003542:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003546:	2b03      	cmp	r3, #3
 8003548:	f43f af72 	beq.w	8003430 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800354c:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800354e:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003552:	f002 fa93 	bl	8005a7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8003556:	4620      	mov	r0, r4
 8003558:	f000 fa60 	bl	8003a1c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800355c:	2d00      	cmp	r5, #0
 800355e:	f000 80ff 	beq.w	8003760 <USBD_StdDevReq+0x348>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003562:	2302      	movs	r3, #2
 8003564:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003568:	e76a      	b.n	8003440 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 800356a:	884a      	ldrh	r2, [r1, #2]
 800356c:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 800356e:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 8003570:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 8003572:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8003576:	2b06      	cmp	r3, #6
 8003578:	f63f af5a 	bhi.w	8003430 <USBD_StdDevReq+0x18>
 800357c:	a101      	add	r1, pc, #4	@ (adr r1, 8003584 <USBD_StdDevReq+0x16c>)
 800357e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	08003645 	.word	0x08003645
 8003588:	0800362b 	.word	0x0800362b
 800358c:	08003619 	.word	0x08003619
 8003590:	08003431 	.word	0x08003431
 8003594:	08003431 	.word	0x08003431
 8003598:	08003603 	.word	0x08003603
 800359c:	080035c7 	.word	0x080035c7
  if (req->wLength != 1U)
 80035a0:	88ca      	ldrh	r2, [r1, #6]
 80035a2:	2a01      	cmp	r2, #1
 80035a4:	f47f af44 	bne.w	8003430 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80035a8:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 80035ac:	2902      	cmp	r1, #2
 80035ae:	b2cb      	uxtb	r3, r1
 80035b0:	d879      	bhi.n	80036a6 <USBD_StdDevReq+0x28e>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f43f af3c 	beq.w	8003430 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 80035b8:	4601      	mov	r1, r0
 80035ba:	2300      	movs	r3, #0
 80035bc:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80035c0:	f000 fa00 	bl	80039c4 <USBD_CtlSendData>
        break;
 80035c4:	e73c      	b.n	8003440 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80035c6:	7c03      	ldrb	r3, [r0, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f47f af31 	bne.w	8003430 <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80035ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80035d2:	f10d 0006 	add.w	r0, sp, #6
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80035da:	2307      	movs	r3, #7
 80035dc:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 80035de:	88eb      	ldrh	r3, [r5, #6]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d092      	beq.n	800350a <USBD_StdDevReq+0xf2>
    if (len != 0U)
 80035e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80035e8:	2a00      	cmp	r2, #0
 80035ea:	f43f af21 	beq.w	8003430 <USBD_StdDevReq+0x18>
      len = MIN(len, req->wLength);
 80035ee:	429a      	cmp	r2, r3
 80035f0:	bf28      	it	cs
 80035f2:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80035f4:	4601      	mov	r1, r0
 80035f6:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80035f8:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80035fc:	f000 f9e2 	bl	80039c4 <USBD_CtlSendData>
 8003600:	e71e      	b.n	8003440 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003602:	7c03      	ldrb	r3, [r0, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f47f af13 	bne.w	8003430 <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800360a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800360e:	f10d 0006 	add.w	r0, sp, #6
 8003612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003614:	4798      	blx	r3
  if (err != 0U)
 8003616:	e7e2      	b.n	80035de <USBD_StdDevReq+0x1c6>
      switch ((uint8_t)(req->wValue))
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	2a05      	cmp	r2, #5
 800361c:	f63f af08 	bhi.w	8003430 <USBD_StdDevReq+0x18>
 8003620:	e8df f002 	tbb	[pc, r2]
 8003624:	292f353b 	.word	0x292f353b
 8003628:	1823      	.short	0x1823
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800362a:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800362c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003630:	2a00      	cmp	r2, #0
 8003632:	f040 8087 	bne.w	8003744 <USBD_StdDevReq+0x32c>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	f10d 0006 	add.w	r0, sp, #6
 800363c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800363e:	2302      	movs	r3, #2
 8003640:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003642:	e7cc      	b.n	80035de <USBD_StdDevReq+0x1c6>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003644:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003648:	7c00      	ldrb	r0, [r0, #16]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f10d 0106 	add.w	r1, sp, #6
 8003650:	4798      	blx	r3
  if (err != 0U)
 8003652:	e7c4      	b.n	80035de <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003654:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f43f aee8 	beq.w	8003430 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003660:	7c20      	ldrb	r0, [r4, #16]
 8003662:	f10d 0106 	add.w	r1, sp, #6
 8003666:	4798      	blx	r3
  if (err != 0U)
 8003668:	e7b9      	b.n	80035de <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800366a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f5      	bne.n	8003660 <USBD_StdDevReq+0x248>
 8003674:	e6dc      	b.n	8003430 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003676:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ef      	bne.n	8003660 <USBD_StdDevReq+0x248>
 8003680:	e6d6      	b.n	8003430 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003682:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e9      	bne.n	8003660 <USBD_StdDevReq+0x248>
 800368c:	e6d0      	b.n	8003430 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800368e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e3      	bne.n	8003660 <USBD_StdDevReq+0x248>
 8003698:	e6ca      	b.n	8003430 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800369a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1dd      	bne.n	8003660 <USBD_StdDevReq+0x248>
 80036a4:	e6c4      	b.n	8003430 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	f47f aec2 	bne.w	8003430 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80036ac:	1d01      	adds	r1, r0, #4
 80036ae:	f000 f989 	bl	80039c4 <USBD_CtlSendData>
        break;
 80036b2:	e6c5      	b.n	8003440 <USBD_StdDevReq+0x28>
      if (cfgidx == 0U)
 80036b4:	2900      	cmp	r1, #0
 80036b6:	d03b      	beq.n	8003730 <USBD_StdDevReq+0x318>
      else if (cfgidx != pdev->dev_config)
 80036b8:	6841      	ldr	r1, [r0, #4]
 80036ba:	2901      	cmp	r1, #1
 80036bc:	f43f af25 	beq.w	800350a <USBD_StdDevReq+0xf2>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80036c0:	b2c9      	uxtb	r1, r1
 80036c2:	f7ff fd25 	bl	8003110 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80036c6:	7829      	ldrb	r1, [r5, #0]
 80036c8:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80036ca:	4620      	mov	r0, r4
 80036cc:	f7ff fd18 	bl	8003100 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80036d0:	4605      	mov	r5, r0
 80036d2:	2800      	cmp	r0, #0
 80036d4:	f43f af19 	beq.w	800350a <USBD_StdDevReq+0xf2>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80036d8:	2180      	movs	r1, #128	@ 0x80
 80036da:	4620      	mov	r0, r4
 80036dc:	f002 f9a2 	bl	8005a24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80036e0:	2100      	movs	r1, #0
 80036e2:	4620      	mov	r0, r4
 80036e4:	f002 f99e 	bl	8005a24 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80036e8:	7921      	ldrb	r1, [r4, #4]
 80036ea:	4620      	mov	r0, r4
 80036ec:	f7ff fd10 	bl	8003110 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80036f0:	2302      	movs	r3, #2
 80036f2:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80036f6:	e6a4      	b.n	8003442 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 80036f8:	2900      	cmp	r1, #0
 80036fa:	f43f af06 	beq.w	800350a <USBD_StdDevReq+0xf2>
        pdev->dev_config = cfgidx;
 80036fe:	2101      	movs	r1, #1
 8003700:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8003702:	f7ff fcfd 	bl	8003100 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8003706:	4605      	mov	r5, r0
 8003708:	b318      	cbz	r0, 8003752 <USBD_StdDevReq+0x33a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800370a:	2180      	movs	r1, #128	@ 0x80
 800370c:	4620      	mov	r0, r4
 800370e:	f002 f989 	bl	8005a24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003712:	2100      	movs	r1, #0
 8003714:	4620      	mov	r0, r4
 8003716:	f002 f985 	bl	8005a24 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800371a:	f884 629c 	strb.w	r6, [r4, #668]	@ 0x29c
 800371e:	e690      	b.n	8003442 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003720:	2180      	movs	r1, #128	@ 0x80
 8003722:	f002 f97f 	bl	8005a24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003726:	2100      	movs	r1, #0
 8003728:	4620      	mov	r0, r4
 800372a:	f002 f97b 	bl	8005a24 <USBD_LL_StallEP>
}
 800372e:	e6cb      	b.n	80034c8 <USBD_StdDevReq+0xb0>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003730:	2302      	movs	r3, #2
 8003732:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8003736:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003738:	f7ff fcea 	bl	8003110 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800373c:	4620      	mov	r0, r4
 800373e:	f000 f96d 	bl	8003a1c <USBD_CtlSendStatus>
 8003742:	e67d      	b.n	8003440 <USBD_StdDevReq+0x28>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8003744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003746:	f10d 0006 	add.w	r0, sp, #6
 800374a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800374c:	2302      	movs	r3, #2
 800374e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003750:	e745      	b.n	80035de <USBD_StdDevReq+0x1c6>
          (void)USBD_CtlSendStatus(pdev);
 8003752:	4620      	mov	r0, r4
 8003754:	f000 f962 	bl	8003a1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003758:	2303      	movs	r3, #3
 800375a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800375e:	e66f      	b.n	8003440 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003760:	2301      	movs	r3, #1
 8003762:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003766:	e66b      	b.n	8003440 <USBD_StdDevReq+0x28>
 8003768:	200001c8 	.word	0x200001c8

0800376c <USBD_StdItfReq>:
{
 800376c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800376e:	780b      	ldrb	r3, [r1, #0]
 8003770:	065a      	lsls	r2, r3, #25
{
 8003772:	460d      	mov	r5, r1
 8003774:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003776:	d50c      	bpl.n	8003792 <USBD_StdItfReq+0x26>
 8003778:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800377c:	2a40      	cmp	r2, #64	@ 0x40
 800377e:	d008      	beq.n	8003792 <USBD_StdItfReq+0x26>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003780:	2180      	movs	r1, #128	@ 0x80
 8003782:	f002 f94f 	bl	8005a24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003786:	2100      	movs	r1, #0
 8003788:	4620      	mov	r0, r4
 800378a:	f002 f94b 	bl	8005a24 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800378e:	2000      	movs	r0, #0
}
 8003790:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8003792:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003796:	3b01      	subs	r3, #1
 8003798:	2b02      	cmp	r3, #2
 800379a:	d802      	bhi.n	80037a2 <USBD_StdItfReq+0x36>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800379c:	7929      	ldrb	r1, [r5, #4]
 800379e:	2901      	cmp	r1, #1
 80037a0:	d908      	bls.n	80037b4 <USBD_StdItfReq+0x48>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80037a2:	2180      	movs	r1, #128	@ 0x80
 80037a4:	4620      	mov	r0, r4
 80037a6:	f002 f93d 	bl	8005a24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80037aa:	2100      	movs	r1, #0
 80037ac:	4620      	mov	r0, r4
 80037ae:	f002 f939 	bl	8005a24 <USBD_LL_StallEP>
}
 80037b2:	e7ec      	b.n	800378e <USBD_StdItfReq+0x22>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7ff fe15 	bl	80033e4 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80037ba:	b988      	cbnz	r0, 80037e0 <USBD_StdItfReq+0x74>
              if (pdev->pClass[idx]->Setup != NULL)
 80037bc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	b16b      	cbz	r3, 80037e0 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 80037c4:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80037c8:	4629      	mov	r1, r5
 80037ca:	4620      	mov	r0, r4
 80037cc:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80037ce:	88ea      	ldrh	r2, [r5, #6]
 80037d0:	2a00      	cmp	r2, #0
 80037d2:	d1dd      	bne.n	8003790 <USBD_StdItfReq+0x24>
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d1db      	bne.n	8003790 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 f91f 	bl	8003a1c <USBD_CtlSendStatus>
 80037de:	e7d6      	b.n	800378e <USBD_StdItfReq+0x22>
                ret = USBD_FAIL;
 80037e0:	2003      	movs	r0, #3
}
 80037e2:	bd38      	pop	{r3, r4, r5, pc}

080037e4 <USBD_StdEPReq>:
{
 80037e4:	b530      	push	{r4, r5, lr}
 80037e6:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 80037e8:	888a      	ldrh	r2, [r1, #4]
 80037ea:	7823      	ldrb	r3, [r4, #0]
 80037ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037f0:	2b20      	cmp	r3, #32
{
 80037f2:	b083      	sub	sp, #12
 80037f4:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 80037f6:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037f8:	d01e      	beq.n	8003838 <USBD_StdEPReq+0x54>
 80037fa:	2b40      	cmp	r3, #64	@ 0x40
 80037fc:	d01c      	beq.n	8003838 <USBD_StdEPReq+0x54>
 80037fe:	b36b      	cbz	r3, 800385c <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003800:	2180      	movs	r1, #128	@ 0x80
 8003802:	4628      	mov	r0, r5
 8003804:	f002 f90e 	bl	8005a24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003808:	2100      	movs	r1, #0
 800380a:	4628      	mov	r0, r5
 800380c:	f002 f90a 	bl	8005a24 <USBD_LL_StallEP>
}
 8003810:	2000      	movs	r0, #0
 8003812:	b003      	add	sp, #12
 8003814:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 8003816:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800381a:	2b02      	cmp	r3, #2
 800381c:	b2da      	uxtb	r2, r3
 800381e:	d05e      	beq.n	80038de <USBD_StdEPReq+0xfa>
 8003820:	2a03      	cmp	r2, #3
 8003822:	d1ed      	bne.n	8003800 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003824:	8863      	ldrh	r3, [r4, #2]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f2      	bne.n	8003810 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800382a:	064b      	lsls	r3, r1, #25
 800382c:	d17d      	bne.n	800392a <USBD_StdEPReq+0x146>
                (void)USBD_CtlSendStatus(pdev);
 800382e:	4628      	mov	r0, r5
 8003830:	9101      	str	r1, [sp, #4]
 8003832:	f000 f8f3 	bl	8003a1c <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8003836:	9901      	ldr	r1, [sp, #4]
 8003838:	4628      	mov	r0, r5
 800383a:	f7ff fdd5 	bl	80033e8 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800383e:	2800      	cmp	r0, #0
 8003840:	d1e6      	bne.n	8003810 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 8003842:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
                  pdev->classId = idx;
 8003846:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0df      	beq.n	8003810 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8003850:	4621      	mov	r1, r4
 8003852:	4628      	mov	r0, r5
}
 8003854:	b003      	add	sp, #12
 8003856:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800385a:	4718      	bx	r3
      switch (req->bRequest)
 800385c:	7863      	ldrb	r3, [r4, #1]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d0d9      	beq.n	8003816 <USBD_StdEPReq+0x32>
 8003862:	2b03      	cmp	r3, #3
 8003864:	d02a      	beq.n	80038bc <USBD_StdEPReq+0xd8>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1ca      	bne.n	8003800 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 800386a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800386e:	2b02      	cmp	r3, #2
 8003870:	b2d8      	uxtb	r0, r3
 8003872:	d03d      	beq.n	80038f0 <USBD_StdEPReq+0x10c>
 8003874:	2803      	cmp	r0, #3
 8003876:	d1c3      	bne.n	8003800 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003878:	f001 030f 	and.w	r3, r1, #15
 800387c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8003880:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003882:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8003886:	d442      	bmi.n	800390e <USBD_StdEPReq+0x12a>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003888:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0b7      	beq.n	8003800 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003890:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8003894:	2414      	movs	r4, #20
 8003896:	fb04 5403 	mla	r4, r4, r3, r5
 800389a:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d041      	beq.n	8003926 <USBD_StdEPReq+0x142>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80038a2:	4628      	mov	r0, r5
 80038a4:	f002 f8d6 	bl	8005a54 <USBD_LL_IsStallEP>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d03c      	beq.n	8003926 <USBD_StdEPReq+0x142>
 80038ac:	2301      	movs	r3, #1
                pep->status = 0x0000U;
 80038ae:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80038b0:	2202      	movs	r2, #2
 80038b2:	4621      	mov	r1, r4
 80038b4:	4628      	mov	r0, r5
 80038b6:	f000 f885 	bl	80039c4 <USBD_CtlSendData>
              break;
 80038ba:	e7a9      	b.n	8003810 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 80038bc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	d00b      	beq.n	80038de <USBD_StdEPReq+0xfa>
 80038c6:	2a03      	cmp	r2, #3
 80038c8:	d19a      	bne.n	8003800 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80038ca:	8863      	ldrh	r3, [r4, #2]
 80038cc:	b91b      	cbnz	r3, 80038d6 <USBD_StdEPReq+0xf2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80038ce:	0648      	lsls	r0, r1, #25
 80038d0:	d001      	beq.n	80038d6 <USBD_StdEPReq+0xf2>
 80038d2:	88e3      	ldrh	r3, [r4, #6]
 80038d4:	b373      	cbz	r3, 8003934 <USBD_StdEPReq+0x150>
              (void)USBD_CtlSendStatus(pdev);
 80038d6:	4628      	mov	r0, r5
 80038d8:	f000 f8a0 	bl	8003a1c <USBD_CtlSendStatus>
              break;
 80038dc:	e798      	b.n	8003810 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80038de:	064a      	lsls	r2, r1, #25
 80038e0:	d08e      	beq.n	8003800 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80038e2:	f002 f89f 	bl	8005a24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80038e6:	2180      	movs	r1, #128	@ 0x80
 80038e8:	4628      	mov	r0, r5
 80038ea:	f002 f89b 	bl	8005a24 <USBD_LL_StallEP>
 80038ee:	e78f      	b.n	8003810 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80038f0:	0648      	lsls	r0, r1, #25
 80038f2:	d185      	bne.n	8003800 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80038f4:	0611      	lsls	r1, r2, #24
 80038f6:	bf4c      	ite	mi
 80038f8:	f105 0114 	addmi.w	r1, r5, #20
 80038fc:	f505 71aa 	addpl.w	r1, r5, #340	@ 0x154
              pep->status = 0x0000U;
 8003900:	2300      	movs	r3, #0
 8003902:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8003904:	2202      	movs	r2, #2
 8003906:	4628      	mov	r0, r5
 8003908:	f000 f85c 	bl	80039c4 <USBD_CtlSendData>
              break;
 800390c:	e780      	b.n	8003810 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800390e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	f43f af75 	beq.w	8003800 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003916:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800391a:	1c5c      	adds	r4, r3, #1
 800391c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003920:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8003924:	e7bb      	b.n	800389e <USBD_StdEPReq+0xba>
{
 8003926:	2300      	movs	r3, #0
 8003928:	e7c1      	b.n	80038ae <USBD_StdEPReq+0xca>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800392a:	9101      	str	r1, [sp, #4]
 800392c:	f002 f886 	bl	8005a3c <USBD_LL_ClearStallEP>
 8003930:	9901      	ldr	r1, [sp, #4]
 8003932:	e77c      	b.n	800382e <USBD_StdEPReq+0x4a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8003934:	4628      	mov	r0, r5
 8003936:	f002 f875 	bl	8005a24 <USBD_LL_StallEP>
 800393a:	e7cc      	b.n	80038d6 <USBD_StdEPReq+0xf2>

0800393c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800393c:	780b      	ldrb	r3, [r1, #0]
 800393e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8003940:	784b      	ldrb	r3, [r1, #1]
 8003942:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8003944:	884b      	ldrh	r3, [r1, #2]
 8003946:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8003948:	888b      	ldrh	r3, [r1, #4]
 800394a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 800394c:	88cb      	ldrh	r3, [r1, #6]
 800394e:	80c3      	strh	r3, [r0, #6]
}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop

08003954 <USBD_CtlError>:
{
 8003954:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003956:	2180      	movs	r1, #128	@ 0x80
{
 8003958:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800395a:	f002 f863 	bl	8005a24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800395e:	4620      	mov	r0, r4
 8003960:	2100      	movs	r1, #0
}
 8003962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8003966:	f002 b85d 	b.w	8005a24 <USBD_LL_StallEP>
 800396a:	bf00      	nop

0800396c <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800396c:	b330      	cbz	r0, 80039bc <USBD_GetString+0x50>
{
 800396e:	b570      	push	{r4, r5, r6, lr}
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8003970:	7803      	ldrb	r3, [r0, #0]
 8003972:	460e      	mov	r6, r1
 8003974:	4614      	mov	r4, r2
 8003976:	4605      	mov	r5, r0
 8003978:	b30b      	cbz	r3, 80039be <USBD_GetString+0x52>
 800397a:	4603      	mov	r3, r0
 800397c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003980:	2900      	cmp	r1, #0
 8003982:	d1fb      	bne.n	800397c <USBD_GetString+0x10>
 8003984:	1c68      	adds	r0, r5, #1
 8003986:	f7fc fc33 	bl	80001f0 <strlen>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800398a:	1c43      	adds	r3, r0, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	3301      	adds	r3, #1
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	b2da      	uxtb	r2, r3
 8003994:	8023      	strh	r3, [r4, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8003996:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8003998:	7032      	strb	r2, [r6, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800399a:	7073      	strb	r3, [r6, #1]
  while (*pdesc != (uint8_t)'\0')
 800399c:	782c      	ldrb	r4, [r5, #0]
 800399e:	b164      	cbz	r4, 80039ba <USBD_GetString+0x4e>
 80039a0:	4628      	mov	r0, r5
  idx++;
 80039a2:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80039a4:	2100      	movs	r1, #0
    idx++;
 80039a6:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 80039a8:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 80039aa:	54f4      	strb	r4, [r6, r3]
    unicode[idx] = 0U;
 80039ac:	54b1      	strb	r1, [r6, r2]
  while (*pdesc != (uint8_t)'\0')
 80039ae:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 80039b2:	3302      	adds	r3, #2
 80039b4:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 80039b6:	2c00      	cmp	r4, #0
 80039b8:	d1f5      	bne.n	80039a6 <USBD_GetString+0x3a>
}
 80039ba:	bd70      	pop	{r4, r5, r6, pc}
 80039bc:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80039be:	2202      	movs	r2, #2
 80039c0:	4613      	mov	r3, r2
 80039c2:	e7e7      	b.n	8003994 <USBD_GetString+0x28>

080039c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80039c4:	b508      	push	{r3, lr}
 80039c6:	4613      	mov	r3, r2
 80039c8:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80039ca:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;
 80039cc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80039d0:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80039d4:	2100      	movs	r1, #0
 80039d6:	f002 f85d 	bl	8005a94 <USBD_LL_Transmit>

  return USBD_OK;
}
 80039da:	2000      	movs	r0, #0
 80039dc:	bd08      	pop	{r3, pc}
 80039de:	bf00      	nop

080039e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80039e0:	b508      	push	{r3, lr}
 80039e2:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80039e4:	460a      	mov	r2, r1
 80039e6:	2100      	movs	r1, #0
 80039e8:	f002 f854 	bl	8005a94 <USBD_LL_Transmit>

  return USBD_OK;
}
 80039ec:	2000      	movs	r0, #0
 80039ee:	bd08      	pop	{r3, pc}

080039f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80039f0:	b508      	push	{r3, lr}
 80039f2:	4613      	mov	r3, r2
 80039f4:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80039f6:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;
 80039f8:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80039fc:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003a00:	2100      	movs	r1, #0
 8003a02:	f002 f853 	bl	8005aac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003a06:	2000      	movs	r0, #0
 8003a08:	bd08      	pop	{r3, pc}
 8003a0a:	bf00      	nop

08003a0c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8003a0c:	b508      	push	{r3, lr}
 8003a0e:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003a10:	460a      	mov	r2, r1
 8003a12:	2100      	movs	r1, #0
 8003a14:	f002 f84a 	bl	8005aac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003a18:	2000      	movs	r0, #0
 8003a1a:	bd08      	pop	{r3, pc}

08003a1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003a1c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003a1e:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003a20:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003a22:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003a26:	461a      	mov	r2, r3
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f002 f833 	bl	8005a94 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003a2e:	2000      	movs	r0, #0
 8003a30:	bd08      	pop	{r3, pc}
 8003a32:	bf00      	nop

08003a34 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8003a34:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003a36:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003a38:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003a3a:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4619      	mov	r1, r3
 8003a42:	f002 f833 	bl	8005aac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003a46:	2000      	movs	r0, #0
 8003a48:	bd08      	pop	{r3, pc}
 8003a4a:	bf00      	nop

08003a4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a4c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003a52:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a54:	f001 f916 	bl	8004c84 <xTaskGetSchedulerState>
 8003a58:	2801      	cmp	r0, #1
 8003a5a:	d100      	bne.n	8003a5e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8003a5c:	bd08      	pop	{r3, pc}
 8003a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003a62:	f001 bc47 	b.w	80052f4 <xPortSysTickHandler>
 8003a66:	bf00      	nop

08003a68 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a68:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a6c:	b92b      	cbnz	r3, 8003a7a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a6e:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <osKernelInitialize+0x20>)
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	b928      	cbnz	r0, 8003a80 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a78:	4770      	bx	lr
    stat = osErrorISR;
 8003a7a:	f06f 0005 	mvn.w	r0, #5
 8003a7e:	4770      	bx	lr
    } else {
      stat = osError;
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000f1c 	.word	0x20000f1c

08003a8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a8c:	b510      	push	{r4, lr}
 8003a8e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a92:	b974      	cbnz	r4, 8003ab2 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8003a94:	4b08      	ldr	r3, [pc, #32]	@ (8003ab8 <osKernelStart+0x2c>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	2a01      	cmp	r2, #1
 8003a9a:	d107      	bne.n	8003aac <osKernelStart+0x20>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9c:	4907      	ldr	r1, [pc, #28]	@ (8003abc <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	77cc      	strb	r4, [r1, #31]
 8003aa2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003aa4:	f000 fdf0 	bl	8004688 <vTaskStartScheduler>
      stat = osOK;
 8003aa8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8003aaa:	bd10      	pop	{r4, pc}
      stat = osError;
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003ab0:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003ab2:	f06f 0005 	mvn.w	r0, #5
}
 8003ab6:	bd10      	pop	{r4, pc}
 8003ab8:	20000f1c 	.word	0x20000f1c
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac2:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ac4:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ac6:	4614      	mov	r4, r2
  hTask = NULL;
 8003ac8:	9505      	str	r5, [sp, #20]
 8003aca:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003ace:	b112      	cbz	r2, 8003ad6 <osThreadNew+0x16>
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
        return (NULL);
 8003ad0:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8003ad2:	b007      	add	sp, #28
 8003ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (func != NULL)) {
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d0fa      	beq.n	8003ad0 <osThreadNew+0x10>
    if (attr != NULL) {
 8003ada:	b304      	cbz	r4, 8003b1e <osThreadNew+0x5e>
      if (attr->priority != osPriorityNone) {
 8003adc:	69a3      	ldr	r3, [r4, #24]
 8003ade:	b9d3      	cbnz	r3, 8003b16 <osThreadNew+0x56>
 8003ae0:	2318      	movs	r3, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ae2:	6862      	ldr	r2, [r4, #4]
 8003ae4:	07d2      	lsls	r2, r2, #31
 8003ae6:	d4f3      	bmi.n	8003ad0 <osThreadNew+0x10>
      if (attr->stack_size > 0U) {
 8003ae8:	6965      	ldr	r5, [r4, #20]
 8003aea:	b335      	cbz	r5, 8003b3a <osThreadNew+0x7a>
        stack = attr->stack_size / sizeof(StackType_t);
 8003aec:	08aa      	lsrs	r2, r5, #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003aee:	68a6      	ldr	r6, [r4, #8]
      if (attr->name != NULL) {
 8003af0:	f8d4 c000 	ldr.w	ip, [r4]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003af4:	68e7      	ldr	r7, [r4, #12]
 8003af6:	b31e      	cbz	r6, 8003b40 <osThreadNew+0x80>
 8003af8:	2fa7      	cmp	r7, #167	@ 0xa7
 8003afa:	d9e9      	bls.n	8003ad0 <osThreadNew+0x10>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003afc:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003afe:	2c00      	cmp	r4, #0
 8003b00:	d0e6      	beq.n	8003ad0 <osThreadNew+0x10>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b02:	2d00      	cmp	r5, #0
 8003b04:	d0e4      	beq.n	8003ad0 <osThreadNew+0x10>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4661      	mov	r1, ip
 8003b10:	f000 fd50 	bl	80045b4 <xTaskCreateStatic>
 8003b14:	e7dd      	b.n	8003ad2 <osThreadNew+0x12>
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b16:	1e5d      	subs	r5, r3, #1
 8003b18:	2d37      	cmp	r5, #55	@ 0x37
 8003b1a:	d9e2      	bls.n	8003ae2 <osThreadNew+0x22>
 8003b1c:	e7d8      	b.n	8003ad0 <osThreadNew+0x10>
 8003b1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
    prio  = (UBaseType_t)osPriorityNormal;
 8003b22:	2318      	movs	r3, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	460b      	mov	r3, r1
 8003b28:	4621      	mov	r1, r4
 8003b2a:	ac05      	add	r4, sp, #20
 8003b2c:	9401      	str	r4, [sp, #4]
 8003b2e:	f000 fd7b 	bl	8004628 <xTaskCreate>
 8003b32:	2801      	cmp	r0, #1
 8003b34:	d1cc      	bne.n	8003ad0 <osThreadNew+0x10>
  return ((osThreadId_t)hTask);
 8003b36:	9805      	ldr	r0, [sp, #20]
 8003b38:	e7cb      	b.n	8003ad2 <osThreadNew+0x12>
    stack = configMINIMAL_STACK_SIZE;
 8003b3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b3e:	e7d6      	b.n	8003aee <osThreadNew+0x2e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b40:	2f00      	cmp	r7, #0
 8003b42:	d1c5      	bne.n	8003ad0 <osThreadNew+0x10>
 8003b44:	6924      	ldr	r4, [r4, #16]
 8003b46:	2c00      	cmp	r4, #0
 8003b48:	d1c2      	bne.n	8003ad0 <osThreadNew+0x10>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b4a:	b292      	uxth	r2, r2
 8003b4c:	4664      	mov	r4, ip
 8003b4e:	e7e9      	b.n	8003b24 <osThreadNew+0x64>

08003b50 <osDelay>:
 8003b50:	f3ef 8205 	mrs	r2, IPSR
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b54:	b93a      	cbnz	r2, 8003b66 <osDelay+0x16>
osStatus_t osDelay (uint32_t ticks) {
 8003b56:	b508      	push	{r3, lr}
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8003b58:	b908      	cbnz	r0, 8003b5e <osDelay+0xe>
    stat = osOK;
 8003b5a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8003b5c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8003b5e:	f000 ff45 	bl	80049ec <vTaskDelay>
    stat = osOK;
 8003b62:	2000      	movs	r0, #0
}
 8003b64:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8003b66:	f06f 0005 	mvn.w	r0, #5
}
 8003b6a:	4770      	bx	lr

08003b6c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b6c:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <vApplicationGetIdleTaskMemory+0x18>)
 8003b6e:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b70:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b76:	4c04      	ldr	r4, [pc, #16]	@ (8003b88 <vApplicationGetIdleTaskMemory+0x1c>)
 8003b78:	600c      	str	r4, [r1, #0]
}
 8003b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b7e:	6013      	str	r3, [r2, #0]
}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000e74 	.word	0x20000e74
 8003b88:	20000a74 	.word	0x20000a74

08003b8c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <vApplicationGetTimerTaskMemory+0x18>)
 8003b8e:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b90:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b96:	4c04      	ldr	r4, [pc, #16]	@ (8003ba8 <vApplicationGetTimerTaskMemory+0x1c>)
 8003b98:	600c      	str	r4, [r1, #0]
}
 8003b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b9e:	6013      	str	r3, [r2, #0]
}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	200009cc 	.word	0x200009cc
 8003ba8:	200001cc 	.word	0x200001cc

08003bac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bac:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bb0:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bb4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bb6:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bba:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bbe:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop

08003bc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop

08003bcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bcc:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003bce:	6803      	ldr	r3, [r0, #0]
{
 8003bd0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bd2:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 8003bd4:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bd6:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bda:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bdc:	6091      	str	r1, [r2, #8]
}
 8003bde:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8003be2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003be4:	6003      	str	r3, [r0, #0]
}
 8003be6:	4770      	bx	lr

08003be8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003be8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bea:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bec:	1c6b      	adds	r3, r5, #1
 8003bee:	d010      	beq.n	8003c12 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bf0:	f100 0308 	add.w	r3, r0, #8
 8003bf4:	461c      	mov	r4, r3
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	42aa      	cmp	r2, r5
 8003bfc:	d9fa      	bls.n	8003bf4 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003bfe:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c00:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8003c02:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c04:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c06:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c08:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8003c0a:	6108      	str	r0, [r1, #16]
}
 8003c0c:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8003c0e:	6002      	str	r2, [r0, #0]
}
 8003c10:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c12:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c14:	6863      	ldr	r3, [r4, #4]
 8003c16:	e7f2      	b.n	8003bfe <vListInsert+0x16>

08003c18 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c18:	6903      	ldr	r3, [r0, #16]
{
 8003c1a:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c1c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c20:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c22:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8003c24:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c26:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c28:	bf08      	it	eq
 8003c2a:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8003c2c:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8003c32:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8003c34:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8003c36:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003c38:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8003c3a:	6818      	ldr	r0, [r3, #0]
}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop

08003c40 <prvCopyDataToQueue>:

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c40:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8003c42:	b570      	push	{r4, r5, r6, lr}
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c44:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8003c46:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c48:	b92b      	cbnz	r3, 8003c56 <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c4a:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c4c:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c4e:	b35e      	cbz	r6, 8003ca8 <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 8003c50:	4618      	mov	r0, r3
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c52:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8003c54:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003c56:	4616      	mov	r6, r2
 8003c58:	b982      	cbnz	r2, 8003c7c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	6840      	ldr	r0, [r0, #4]
 8003c5e:	f002 f92c 	bl	8005eba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c62:	6863      	ldr	r3, [r4, #4]
 8003c64:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c66:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c68:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c6a:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c6c:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c6e:	bf24      	itt	cs
 8003c70:	6823      	ldrcs	r3, [r4, #0]
 8003c72:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c74:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8003c76:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c78:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68c0      	ldr	r0, [r0, #12]
 8003c80:	f002 f91b 	bl	8005eba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c84:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	4251      	negs	r1, r2
 8003c8a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c8c:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c8e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d202      	bcs.n	8003c9a <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c94:	68a3      	ldr	r3, [r4, #8]
 8003c96:	440b      	add	r3, r1
 8003c98:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003c9a:	2e02      	cmp	r6, #2
 8003c9c:	d1ea      	bne.n	8003c74 <prvCopyDataToQueue+0x34>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c9e:	2d01      	cmp	r5, #1
 8003ca0:	bf38      	it	cc
 8003ca2:	2501      	movcc	r5, #1
BaseType_t xReturn = pdFALSE;
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	e7d4      	b.n	8003c52 <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ca8:	6880      	ldr	r0, [r0, #8]
 8003caa:	f000 fffb 	bl	8004ca4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003cae:	60a6      	str	r6, [r4, #8]
 8003cb0:	e7cf      	b.n	8003c52 <prvCopyDataToQueue+0x12>
 8003cb2:	bf00      	nop

08003cb4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cb8:	f001 fab4 	bl	8005224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cbc:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8003cc0:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cc2:	2c00      	cmp	r4, #0
 8003cc4:	dd14      	ble.n	8003cf0 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cc6:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8003cca:	e003      	b.n	8003cd4 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ccc:	1e63      	subs	r3, r4, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cd2:	b16a      	cbz	r2, 8003cf0 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cd4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cd6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cd8:	b153      	cbz	r3, 8003cf0 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cda:	f000 ff3b 	bl	8004b54 <xTaskRemoveFromEventList>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d0f4      	beq.n	8003ccc <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8003ce2:	f000 ffc9 	bl	8004c78 <vTaskMissedYield>
			--cTxLock;
 8003ce6:	1e63      	subs	r3, r4, #1
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cec:	2a00      	cmp	r2, #0
 8003cee:	d1f1      	bne.n	8003cd4 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cf0:	23ff      	movs	r3, #255	@ 0xff
 8003cf2:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003cf6:	f001 fab7 	bl	8005268 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cfa:	f001 fa93 	bl	8005224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cfe:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8003d02:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d04:	2c00      	cmp	r4, #0
 8003d06:	dd14      	ble.n	8003d32 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d08:	f105 0610 	add.w	r6, r5, #16
 8003d0c:	e003      	b.n	8003d16 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d0e:	1e63      	subs	r3, r4, #1
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d14:	b16a      	cbz	r2, 8003d32 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d16:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d18:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d1a:	b153      	cbz	r3, 8003d32 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d1c:	f000 ff1a 	bl	8004b54 <xTaskRemoveFromEventList>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d0f4      	beq.n	8003d0e <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8003d24:	f000 ffa8 	bl	8004c78 <vTaskMissedYield>
				--cRxLock;
 8003d28:	1e63      	subs	r3, r4, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d2e:	2a00      	cmp	r2, #0
 8003d30:	d1f1      	bne.n	8003d16 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d32:	23ff      	movs	r3, #255	@ 0xff
 8003d34:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
}
 8003d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003d3c:	f001 ba94 	b.w	8005268 <vPortExitCritical>

08003d40 <xQueueGenericReset>:
{
 8003d40:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8003d42:	b1e0      	cbz	r0, 8003d7e <xQueueGenericReset+0x3e>
 8003d44:	4604      	mov	r4, r0
 8003d46:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8003d48:	f001 fa6c 	bl	8005224 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d4c:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
 8003d50:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d52:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d54:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d58:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d5a:	440a      	add	r2, r1
 8003d5c:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d5e:	2200      	movs	r2, #0
 8003d60:	63a2      	str	r2, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d62:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8003d64:	22ff      	movs	r2, #255	@ 0xff
 8003d66:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d6a:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8003d6c:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8003d70:	b975      	cbnz	r5, 8003d90 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d72:	6923      	ldr	r3, [r4, #16]
 8003d74:	b9c3      	cbnz	r3, 8003da8 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 8003d76:	f001 fa77 	bl	8005268 <vPortExitCritical>
}
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003d8e:	e7fe      	b.n	8003d8e <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d90:	f104 0010 	add.w	r0, r4, #16
 8003d94:	f7ff ff0a 	bl	8003bac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d98:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003d9c:	f7ff ff06 	bl	8003bac <vListInitialise>
	taskEXIT_CRITICAL();
 8003da0:	f001 fa62 	bl	8005268 <vPortExitCritical>
}
 8003da4:	2001      	movs	r0, #1
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003da8:	f104 0010 	add.w	r0, r4, #16
 8003dac:	f000 fed2 	bl	8004b54 <xTaskRemoveFromEventList>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d0e0      	beq.n	8003d76 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8003db4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dbc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	e7d5      	b.n	8003d76 <xQueueGenericReset+0x36>
 8003dca:	bf00      	nop

08003dcc <xQueueGenericCreateStatic>:
	{
 8003dcc:	b530      	push	{r4, r5, lr}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dd4:	b940      	cbnz	r0, 8003de8 <xQueueGenericCreateStatic+0x1c>
 8003dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	e7fe      	b.n	8003de6 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8003de8:	b17b      	cbz	r3, 8003e0a <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dea:	b38a      	cbz	r2, 8003e50 <xQueueGenericCreateStatic+0x84>
 8003dec:	b1b1      	cbz	r1, 8003e1c <xQueueGenericCreateStatic+0x50>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003dee:	2550      	movs	r5, #80	@ 0x50
 8003df0:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003df2:	9d03      	ldr	r5, [sp, #12]
 8003df4:	2d50      	cmp	r5, #80	@ 0x50
 8003df6:	d01a      	beq.n	8003e2e <xQueueGenericCreateStatic+0x62>
 8003df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	e7fe      	b.n	8003e08 <xQueueGenericCreateStatic+0x3c>
 8003e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003e1a:	e7fe      	b.n	8003e1a <xQueueGenericCreateStatic+0x4e>
 8003e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e2c:	e7fe      	b.n	8003e2c <xQueueGenericCreateStatic+0x60>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e2e:	9d03      	ldr	r5, [sp, #12]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e30:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8003e32:	e9c3 010f 	strd	r0, r1, [r3, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e36:	2101      	movs	r1, #1
 8003e38:	f883 1046 	strb.w	r1, [r3, #70]	@ 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e3c:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e3e:	9301      	str	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e40:	f7ff ff7e 	bl	8003d40 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003e44:	9b01      	ldr	r3, [sp, #4]
	}
 8003e46:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 8003e48:	f883 404c 	strb.w	r4, [r3, #76]	@ 0x4c
	}
 8003e4c:	b005      	add	sp, #20
 8003e4e:	bd30      	pop	{r4, r5, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e50:	b939      	cbnz	r1, 8003e62 <xQueueGenericCreateStatic+0x96>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e52:	2250      	movs	r2, #80	@ 0x50
 8003e54:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e56:	9a03      	ldr	r2, [sp, #12]
 8003e58:	2a50      	cmp	r2, #80	@ 0x50
 8003e5a:	d1cd      	bne.n	8003df8 <xQueueGenericCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e5c:	9a03      	ldr	r2, [sp, #12]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e5e:	461a      	mov	r2, r3
 8003e60:	e7e6      	b.n	8003e30 <xQueueGenericCreateStatic+0x64>
 8003e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e72:	e7fe      	b.n	8003e72 <xQueueGenericCreateStatic+0xa6>

08003e74 <xQueueGenericSend>:
{
 8003e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e76:	b085      	sub	sp, #20
 8003e78:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d042      	beq.n	8003f04 <xQueueGenericSend+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e7e:	460e      	mov	r6, r1
 8003e80:	461d      	mov	r5, r3
 8003e82:	4604      	mov	r4, r0
 8003e84:	b391      	cbz	r1, 8003eec <xQueueGenericSend+0x78>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e86:	2d02      	cmp	r5, #2
 8003e88:	d10b      	bne.n	8003ea2 <xQueueGenericSend+0x2e>
 8003e8a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d008      	beq.n	8003ea2 <xQueueGenericSend+0x2e>
 8003e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	e7fe      	b.n	8003ea0 <xQueueGenericSend+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ea2:	f000 feef 	bl	8004c84 <xTaskGetSchedulerState>
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	d035      	beq.n	8003f16 <xQueueGenericSend+0xa2>
		taskENTER_CRITICAL();
 8003eaa:	f001 f9bb 	bl	8005224 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eae:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003eb0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d301      	bcc.n	8003eba <xQueueGenericSend+0x46>
 8003eb6:	2d02      	cmp	r5, #2
 8003eb8:	d139      	bne.n	8003f2e <xQueueGenericSend+0xba>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003eba:	462a      	mov	r2, r5
 8003ebc:	4631      	mov	r1, r6
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7ff febe 	bl	8003c40 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ec4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f040 8092 	bne.w	8003ff0 <xQueueGenericSend+0x17c>
					else if( xYieldRequired != pdFALSE )
 8003ecc:	b148      	cbz	r0, 8003ee2 <xQueueGenericSend+0x6e>
						queueYIELD_IF_USING_PREEMPTION();
 8003ece:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ed6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003ee2:	f001 f9c1 	bl	8005268 <vPortExitCritical>
				return pdPASS;
 8003ee6:	2001      	movs	r0, #1
}
 8003ee8:	b005      	add	sp, #20
 8003eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0c9      	beq.n	8003e86 <xQueueGenericSend+0x12>
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	e7fe      	b.n	8003f02 <xQueueGenericSend+0x8e>
 8003f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003f14:	e7fe      	b.n	8003f14 <xQueueGenericSend+0xa0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f16:	9b01      	ldr	r3, [sp, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0c6      	beq.n	8003eaa <xQueueGenericSend+0x36>
 8003f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	e7fe      	b.n	8003f2c <xQueueGenericSend+0xb8>
 8003f2e:	2000      	movs	r0, #0
		prvLockQueue( pxQueue );
 8003f30:	4607      	mov	r7, r0
 8003f32:	e00d      	b.n	8003f50 <xQueueGenericSend+0xdc>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003f34:	f001 f998 	bl	8005268 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f7ff febb 	bl	8003cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f3e:	f000 fd45 	bl	80049cc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8003f42:	f001 f96f 	bl	8005224 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f46:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003f48:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d3b5      	bcc.n	8003eba <xQueueGenericSend+0x46>
{
 8003f4e:	2001      	movs	r0, #1
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f50:	9a01      	ldr	r2, [sp, #4]
 8003f52:	2a00      	cmp	r2, #0
 8003f54:	d042      	beq.n	8003fdc <xQueueGenericSend+0x168>
				else if( xEntryTimeSet == pdFALSE )
 8003f56:	b3b0      	cbz	r0, 8003fc6 <xQueueGenericSend+0x152>
		taskEXIT_CRITICAL();
 8003f58:	f001 f986 	bl	8005268 <vPortExitCritical>
		vTaskSuspendAll();
 8003f5c:	f000 fbe4 	bl	8004728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f60:	f001 f960 	bl	8005224 <vPortEnterCritical>
 8003f64:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003f68:	2bff      	cmp	r3, #255	@ 0xff
 8003f6a:	bf08      	it	eq
 8003f6c:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8003f70:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8003f74:	2aff      	cmp	r2, #255	@ 0xff
 8003f76:	bf08      	it	eq
 8003f78:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8003f7c:	f001 f974 	bl	8005268 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f80:	a901      	add	r1, sp, #4
 8003f82:	a802      	add	r0, sp, #8
 8003f84:	f000 fe36 	bl	8004bf4 <xTaskCheckForTimeOut>
 8003f88:	bb60      	cbnz	r0, 8003fe4 <xQueueGenericSend+0x170>
	taskENTER_CRITICAL();
 8003f8a:	f001 f94b 	bl	8005224 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f8e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003f90:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d1ce      	bne.n	8003f34 <xQueueGenericSend+0xc0>
	taskEXIT_CRITICAL();
 8003f96:	f001 f967 	bl	8005268 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f9a:	9901      	ldr	r1, [sp, #4]
 8003f9c:	f104 0010 	add.w	r0, r4, #16
 8003fa0:	f000 fda0 	bl	8004ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	f7ff fe85 	bl	8003cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003faa:	f000 fd0f 	bl	80049cc <xTaskResumeAll>
 8003fae:	b970      	cbnz	r0, 8003fce <xQueueGenericSend+0x15a>
					portYIELD_WITHIN_API();
 8003fb0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fb8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	e7bd      	b.n	8003f42 <xQueueGenericSend+0xce>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fc6:	a802      	add	r0, sp, #8
 8003fc8:	f000 fe08 	bl	8004bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fcc:	e7c4      	b.n	8003f58 <xQueueGenericSend+0xe4>
		taskENTER_CRITICAL();
 8003fce:	f001 f929 	bl	8005224 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fd2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003fd4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d9b9      	bls.n	8003f4e <xQueueGenericSend+0xda>
 8003fda:	e76e      	b.n	8003eba <xQueueGenericSend+0x46>
					taskEXIT_CRITICAL();
 8003fdc:	f001 f944 	bl	8005268 <vPortExitCritical>
					return errQUEUE_FULL;
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	e781      	b.n	8003ee8 <xQueueGenericSend+0x74>
			prvUnlockQueue( pxQueue );
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f7ff fe65 	bl	8003cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fea:	f000 fcef 	bl	80049cc <xTaskResumeAll>
			return errQUEUE_FULL;
 8003fee:	e7f7      	b.n	8003fe0 <xQueueGenericSend+0x16c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ff0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003ff4:	f000 fdae 	bl	8004b54 <xTaskRemoveFromEventList>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	f43f af72 	beq.w	8003ee2 <xQueueGenericSend+0x6e>
 8003ffe:	e766      	b.n	8003ece <xQueueGenericSend+0x5a>

08004000 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8004000:	2800      	cmp	r0, #0
 8004002:	d048      	beq.n	8004096 <xQueueGenericSendFromISR+0x96>
{
 8004004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004008:	460e      	mov	r6, r1
 800400a:	4617      	mov	r7, r2
 800400c:	461d      	mov	r5, r3
 800400e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004010:	b321      	cbz	r1, 800405c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004012:	2d02      	cmp	r5, #2
 8004014:	d10b      	bne.n	800402e <xQueueGenericSendFromISR+0x2e>
 8004016:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d008      	beq.n	800402e <xQueueGenericSendFromISR+0x2e>
 800401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	e7fe      	b.n	800402c <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800402e:	f001 fa15 	bl	800545c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004032:	f3ef 8811 	mrs	r8, BASEPRI
 8004036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004046:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004048:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800404a:	429a      	cmp	r2, r3
 800404c:	d312      	bcc.n	8004074 <xQueueGenericSendFromISR+0x74>
 800404e:	2d02      	cmp	r5, #2
 8004050:	d010      	beq.n	8004074 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 8004052:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004054:	f388 8811 	msr	BASEPRI, r8
}
 8004058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800405c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0d7      	beq.n	8004012 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	e7fe      	b.n	8004072 <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004074:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8004076:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800407a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800407c:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 800407e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004080:	4620      	mov	r0, r4
 8004082:	f7ff fddd 	bl	8003c40 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004086:	1c6b      	adds	r3, r5, #1
 8004088:	d00e      	beq.n	80040a8 <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800408a:	1c6b      	adds	r3, r5, #1
 800408c:	b25b      	sxtb	r3, r3
 800408e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8004092:	2001      	movs	r0, #1
 8004094:	e7de      	b.n	8004054 <xQueueGenericSendFromISR+0x54>
 8004096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80040a6:	e7fe      	b.n	80040a6 <xQueueGenericSendFromISR+0xa6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f1      	beq.n	8004092 <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ae:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80040b2:	f000 fd4f 	bl	8004b54 <xTaskRemoveFromEventList>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d0eb      	beq.n	8004092 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 80040ba:	2f00      	cmp	r7, #0
 80040bc:	d0e9      	beq.n	8004092 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040be:	2301      	movs	r3, #1
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	e7e6      	b.n	8004092 <xQueueGenericSendFromISR+0x92>

080040c4 <xQueueReceive>:
{
 80040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c6:	b085      	sub	sp, #20
 80040c8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80040ca:	2800      	cmp	r0, #0
 80040cc:	f000 809d 	beq.w	800420a <xQueueReceive+0x146>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040d0:	460e      	mov	r6, r1
 80040d2:	4604      	mov	r4, r0
 80040d4:	2900      	cmp	r1, #0
 80040d6:	d041      	beq.n	800415c <xQueueReceive+0x98>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040d8:	f000 fdd4 	bl	8004c84 <xTaskGetSchedulerState>
 80040dc:	2800      	cmp	r0, #0
 80040de:	d049      	beq.n	8004174 <xQueueReceive+0xb0>
		taskENTER_CRITICAL();
 80040e0:	f001 f8a0 	bl	8005224 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040e4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040e6:	2d00      	cmp	r5, #0
 80040e8:	d161      	bne.n	80041ae <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 80040ea:	9b01      	ldr	r3, [sp, #4]
 80040ec:	b38b      	cbz	r3, 8004152 <xQueueReceive+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040ee:	a802      	add	r0, sp, #8
 80040f0:	f000 fd74 	bl	8004bdc <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 80040f4:	462f      	mov	r7, r5
		taskEXIT_CRITICAL();
 80040f6:	f001 f8b7 	bl	8005268 <vPortExitCritical>
		vTaskSuspendAll();
 80040fa:	f000 fb15 	bl	8004728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040fe:	f001 f891 	bl	8005224 <vPortEnterCritical>
 8004102:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004106:	2bff      	cmp	r3, #255	@ 0xff
 8004108:	bf08      	it	eq
 800410a:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 800410e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004112:	2bff      	cmp	r3, #255	@ 0xff
 8004114:	bf08      	it	eq
 8004116:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 800411a:	f001 f8a5 	bl	8005268 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800411e:	a901      	add	r1, sp, #4
 8004120:	a802      	add	r0, sp, #8
 8004122:	f000 fd67 	bl	8004bf4 <xTaskCheckForTimeOut>
 8004126:	2800      	cmp	r0, #0
 8004128:	d130      	bne.n	800418c <xQueueReceive+0xc8>
	taskENTER_CRITICAL();
 800412a:	f001 f87b 	bl	8005224 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800412e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004130:	2b00      	cmp	r3, #0
 8004132:	d051      	beq.n	80041d8 <xQueueReceive+0x114>
	taskEXIT_CRITICAL();
 8004134:	f001 f898 	bl	8005268 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004138:	4620      	mov	r0, r4
 800413a:	f7ff fdbb 	bl	8003cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800413e:	f000 fc45 	bl	80049cc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004142:	f001 f86f 	bl	8005224 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004146:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004148:	2d00      	cmp	r5, #0
 800414a:	d130      	bne.n	80041ae <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 800414c:	9b01      	ldr	r3, [sp, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1d1      	bne.n	80040f6 <xQueueReceive+0x32>
					taskEXIT_CRITICAL();
 8004152:	f001 f889 	bl	8005268 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004156:	2000      	movs	r0, #0
}
 8004158:	b005      	add	sp, #20
 800415a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800415c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ba      	beq.n	80040d8 <xQueueReceive+0x14>
 8004162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	e7fe      	b.n	8004172 <xQueueReceive+0xae>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004174:	9b01      	ldr	r3, [sp, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0b2      	beq.n	80040e0 <xQueueReceive+0x1c>
 800417a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	e7fe      	b.n	800418a <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 800418c:	4620      	mov	r0, r4
 800418e:	f7ff fd91 	bl	8003cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004192:	f000 fc1b 	bl	80049cc <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004196:	f001 f845 	bl	8005224 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800419a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0d8      	beq.n	8004152 <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 80041a0:	f001 f862 	bl	8005268 <vPortExitCritical>
		taskENTER_CRITICAL();
 80041a4:	f001 f83e 	bl	8005224 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a8:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041aa:	2d00      	cmp	r5, #0
 80041ac:	d0ce      	beq.n	800414c <xQueueReceive+0x88>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80041b0:	b152      	cbz	r2, 80041c8 <xQueueReceive+0x104>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041b2:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041b4:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041b6:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041b8:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041ba:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041bc:	bf24      	itt	cs
 80041be:	6821      	ldrcs	r1, [r4, #0]
 80041c0:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041c2:	4630      	mov	r0, r6
 80041c4:	f001 fe79 	bl	8005eba <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041c8:	3d01      	subs	r5, #1
 80041ca:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041cc:	6923      	ldr	r3, [r4, #16]
 80041ce:	bb2b      	cbnz	r3, 800421c <xQueueReceive+0x158>
				taskEXIT_CRITICAL();
 80041d0:	f001 f84a 	bl	8005268 <vPortExitCritical>
				return pdPASS;
 80041d4:	2001      	movs	r0, #1
 80041d6:	e7bf      	b.n	8004158 <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 80041d8:	f001 f846 	bl	8005268 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041dc:	9901      	ldr	r1, [sp, #4]
 80041de:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80041e2:	f000 fc7f 	bl	8004ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041e6:	4620      	mov	r0, r4
 80041e8:	f7ff fd64 	bl	8003cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041ec:	f000 fbee 	bl	80049cc <xTaskResumeAll>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d1d7      	bne.n	80041a4 <xQueueReceive+0xe0>
					portYIELD_WITHIN_API();
 80041f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80041f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8004208:	e7cc      	b.n	80041a4 <xQueueReceive+0xe0>
 800420a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800421a:	e7fe      	b.n	800421a <xQueueReceive+0x156>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800421c:	f104 0010 	add.w	r0, r4, #16
 8004220:	f000 fc98 	bl	8004b54 <xTaskRemoveFromEventList>
 8004224:	2800      	cmp	r0, #0
 8004226:	d0d3      	beq.n	80041d0 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 8004228:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800422c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004230:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	e7c8      	b.n	80041d0 <xQueueReceive+0x10c>
 800423e:	bf00      	nop

08004240 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004240:	b410      	push	{r4}
 8004242:	4a0a      	ldr	r2, [pc, #40]	@ (800426c <vQueueAddToRegistry+0x2c>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004244:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004246:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800424a:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
 800424e:	b12c      	cbz	r4, 800425c <vQueueAddToRegistry+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004250:	3301      	adds	r3, #1
 8004252:	2b08      	cmp	r3, #8
 8004254:	d1f7      	bne.n	8004246 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800425a:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800425c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	}
 8004260:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004264:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000f20 	.word	0x20000f20

08004270 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4604      	mov	r4, r0
 8004274:	460e      	mov	r6, r1
 8004276:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004278:	f000 ffd4 	bl	8005224 <vPortEnterCritical>
 800427c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004280:	2bff      	cmp	r3, #255	@ 0xff
 8004282:	bf04      	itt	eq
 8004284:	2300      	moveq	r3, #0
 8004286:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 800428a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800428e:	2bff      	cmp	r3, #255	@ 0xff
 8004290:	bf04      	itt	eq
 8004292:	2300      	moveq	r3, #0
 8004294:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8004298:	f000 ffe6 	bl	8005268 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800429c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800429e:	b123      	cbz	r3, 80042aa <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042a0:	4620      	mov	r0, r4
	}
 80042a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80042a6:	f7ff bd05 	b.w	8003cb4 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042aa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80042ae:	462a      	mov	r2, r5
 80042b0:	4631      	mov	r1, r6
 80042b2:	f000 fc31 	bl	8004b18 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 80042b6:	4620      	mov	r0, r4
	}
 80042b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80042bc:	f7ff bcfa 	b.w	8003cb4 <prvUnlockQueue>

080042c0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c4:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042c6:	f000 ffad 	bl	8005224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042ca:	4a34      	ldr	r2, [pc, #208]	@ (800439c <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80042cc:	4e34      	ldr	r6, [pc, #208]	@ (80043a0 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042d4:	6833      	ldr	r3, [r6, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d031      	beq.n	800433e <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042da:	4c32      	ldr	r4, [pc, #200]	@ (80043a4 <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042dc:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	b333      	cbz	r3, 8004330 <prvAddNewTaskToReadyList+0x70>
 80042e2:	4f31      	ldr	r7, [pc, #196]	@ (80043a8 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042e4:	4a31      	ldr	r2, [pc, #196]	@ (80043ac <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042e6:	4932      	ldr	r1, [pc, #200]	@ (80043b0 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 80042e8:	6813      	ldr	r3, [r2, #0]
 80042ea:	3301      	adds	r3, #1
 80042ec:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042ee:	646b      	str	r3, [r5, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80042f0:	680b      	ldr	r3, [r1, #0]
 80042f2:	4283      	cmp	r3, r0
 80042f4:	bf38      	it	cc
 80042f6:	6008      	strcc	r0, [r1, #0]
 80042f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80042fc:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8004300:	1d29      	adds	r1, r5, #4
 8004302:	f7ff fc63 	bl	8003bcc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004306:	f000 ffaf 	bl	8005268 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	b173      	cbz	r3, 800432c <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800430e:	6832      	ldr	r2, [r6, #0]
 8004310:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004312:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004314:	429a      	cmp	r2, r3
 8004316:	d209      	bcs.n	800432c <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004318:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800431c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004320:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800432c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004330:	6833      	ldr	r3, [r6, #0]
 8004332:	4f1d      	ldr	r7, [pc, #116]	@ (80043a8 <prvAddNewTaskToReadyList+0xe8>)
 8004334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004336:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8004338:	bf98      	it	ls
 800433a:	6035      	strls	r5, [r6, #0]
 800433c:	e7d2      	b.n	80042e4 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800433e:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004340:	6813      	ldr	r3, [r2, #0]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d003      	beq.n	800434e <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004346:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8004348:	4f17      	ldr	r7, [pc, #92]	@ (80043a8 <prvAddNewTaskToReadyList+0xe8>)
 800434a:	4c16      	ldr	r4, [pc, #88]	@ (80043a4 <prvAddNewTaskToReadyList+0xe4>)
 800434c:	e7ca      	b.n	80042e4 <prvAddNewTaskToReadyList+0x24>
 800434e:	4f16      	ldr	r7, [pc, #88]	@ (80043a8 <prvAddNewTaskToReadyList+0xe8>)
 8004350:	463c      	mov	r4, r7
 8004352:	f507 688c 	add.w	r8, r7, #1120	@ 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004356:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004358:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800435a:	f7ff fc27 	bl	8003bac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800435e:	45a0      	cmp	r8, r4
 8004360:	d1f9      	bne.n	8004356 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004362:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 80043c8 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8004366:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 80043cc <prvAddNewTaskToReadyList+0x10c>
 800436a:	4c0e      	ldr	r4, [pc, #56]	@ (80043a4 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 800436c:	4648      	mov	r0, r9
 800436e:	f7ff fc1d 	bl	8003bac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004372:	4640      	mov	r0, r8
 8004374:	f7ff fc1a 	bl	8003bac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004378:	480e      	ldr	r0, [pc, #56]	@ (80043b4 <prvAddNewTaskToReadyList+0xf4>)
 800437a:	f7ff fc17 	bl	8003bac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800437e:	480e      	ldr	r0, [pc, #56]	@ (80043b8 <prvAddNewTaskToReadyList+0xf8>)
 8004380:	f7ff fc14 	bl	8003bac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004384:	480d      	ldr	r0, [pc, #52]	@ (80043bc <prvAddNewTaskToReadyList+0xfc>)
 8004386:	f7ff fc11 	bl	8003bac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800438a:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 800438c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800438e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004392:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <prvAddNewTaskToReadyList+0x104>)
 8004394:	f8c3 8000 	str.w	r8, [r3]
}
 8004398:	e7a4      	b.n	80042e4 <prvAddNewTaskToReadyList+0x24>
 800439a:	bf00      	nop
 800439c:	20000f84 	.word	0x20000f84
 80043a0:	20001458 	.word	0x20001458
 80043a4:	20000f78 	.word	0x20000f78
 80043a8:	20000ff8 	.word	0x20000ff8
 80043ac:	20000f68 	.word	0x20000f68
 80043b0:	20000f7c 	.word	0x20000f7c
 80043b4:	20000fb4 	.word	0x20000fb4
 80043b8:	20000fa0 	.word	0x20000fa0
 80043bc:	20000f88 	.word	0x20000f88
 80043c0:	20000fcc 	.word	0x20000fcc
 80043c4:	20000fc8 	.word	0x20000fc8
 80043c8:	20000fe4 	.word	0x20000fe4
 80043cc:	20000fd0 	.word	0x20000fd0

080043d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043d2:	4b16      	ldr	r3, [pc, #88]	@ (800442c <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043d4:	4e16      	ldr	r6, [pc, #88]	@ (8004430 <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 80043d6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043d8:	6833      	ldr	r3, [r6, #0]
{
 80043da:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043dc:	1d18      	adds	r0, r3, #4
{
 80043de:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043e0:	f7ff fc1a 	bl	8003c18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043e4:	1c6b      	adds	r3, r5, #1
 80043e6:	d017      	beq.n	8004418 <prvAddCurrentTaskToDelayedList+0x48>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043e8:	6833      	ldr	r3, [r6, #0]
 80043ea:	1964      	adds	r4, r4, r5
 80043ec:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80043ee:	d307      	bcc.n	8004400 <prvAddCurrentTaskToDelayedList+0x30>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043f0:	4b10      	ldr	r3, [pc, #64]	@ (8004434 <prvAddCurrentTaskToDelayedList+0x64>)
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043fa:	3104      	adds	r1, #4
 80043fc:	f7ff bbf4 	b.w	8003be8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004400:	4b0d      	ldr	r3, [pc, #52]	@ (8004438 <prvAddCurrentTaskToDelayedList+0x68>)
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	6831      	ldr	r1, [r6, #0]
 8004406:	3104      	adds	r1, #4
 8004408:	f7ff fbee 	bl	8003be8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800440c:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <prvAddCurrentTaskToDelayedList+0x6c>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8004412:	bf88      	it	hi
 8004414:	601c      	strhi	r4, [r3, #0]
}
 8004416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004418:	2f00      	cmp	r7, #0
 800441a:	d0e5      	beq.n	80043e8 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800441c:	6831      	ldr	r1, [r6, #0]
 800441e:	4808      	ldr	r0, [pc, #32]	@ (8004440 <prvAddCurrentTaskToDelayedList+0x70>)
}
 8004420:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004424:	3104      	adds	r1, #4
 8004426:	f7ff bbd1 	b.w	8003bcc <vListInsertEnd>
 800442a:	bf00      	nop
 800442c:	20000f80 	.word	0x20000f80
 8004430:	20001458 	.word	0x20001458
 8004434:	20000fc8 	.word	0x20000fc8
 8004438:	20000fcc 	.word	0x20000fcc
 800443c:	20000f64 	.word	0x20000f64
 8004440:	20000f88 	.word	0x20000f88

08004444 <prvDeleteTCB>:
	{
 8004444:	b510      	push	{r4, lr}
 8004446:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004448:	3054      	adds	r0, #84	@ 0x54
 800444a:	f001 fc7d 	bl	8005d48 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800444e:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8004452:	b163      	cbz	r3, 800446e <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004454:	2b01      	cmp	r3, #1
 8004456:	d013      	beq.n	8004480 <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004458:	2b02      	cmp	r3, #2
 800445a:	d010      	beq.n	800447e <prvDeleteTCB+0x3a>
 800445c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	e7fe      	b.n	800446c <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800446e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004470:	f001 f8e0 	bl	8005634 <vPortFree>
				vPortFree( pxTCB );
 8004474:	4620      	mov	r0, r4
	}
 8004476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800447a:	f001 b8db 	b.w	8005634 <vPortFree>
	}
 800447e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004480:	4620      	mov	r0, r4
	}
 8004482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8004486:	f001 b8d5 	b.w	8005634 <vPortFree>
 800448a:	bf00      	nop

0800448c <prvIdleTask>:
{
 800448c:	b580      	push	{r7, lr}
 800448e:	4c15      	ldr	r4, [pc, #84]	@ (80044e4 <prvIdleTask+0x58>)
 8004490:	4e15      	ldr	r6, [pc, #84]	@ (80044e8 <prvIdleTask+0x5c>)
 8004492:	4d16      	ldr	r5, [pc, #88]	@ (80044ec <prvIdleTask+0x60>)
 8004494:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80044f0 <prvIdleTask+0x64>
				taskYIELD();
 8004498:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 800449c:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
 80044a0:	e011      	b.n	80044c6 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80044a2:	f000 febf 	bl	8005224 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a6:	68f3      	ldr	r3, [r6, #12]
 80044a8:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044aa:	1d38      	adds	r0, r7, #4
 80044ac:	f7ff fbb4 	bl	8003c18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044b0:	682b      	ldr	r3, [r5, #0]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80044bc:	f000 fed4 	bl	8005268 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80044c0:	4638      	mov	r0, r7
 80044c2:	f7ff ffbf 	bl	8004444 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1ea      	bne.n	80044a2 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044cc:	f8da 3000 	ldr.w	r3, [sl]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d9f8      	bls.n	80044c6 <prvIdleTask+0x3a>
				taskYIELD();
 80044d4:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	e7f1      	b.n	80044c6 <prvIdleTask+0x3a>
 80044e2:	bf00      	nop
 80044e4:	20000f9c 	.word	0x20000f9c
 80044e8:	20000fa0 	.word	0x20000fa0
 80044ec:	20000f84 	.word	0x20000f84
 80044f0:	20000ff8 	.word	0x20000ff8

080044f4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80044f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80044fa:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044fe:	0095      	lsls	r5, r2, #2
 8004500:	462a      	mov	r2, r5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004502:	4606      	mov	r6, r0
 8004504:	4689      	mov	r9, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004506:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004508:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800450a:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800450c:	f001 fc03 	bl	8005d16 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004510:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004512:	3d04      	subs	r5, #4
 8004514:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004516:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 800451a:	f1b9 0f00 	cmp.w	r9, #0
 800451e:	d044      	beq.n	80045aa <prvInitialiseNewTask.constprop.0+0xb6>
 8004520:	f109 3cff 	add.w	ip, r9, #4294967295
 8004524:	f109 010f 	add.w	r1, r9, #15
 8004528:	f104 0333 	add.w	r3, r4, #51	@ 0x33
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800452c:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8004530:	f803 2f01 	strb.w	r2, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8004534:	b10a      	cbz	r2, 800453a <prvInitialiseNewTask.constprop.0+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004536:	458c      	cmp	ip, r1
 8004538:	d1f8      	bne.n	800452c <prvInitialiseNewTask.constprop.0+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800453a:	2300      	movs	r3, #0
 800453c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004540:	9b08      	ldr	r3, [sp, #32]
 8004542:	2b37      	cmp	r3, #55	@ 0x37
 8004544:	bf28      	it	cs
 8004546:	2337      	movcs	r3, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8004548:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800454c:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800454e:	64e3      	str	r3, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004550:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8004552:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004556:	4699      	mov	r9, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004558:	f7ff fb34 	bl	8003bc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800455c:	f104 0018 	add.w	r0, r4, #24
 8004560:	f7ff fb30 	bl	8003bc4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004564:	f1c9 0338 	rsb	r3, r9, #56	@ 0x38
 8004568:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800456a:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800456e:	4651      	mov	r1, sl
 8004570:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004572:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004574:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004576:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800457a:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800457e:	f001 fbca 	bl	8005d16 <memset>
 8004582:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <prvInitialiseNewTask.constprop.0+0xbc>)
 8004584:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004586:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004588:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 800458c:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800458e:	463a      	mov	r2, r7
 8004590:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004592:	65e5      	str	r5, [r4, #92]	@ 0x5c
 8004594:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004596:	f000 fe19 	bl	80051cc <pxPortInitialiseStack>
 800459a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800459c:	f1b8 0f00 	cmp.w	r8, #0
 80045a0:	d001      	beq.n	80045a6 <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045a2:	f8c8 4000 	str.w	r4, [r8]
}
 80045a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045aa:	f884 9034 	strb.w	r9, [r4, #52]	@ 0x34
 80045ae:	e7c7      	b.n	8004540 <prvInitialiseNewTask.constprop.0+0x4c>
 80045b0:	2000b190 	.word	0x2000b190

080045b4 <xTaskCreateStatic>:
	{
 80045b4:	b530      	push	{r4, r5, lr}
 80045b6:	b087      	sub	sp, #28
 80045b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80045ba:	b1c4      	cbz	r4, 80045ee <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 80045bc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80045be:	b16d      	cbz	r5, 80045dc <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 80045c0:	25a8      	movs	r5, #168	@ 0xa8
 80045c2:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045c4:	9d05      	ldr	r5, [sp, #20]
 80045c6:	2da8      	cmp	r5, #168	@ 0xa8
 80045c8:	d01a      	beq.n	8004600 <xTaskCreateStatic+0x4c>
 80045ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	e7fe      	b.n	80045da <xTaskCreateStatic+0x26>
 80045dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80045ec:	e7fe      	b.n	80045ec <xTaskCreateStatic+0x38>
 80045ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80045fe:	e7fe      	b.n	80045fe <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004600:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004602:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004604:	2402      	movs	r4, #2
 8004606:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800460a:	ac04      	add	r4, sp, #16
 800460c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8004610:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004612:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004614:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004616:	f7ff ff6d 	bl	80044f4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800461a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800461c:	f7ff fe50 	bl	80042c0 <prvAddNewTaskToReadyList>
	}
 8004620:	9804      	ldr	r0, [sp, #16]
 8004622:	b007      	add	sp, #28
 8004624:	bd30      	pop	{r4, r5, pc}
 8004626:	bf00      	nop

08004628 <xTaskCreate>:
	{
 8004628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800462c:	4607      	mov	r7, r0
 800462e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004630:	0090      	lsls	r0, r2, #2
	{
 8004632:	4615      	mov	r5, r2
 8004634:	4688      	mov	r8, r1
 8004636:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004638:	f000 ff68 	bl	800550c <pvPortMalloc>
			if( pxStack != NULL )
 800463c:	b1f0      	cbz	r0, 800467c <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800463e:	4604      	mov	r4, r0
 8004640:	20a8      	movs	r0, #168	@ 0xa8
 8004642:	f000 ff63 	bl	800550c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004646:	4606      	mov	r6, r0
 8004648:	b1a8      	cbz	r0, 8004676 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800464a:	6304      	str	r4, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800464c:	2400      	movs	r4, #0
 800464e:	f886 40a5 	strb.w	r4, [r6, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004652:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8004654:	9401      	str	r4, [sp, #4]
 8004656:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8004658:	9602      	str	r6, [sp, #8]
 800465a:	464b      	mov	r3, r9
 800465c:	462a      	mov	r2, r5
 800465e:	4641      	mov	r1, r8
 8004660:	4638      	mov	r0, r7
 8004662:	9400      	str	r4, [sp, #0]
 8004664:	f7ff ff46 	bl	80044f4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004668:	4630      	mov	r0, r6
 800466a:	f7ff fe29 	bl	80042c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800466e:	2001      	movs	r0, #1
	}
 8004670:	b005      	add	sp, #20
 8004672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8004676:	4620      	mov	r0, r4
 8004678:	f000 ffdc 	bl	8005634 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800467c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004680:	b005      	add	sp, #20
 8004682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004686:	bf00      	nop

08004688 <vTaskStartScheduler>:
{
 8004688:	b530      	push	{r4, r5, lr}
 800468a:	b089      	sub	sp, #36	@ 0x24
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800468c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800468e:	aa07      	add	r2, sp, #28
 8004690:	a906      	add	r1, sp, #24
 8004692:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004694:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004698:	f7ff fa68 	bl	8003b6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800469c:	e9dd 0305 	ldrd	r0, r3, [sp, #20]
 80046a0:	9a07      	ldr	r2, [sp, #28]
 80046a2:	491a      	ldr	r1, [pc, #104]	@ (800470c <vTaskStartScheduler+0x84>)
 80046a4:	9400      	str	r4, [sp, #0]
 80046a6:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80046aa:	4819      	ldr	r0, [pc, #100]	@ (8004710 <vTaskStartScheduler+0x88>)
 80046ac:	4623      	mov	r3, r4
 80046ae:	f7ff ff81 	bl	80045b4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80046b2:	b170      	cbz	r0, 80046d2 <vTaskStartScheduler+0x4a>
			xReturn = xTimerCreateTimerTask();
 80046b4:	f000 fb70 	bl	8004d98 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80046b8:	2801      	cmp	r0, #1
 80046ba:	d00c      	beq.n	80046d6 <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046bc:	3001      	adds	r0, #1
 80046be:	d108      	bne.n	80046d2 <vTaskStartScheduler+0x4a>
 80046c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	e7fe      	b.n	80046d0 <vTaskStartScheduler+0x48>
}
 80046d2:	b009      	add	sp, #36	@ 0x24
 80046d4:	bd30      	pop	{r4, r5, pc}
 80046d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <vTaskStartScheduler+0x8c>)
 80046e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004718 <vTaskStartScheduler+0x90>)
 80046ea:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80046ec:	490b      	ldr	r1, [pc, #44]	@ (800471c <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046ee:	3354      	adds	r3, #84	@ 0x54
 80046f0:	6013      	str	r3, [r2, #0]
		xSchedulerRunning = pdTRUE;
 80046f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004720 <vTaskStartScheduler+0x98>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <vTaskStartScheduler+0x9c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80046f6:	f04f 35ff 	mov.w	r5, #4294967295
 80046fa:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80046fc:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046fe:	601c      	str	r4, [r3, #0]
}
 8004700:	b009      	add	sp, #36	@ 0x24
 8004702:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004706:	f000 be1f 	b.w	8005348 <xPortStartScheduler>
 800470a:	bf00      	nop
 800470c:	08006b10 	.word	0x08006b10
 8004710:	0800448d 	.word	0x0800448d
 8004714:	20001458 	.word	0x20001458
 8004718:	20000108 	.word	0x20000108
 800471c:	20000f64 	.word	0x20000f64
 8004720:	20000f78 	.word	0x20000f78
 8004724:	20000f80 	.word	0x20000f80

08004728 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004728:	4a02      	ldr	r2, [pc, #8]	@ (8004734 <vTaskSuspendAll+0xc>)
 800472a:	6813      	ldr	r3, [r2, #0]
 800472c:	3301      	adds	r3, #1
 800472e:	6013      	str	r3, [r2, #0]
}
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000f60 	.word	0x20000f60

08004738 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004738:	4b01      	ldr	r3, [pc, #4]	@ (8004740 <xTaskGetTickCount+0x8>)
 800473a:	6818      	ldr	r0, [r3, #0]
}
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	20000f80 	.word	0x20000f80

08004744 <xTaskIncrementTick>:
{
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004748:	4b51      	ldr	r3, [pc, #324]	@ (8004890 <xTaskIncrementTick+0x14c>)
 800474a:	681b      	ldr	r3, [r3, #0]
{
 800474c:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474e:	2b00      	cmp	r3, #0
 8004750:	d153      	bne.n	80047fa <xTaskIncrementTick+0xb6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004752:	4b50      	ldr	r3, [pc, #320]	@ (8004894 <xTaskIncrementTick+0x150>)
 8004754:	681e      	ldr	r6, [r3, #0]
 8004756:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8004758:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800475a:	2e00      	cmp	r6, #0
 800475c:	d03f      	beq.n	80047de <xTaskIncrementTick+0x9a>
 800475e:	4b4e      	ldr	r3, [pc, #312]	@ (8004898 <xTaskIncrementTick+0x154>)
 8004760:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004762:	9b01      	ldr	r3, [sp, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	429e      	cmp	r6, r3
 8004768:	d352      	bcc.n	8004810 <xTaskIncrementTick+0xcc>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800476a:	4f4c      	ldr	r7, [pc, #304]	@ (800489c <xTaskIncrementTick+0x158>)
 800476c:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 80048b0 <xTaskIncrementTick+0x16c>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	f8df a140 	ldr.w	sl, [pc, #320]	@ 80048b4 <xTaskIncrementTick+0x170>
 8004776:	681d      	ldr	r5, [r3, #0]
 8004778:	2d00      	cmp	r5, #0
 800477a:	d068      	beq.n	800484e <xTaskIncrementTick+0x10a>
					prvAddTaskToReadyList( pxTCB );
 800477c:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 80048b8 <xTaskIncrementTick+0x174>
BaseType_t xSwitchRequired = pdFALSE;
 8004780:	2500      	movs	r5, #0
 8004782:	e020      	b.n	80047c6 <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004784:	f7ff fa48 	bl	8003c18 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004788:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800478a:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800478e:	b10b      	cbz	r3, 8004794 <xTaskIncrementTick+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004790:	f7ff fa42 	bl	8003c18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004794:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004796:	f8d8 2000 	ldr.w	r2, [r8]
 800479a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800479e:	4293      	cmp	r3, r2
 80047a0:	4659      	mov	r1, fp
 80047a2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80047a6:	bf88      	it	hi
 80047a8:	f8c8 3000 	strhi.w	r3, [r8]
 80047ac:	f7ff fa0e 	bl	8003bcc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047b0:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b4:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80047b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ba:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 80047bc:	4291      	cmp	r1, r2
 80047be:	bf28      	it	cs
 80047c0:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d043      	beq.n	800484e <xTaskIncrementTick+0x10a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047cc:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ce:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
 80047d2:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047d4:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
 80047d6:	d2d5      	bcs.n	8004784 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 80047d8:	9a01      	ldr	r2, [sp, #4]
 80047da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047dc:	e01d      	b.n	800481a <xTaskIncrementTick+0xd6>
			taskSWITCH_DELAYED_LISTS();
 80047de:	4b2f      	ldr	r3, [pc, #188]	@ (800489c <xTaskIncrementTick+0x158>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	2a00      	cmp	r2, #0
 80047e6:	d037      	beq.n	8004858 <xTaskIncrementTick+0x114>
 80047e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	e7fe      	b.n	80047f8 <xTaskIncrementTick+0xb4>
		++xPendedTicks;
 80047fa:	4a29      	ldr	r2, [pc, #164]	@ (80048a0 <xTaskIncrementTick+0x15c>)
 80047fc:	6813      	ldr	r3, [r2, #0]
 80047fe:	3301      	adds	r3, #1
 8004800:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
 8004802:	f7fb fecd 	bl	80005a0 <vApplicationTickHook>
BaseType_t xSwitchRequired = pdFALSE;
 8004806:	2500      	movs	r5, #0
}
 8004808:	4628      	mov	r0, r5
 800480a:	b003      	add	sp, #12
 800480c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004810:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 80048b0 <xTaskIncrementTick+0x16c>
 8004814:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80048b4 <xTaskIncrementTick+0x170>
BaseType_t xSwitchRequired = pdFALSE;
 8004818:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800481a:	f8da 3000 	ldr.w	r3, [sl]
			if( xPendedTicks == ( TickType_t ) 0 )
 800481e:	4920      	ldr	r1, [pc, #128]	@ (80048a0 <xTaskIncrementTick+0x15c>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004822:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xPendedTicks == ( TickType_t ) 0 )
 800482c:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800482e:	2a02      	cmp	r2, #2
 8004830:	bf28      	it	cs
 8004832:	2501      	movcs	r5, #1
			if( xPendedTicks == ( TickType_t ) 0 )
 8004834:	b143      	cbz	r3, 8004848 <xTaskIncrementTick+0x104>
			if( xYieldPending != pdFALSE )
 8004836:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <xTaskIncrementTick+0x160>)
 8004838:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800483a:	2b00      	cmp	r3, #0
 800483c:	bf18      	it	ne
 800483e:	2501      	movne	r5, #1
}
 8004840:	4628      	mov	r0, r5
 8004842:	b003      	add	sp, #12
 8004844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vApplicationTickHook();
 8004848:	f7fb feaa 	bl	80005a0 <vApplicationTickHook>
 800484c:	e7f3      	b.n	8004836 <xTaskIncrementTick+0xf2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800484e:	9a01      	ldr	r2, [sp, #4]
 8004850:	f04f 33ff 	mov.w	r3, #4294967295
 8004854:	6013      	str	r3, [r2, #0]
					break;
 8004856:	e7e0      	b.n	800481a <xTaskIncrementTick+0xd6>
			taskSWITCH_DELAYED_LISTS();
 8004858:	4a13      	ldr	r2, [pc, #76]	@ (80048a8 <xTaskIncrementTick+0x164>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	6811      	ldr	r1, [r2, #0]
 800485e:	6019      	str	r1, [r3, #0]
 8004860:	4912      	ldr	r1, [pc, #72]	@ (80048ac <xTaskIncrementTick+0x168>)
 8004862:	6010      	str	r0, [r2, #0]
 8004864:	680a      	ldr	r2, [r1, #0]
 8004866:	3201      	adds	r2, #1
 8004868:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	b932      	cbnz	r2, 800487e <xTaskIncrementTick+0x13a>
		xNextTaskUnblockTime = portMAX_DELAY;
 8004870:	4b09      	ldr	r3, [pc, #36]	@ (8004898 <xTaskIncrementTick+0x154>)
 8004872:	9301      	str	r3, [sp, #4]
 8004874:	461a      	mov	r2, r3
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	e771      	b.n	8004762 <xTaskIncrementTick+0x1e>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004880:	4a05      	ldr	r2, [pc, #20]	@ (8004898 <xTaskIncrementTick+0x154>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004882:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004884:	9201      	str	r2, [sp, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	6013      	str	r3, [r2, #0]
}
 800488c:	e769      	b.n	8004762 <xTaskIncrementTick+0x1e>
 800488e:	bf00      	nop
 8004890:	20000f60 	.word	0x20000f60
 8004894:	20000f80 	.word	0x20000f80
 8004898:	20000f64 	.word	0x20000f64
 800489c:	20000fcc 	.word	0x20000fcc
 80048a0:	20000f74 	.word	0x20000f74
 80048a4:	20000f70 	.word	0x20000f70
 80048a8:	20000fc8 	.word	0x20000fc8
 80048ac:	20000f6c 	.word	0x20000f6c
 80048b0:	20000ff8 	.word	0x20000ff8
 80048b4:	20001458 	.word	0x20001458
 80048b8:	20000f7c 	.word	0x20000f7c

080048bc <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80048bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 80048c0:	f000 fcb0 	bl	8005224 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80048c4:	4b37      	ldr	r3, [pc, #220]	@ (80049a4 <xTaskResumeAll.part.0+0xe8>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	3a01      	subs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d159      	bne.n	8004986 <xTaskResumeAll.part.0+0xca>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048d2:	4b35      	ldr	r3, [pc, #212]	@ (80049a8 <xTaskResumeAll.part.0+0xec>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d055      	beq.n	8004986 <xTaskResumeAll.part.0+0xca>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048da:	4d34      	ldr	r5, [pc, #208]	@ (80049ac <xTaskResumeAll.part.0+0xf0>)
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d05c      	beq.n	800499c <xTaskResumeAll.part.0+0xe0>
 80048e2:	4e33      	ldr	r6, [pc, #204]	@ (80049b0 <xTaskResumeAll.part.0+0xf4>)
 80048e4:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 80049c4 <xTaskResumeAll.part.0+0x108>
 80048e8:	4f32      	ldr	r7, [pc, #200]	@ (80049b4 <xTaskResumeAll.part.0+0xf8>)
 80048ea:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 80049c8 <xTaskResumeAll.part.0+0x10c>
						xYieldPending = pdTRUE;
 80048ee:	f04f 0a01 	mov.w	sl, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f2:	68eb      	ldr	r3, [r5, #12]
 80048f4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048f6:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048fa:	f104 0018 	add.w	r0, r4, #24
 80048fe:	f7ff f98b 	bl	8003c18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004902:	4658      	mov	r0, fp
 8004904:	f7ff f988 	bl	8003c18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004908:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800490a:	6832      	ldr	r2, [r6, #0]
 800490c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8004910:	4293      	cmp	r3, r2
 8004912:	4659      	mov	r1, fp
 8004914:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004918:	bf88      	it	hi
 800491a:	6033      	strhi	r3, [r6, #0]
 800491c:	f7ff f956 	bl	8003bcc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004926:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8004928:	bf28      	it	cs
 800492a:	f8c9 a000 	strcs.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800492e:	682b      	ldr	r3, [r5, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1de      	bne.n	80048f2 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004934:	4b20      	ldr	r3, [pc, #128]	@ (80049b8 <xTaskResumeAll.part.0+0xfc>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	b352      	cbz	r2, 8004992 <xTaskResumeAll.part.0+0xd6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800493c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800493e:	4b1f      	ldr	r3, [pc, #124]	@ (80049bc <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004940:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004942:	68d2      	ldr	r2, [r2, #12]
 8004944:	6852      	ldr	r2, [r2, #4]
 8004946:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004948:	4e1d      	ldr	r6, [pc, #116]	@ (80049c0 <xTaskResumeAll.part.0+0x104>)
 800494a:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800494c:	b144      	cbz	r4, 8004960 <xTaskResumeAll.part.0+0xa4>
								xYieldPending = pdTRUE;
 800494e:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004950:	f7ff fef8 	bl	8004744 <xTaskIncrementTick>
 8004954:	b108      	cbz	r0, 800495a <xTaskResumeAll.part.0+0x9e>
								xYieldPending = pdTRUE;
 8004956:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800495a:	3c01      	subs	r4, #1
 800495c:	d1f8      	bne.n	8004950 <xTaskResumeAll.part.0+0x94>
						xPendedTicks = 0;
 800495e:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8004960:	f8d9 3000 	ldr.w	r3, [r9]
 8004964:	b17b      	cbz	r3, 8004986 <xTaskResumeAll.part.0+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8004966:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800496a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800496e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800497a:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800497c:	f000 fc74 	bl	8005268 <vPortExitCritical>
}
 8004980:	4620      	mov	r0, r4
 8004982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8004986:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004988:	f000 fc6e 	bl	8005268 <vPortExitCritical>
}
 800498c:	4620      	mov	r0, r4
 800498e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8004992:	4b0a      	ldr	r3, [pc, #40]	@ (80049bc <xTaskResumeAll.part.0+0x100>)
 8004994:	f04f 32ff 	mov.w	r2, #4294967295
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e7d5      	b.n	8004948 <xTaskResumeAll.part.0+0x8c>
 800499c:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 80049c8 <xTaskResumeAll.part.0+0x10c>
 80049a0:	e7d2      	b.n	8004948 <xTaskResumeAll.part.0+0x8c>
 80049a2:	bf00      	nop
 80049a4:	20000f60 	.word	0x20000f60
 80049a8:	20000f84 	.word	0x20000f84
 80049ac:	20000fb4 	.word	0x20000fb4
 80049b0:	20000f7c 	.word	0x20000f7c
 80049b4:	20001458 	.word	0x20001458
 80049b8:	20000fcc 	.word	0x20000fcc
 80049bc:	20000f64 	.word	0x20000f64
 80049c0:	20000f74 	.word	0x20000f74
 80049c4:	20000ff8 	.word	0x20000ff8
 80049c8:	20000f70 	.word	0x20000f70

080049cc <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80049cc:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <xTaskResumeAll+0x1c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	b943      	cbnz	r3, 80049e4 <xTaskResumeAll+0x18>
 80049d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	e7fe      	b.n	80049e2 <xTaskResumeAll+0x16>
 80049e4:	f7ff bf6a 	b.w	80048bc <xTaskResumeAll.part.0>
 80049e8:	20000f60 	.word	0x20000f60

080049ec <vTaskDelay>:
	{
 80049ec:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049ee:	b950      	cbnz	r0, 8004a06 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80049f0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80049f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	f3bf 8f6f 	isb	sy
	}
 8004a04:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004a06:	4c10      	ldr	r4, [pc, #64]	@ (8004a48 <vTaskDelay+0x5c>)
 8004a08:	6821      	ldr	r1, [r4, #0]
 8004a0a:	b141      	cbz	r1, 8004a1e <vTaskDelay+0x32>
 8004a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	e7fe      	b.n	8004a1c <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a24:	f7ff fcd4 	bl	80043d0 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	b943      	cbnz	r3, 8004a3e <vTaskDelay+0x52>
 8004a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	e7fe      	b.n	8004a3c <vTaskDelay+0x50>
 8004a3e:	f7ff ff3d 	bl	80048bc <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d0d4      	beq.n	80049f0 <vTaskDelay+0x4>
	}
 8004a46:	bd10      	pop	{r4, pc}
 8004a48:	20000f60 	.word	0x20000f60

08004a4c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8004acc <vTaskSwitchContext+0x80>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	b11b      	cbz	r3, 8004a5a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8004a52:	4b1f      	ldr	r3, [pc, #124]	@ (8004ad0 <vTaskSwitchContext+0x84>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8004a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad0 <vTaskSwitchContext+0x84>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a5c:	491d      	ldr	r1, [pc, #116]	@ (8004ad4 <vTaskSwitchContext+0x88>)
{
 8004a5e:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a60:	4c1d      	ldr	r4, [pc, #116]	@ (8004ad8 <vTaskSwitchContext+0x8c>)
		xYieldPending = pdFALSE;
 8004a62:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004a6a:	0092      	lsls	r2, r2, #2
 8004a6c:	0098      	lsls	r0, r3, #2
 8004a6e:	588a      	ldr	r2, [r1, r2]
 8004a70:	b942      	cbnz	r2, 8004a84 <vTaskSwitchContext+0x38>
 8004a72:	b313      	cbz	r3, 8004aba <vTaskSwitchContext+0x6e>
 8004a74:	3b01      	subs	r3, #1
 8004a76:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004a7a:	0098      	lsls	r0, r3, #2
 8004a7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004a80:	2a00      	cmp	r2, #0
 8004a82:	d0f6      	beq.n	8004a72 <vTaskSwitchContext+0x26>
 8004a84:	4418      	add	r0, r3
 8004a86:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 8004a8a:	4662      	mov	r2, ip
 8004a8c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8004a90:	6849      	ldr	r1, [r1, #4]
 8004a92:	f8cc 1004 	str.w	r1, [ip, #4]
 8004a96:	3208      	adds	r2, #8
 8004a98:	4291      	cmp	r1, r2
 8004a9a:	bf08      	it	eq
 8004a9c:	6849      	ldreq	r1, [r1, #4]
 8004a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8004adc <vTaskSwitchContext+0x90>)
 8004aa0:	bf08      	it	eq
 8004aa2:	f8cc 1004 	streq.w	r1, [ip, #4]
 8004aa6:	68c9      	ldr	r1, [r1, #12]
 8004aa8:	6011      	str	r1, [r2, #0]
 8004aaa:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004aac:	6813      	ldr	r3, [r2, #0]
 8004aae:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae0 <vTaskSwitchContext+0x94>)
}
 8004ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ab4:	3354      	adds	r3, #84	@ 0x54
 8004ab6:	6013      	str	r3, [r2, #0]
}
 8004ab8:	4770      	bx	lr
 8004aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aca:	e7fe      	b.n	8004aca <vTaskSwitchContext+0x7e>
 8004acc:	20000f60 	.word	0x20000f60
 8004ad0:	20000f70 	.word	0x20000f70
 8004ad4:	20000ff8 	.word	0x20000ff8
 8004ad8:	20000f7c 	.word	0x20000f7c
 8004adc:	20001458 	.word	0x20001458
 8004ae0:	20000108 	.word	0x20000108

08004ae4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8004ae4:	b160      	cbz	r0, 8004b00 <vTaskPlaceOnEventList+0x1c>
{
 8004ae6:	b510      	push	{r4, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b14 <vTaskPlaceOnEventList+0x30>)
 8004aea:	460c      	mov	r4, r1
 8004aec:	6819      	ldr	r1, [r3, #0]
 8004aee:	3118      	adds	r1, #24
 8004af0:	f7ff f87a 	bl	8003be8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004af4:	4620      	mov	r0, r4
 8004af6:	2101      	movs	r1, #1
}
 8004af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004afc:	f7ff bc68 	b.w	80043d0 <prvAddCurrentTaskToDelayedList>
 8004b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8004b10:	e7fe      	b.n	8004b10 <vTaskPlaceOnEventList+0x2c>
 8004b12:	bf00      	nop
 8004b14:	20001458 	.word	0x20001458

08004b18 <vTaskPlaceOnEventListRestricted>:
	{
 8004b18:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8004b1a:	b180      	cbz	r0, 8004b3e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b50 <vTaskPlaceOnEventListRestricted+0x38>)
 8004b1e:	460d      	mov	r5, r1
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	4614      	mov	r4, r2
 8004b24:	3118      	adds	r1, #24
 8004b26:	f7ff f851 	bl	8003bcc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8004b2a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	bf0c      	ite	eq
 8004b30:	4628      	moveq	r0, r5
 8004b32:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8004b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b3a:	f7ff bc49 	b.w	80043d0 <prvAddCurrentTaskToDelayedList>
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8004b4e:	e7fe      	b.n	8004b4e <vTaskPlaceOnEventListRestricted+0x36>
 8004b50:	20001458 	.word	0x20001458

08004b54 <xTaskRemoveFromEventList>:
{
 8004b54:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b56:	68c3      	ldr	r3, [r0, #12]
 8004b58:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004b5a:	b34c      	cbz	r4, 8004bb0 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b5c:	f104 0518 	add.w	r5, r4, #24
 8004b60:	4628      	mov	r0, r5
 8004b62:	f7ff f859 	bl	8003c18 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b66:	4b17      	ldr	r3, [pc, #92]	@ (8004bc4 <xTaskRemoveFromEventList+0x70>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	b173      	cbz	r3, 8004b8a <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b6c:	4816      	ldr	r0, [pc, #88]	@ (8004bc8 <xTaskRemoveFromEventList+0x74>)
 8004b6e:	4629      	mov	r1, r5
 8004b70:	f7ff f82c 	bl	8003bcc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b74:	4b15      	ldr	r3, [pc, #84]	@ (8004bcc <xTaskRemoveFromEventList+0x78>)
 8004b76:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7c:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004b7e:	bf83      	ittte	hi
 8004b80:	4b13      	ldrhi	r3, [pc, #76]	@ (8004bd0 <xTaskRemoveFromEventList+0x7c>)
 8004b82:	2001      	movhi	r0, #1
 8004b84:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8004b86:	2000      	movls	r0, #0
}
 8004b88:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b8a:	1d25      	adds	r5, r4, #4
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f7ff f843 	bl	8003c18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b92:	4a10      	ldr	r2, [pc, #64]	@ (8004bd4 <xTaskRemoveFromEventList+0x80>)
 8004b94:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004b96:	6811      	ldr	r1, [r2, #0]
 8004b98:	480f      	ldr	r0, [pc, #60]	@ (8004bd8 <xTaskRemoveFromEventList+0x84>)
 8004b9a:	428b      	cmp	r3, r1
 8004b9c:	bf88      	it	hi
 8004b9e:	6013      	strhi	r3, [r2, #0]
 8004ba0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004baa:	f7ff f80f 	bl	8003bcc <vListInsertEnd>
 8004bae:	e7e1      	b.n	8004b74 <xTaskRemoveFromEventList+0x20>
 8004bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8004bc0:	e7fe      	b.n	8004bc0 <xTaskRemoveFromEventList+0x6c>
 8004bc2:	bf00      	nop
 8004bc4:	20000f60 	.word	0x20000f60
 8004bc8:	20000fb4 	.word	0x20000fb4
 8004bcc:	20001458 	.word	0x20001458
 8004bd0:	20000f70 	.word	0x20000f70
 8004bd4:	20000f7c 	.word	0x20000f7c
 8004bd8:	20000ff8 	.word	0x20000ff8

08004bdc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bdc:	4a03      	ldr	r2, [pc, #12]	@ (8004bec <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bde:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004be0:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	e9c0 2300 	strd	r2, r3, [r0]
}
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000f6c 	.word	0x20000f6c
 8004bf0:	20000f80 	.word	0x20000f80

08004bf4 <xTaskCheckForTimeOut>:
{
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8004bf6:	b308      	cbz	r0, 8004c3c <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 8004bf8:	460d      	mov	r5, r1
 8004bfa:	b1b1      	cbz	r1, 8004c2a <xTaskCheckForTimeOut+0x36>
 8004bfc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004bfe:	f000 fb11 	bl	8005224 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8004c02:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8004c04:	4a1a      	ldr	r2, [pc, #104]	@ (8004c70 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 8004c06:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8004c08:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8004c0a:	d02c      	beq.n	8004c66 <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c0c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8004c74 <xTaskCheckForTimeOut+0x80>
 8004c10:	e9d4 6000 	ldrd	r6, r0, [r4]
 8004c14:	f8dc 7000 	ldr.w	r7, [ip]
 8004c18:	42be      	cmp	r6, r7
 8004c1a:	d018      	beq.n	8004c4e <xTaskCheckForTimeOut+0x5a>
 8004c1c:	4288      	cmp	r0, r1
 8004c1e:	d816      	bhi.n	8004c4e <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8004c20:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8004c22:	f000 fb21 	bl	8005268 <vPortExitCritical>
}
 8004c26:	4620      	mov	r0, r4
 8004c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8004c3a:	e7fe      	b.n	8004c3a <xTaskCheckForTimeOut+0x46>
 8004c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8004c4c:	e7fe      	b.n	8004c4c <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c4e:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c52:	4573      	cmp	r3, lr
 8004c54:	d909      	bls.n	8004c6a <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 8004c56:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c58:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c5c:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8004c5e:	4403      	add	r3, r0
 8004c60:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c62:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 8004c66:	2400      	movs	r4, #0
 8004c68:	e7db      	b.n	8004c22 <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8004c6e:	e7d7      	b.n	8004c20 <xTaskCheckForTimeOut+0x2c>
 8004c70:	20000f80 	.word	0x20000f80
 8004c74:	20000f6c 	.word	0x20000f6c

08004c78 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004c78:	4b01      	ldr	r3, [pc, #4]	@ (8004c80 <vTaskMissedYield+0x8>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
}
 8004c7e:	4770      	bx	lr
 8004c80:	20000f70 	.word	0x20000f70

08004c84 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <xTaskGetSchedulerState+0x18>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	b133      	cbz	r3, 8004c98 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <xTaskGetSchedulerState+0x1c>)
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	fab0 f080 	clz	r0, r0
 8004c92:	0940      	lsrs	r0, r0, #5
 8004c94:	0040      	lsls	r0, r0, #1
 8004c96:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c98:	2001      	movs	r0, #1
	}
 8004c9a:	4770      	bx	lr
 8004c9c:	20000f78 	.word	0x20000f78
 8004ca0:	20000f60 	.word	0x20000f60

08004ca4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8004ca4:	b308      	cbz	r0, 8004cea <xTaskPriorityDisinherit+0x46>
	{
 8004ca6:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d20 <xTaskPriorityDisinherit+0x7c>)
 8004caa:	681c      	ldr	r4, [r3, #0]
 8004cac:	4284      	cmp	r4, r0
 8004cae:	d008      	beq.n	8004cc2 <xTaskPriorityDisinherit+0x1e>
 8004cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	e7fe      	b.n	8004cc0 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cc2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004cc4:	b143      	cbz	r3, 8004cd8 <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cc6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004cc8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8004cca:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ccc:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004cce:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cd0:	d000      	beq.n	8004cd4 <xTaskPriorityDisinherit+0x30>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cd2:	b163      	cbz	r3, 8004cee <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8004cd4:	2000      	movs	r0, #0
	}
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8004ce8:	e7fe      	b.n	8004ce8 <xTaskPriorityDisinherit+0x44>
	BaseType_t xReturn = pdFALSE;
 8004cea:	2000      	movs	r0, #0
	}
 8004cec:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cee:	1d25      	adds	r5, r4, #4
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f7fe ff91 	bl	8003c18 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cf6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 8004cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8004d24 <xTaskPriorityDisinherit+0x80>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cfa:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfc:	f1c3 0038 	rsb	r0, r3, #56	@ 0x38
 8004d00:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d02:	6810      	ldr	r0, [r2, #0]
 8004d04:	4283      	cmp	r3, r0
 8004d06:	4808      	ldr	r0, [pc, #32]	@ (8004d28 <xTaskPriorityDisinherit+0x84>)
 8004d08:	bf88      	it	hi
 8004d0a:	6013      	strhi	r3, [r2, #0]
 8004d0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d10:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004d14:	4629      	mov	r1, r5
 8004d16:	f7fe ff59 	bl	8003bcc <vListInsertEnd>
					xReturn = pdTRUE;
 8004d1a:	2001      	movs	r0, #1
	}
 8004d1c:	bd38      	pop	{r3, r4, r5, pc}
 8004d1e:	bf00      	nop
 8004d20:	20001458 	.word	0x20001458
 8004d24:	20000f7c 	.word	0x20000f7c
 8004d28:	20000ff8 	.word	0x20000ff8

08004d2c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8004d2e:	4c12      	ldr	r4, [pc, #72]	@ (8004d78 <prvCheckForValidListAndQueue+0x4c>)
{
 8004d30:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8004d32:	f000 fa77 	bl	8005224 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8004d36:	6825      	ldr	r5, [r4, #0]
 8004d38:	b125      	cbz	r5, 8004d44 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8004d3a:	b003      	add	sp, #12
 8004d3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8004d40:	f000 ba92 	b.w	8005268 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8004d44:	4f0d      	ldr	r7, [pc, #52]	@ (8004d7c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8004d46:	4e0e      	ldr	r6, [pc, #56]	@ (8004d80 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8004d48:	4638      	mov	r0, r7
 8004d4a:	f7fe ff2f 	bl	8003bac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f7fe ff2c 	bl	8003bac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d54:	4a0b      	ldr	r2, [pc, #44]	@ (8004d84 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d56:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8004d58:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8004d88 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d8c <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8004d5e:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d60:	2110      	movs	r1, #16
 8004d62:	4a0b      	ldr	r2, [pc, #44]	@ (8004d90 <prvCheckForValidListAndQueue+0x64>)
 8004d64:	200a      	movs	r0, #10
 8004d66:	f7ff f831 	bl	8003dcc <xQueueGenericCreateStatic>
 8004d6a:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d0e4      	beq.n	8004d3a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d70:	4908      	ldr	r1, [pc, #32]	@ (8004d94 <prvCheckForValidListAndQueue+0x68>)
 8004d72:	f7ff fa65 	bl	8004240 <vQueueAddToRegistry>
 8004d76:	e7e0      	b.n	8004d3a <prvCheckForValidListAndQueue+0xe>
 8004d78:	20001554 	.word	0x20001554
 8004d7c:	20001574 	.word	0x20001574
 8004d80:	20001560 	.word	0x20001560
 8004d84:	2000155c 	.word	0x2000155c
 8004d88:	20001558 	.word	0x20001558
 8004d8c:	2000145c 	.word	0x2000145c
 8004d90:	200014ac 	.word	0x200014ac
 8004d94:	08006b18 	.word	0x08006b18

08004d98 <xTimerCreateTimerTask>:
{
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8004d9c:	f7ff ffc6 	bl	8004d2c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8004da0:	4b12      	ldr	r3, [pc, #72]	@ (8004dec <xTimerCreateTimerTask+0x54>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	b1cb      	cbz	r3, 8004dda <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004da6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004da8:	aa07      	add	r2, sp, #28
 8004daa:	a906      	add	r1, sp, #24
 8004dac:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004dae:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004db2:	f7fe feeb 	bl	8003b8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004db6:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	9a07      	ldr	r2, [sp, #28]
 8004dc4:	490a      	ldr	r1, [pc, #40]	@ (8004df0 <xTimerCreateTimerTask+0x58>)
 8004dc6:	480b      	ldr	r0, [pc, #44]	@ (8004df4 <xTimerCreateTimerTask+0x5c>)
 8004dc8:	4623      	mov	r3, r4
 8004dca:	f7ff fbf3 	bl	80045b4 <xTaskCreateStatic>
 8004dce:	4b0a      	ldr	r3, [pc, #40]	@ (8004df8 <xTimerCreateTimerTask+0x60>)
 8004dd0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8004dd2:	b110      	cbz	r0, 8004dda <xTimerCreateTimerTask+0x42>
}
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	b008      	add	sp, #32
 8004dd8:	bd10      	pop	{r4, pc}
 8004dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8004dea:	e7fe      	b.n	8004dea <xTimerCreateTimerTask+0x52>
 8004dec:	20001554 	.word	0x20001554
 8004df0:	08006b20 	.word	0x08006b20
 8004df4:	08004ee9 	.word	0x08004ee9
 8004df8:	20001550 	.word	0x20001550

08004dfc <xTimerGenericCommand>:
	configASSERT( xTimer );
 8004dfc:	b1c0      	cbz	r0, 8004e30 <xTimerGenericCommand+0x34>
{
 8004dfe:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8004e00:	4d18      	ldr	r5, [pc, #96]	@ (8004e64 <xTimerGenericCommand+0x68>)
 8004e02:	682c      	ldr	r4, [r5, #0]
{
 8004e04:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8004e06:	b184      	cbz	r4, 8004e2a <xTimerGenericCommand+0x2e>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e08:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 8004e0a:	e9cd 1200 	strd	r1, r2, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004e0e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e10:	dc17      	bgt.n	8004e42 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e12:	f7ff ff37 	bl	8004c84 <xTaskGetSchedulerState>
 8004e16:	2802      	cmp	r0, #2
 8004e18:	d01c      	beq.n	8004e54 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	6828      	ldr	r0, [r5, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	4669      	mov	r1, sp
 8004e22:	f7ff f827 	bl	8003e74 <xQueueGenericSend>
}
 8004e26:	b005      	add	sp, #20
 8004e28:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8004e2a:	4620      	mov	r0, r4
}
 8004e2c:	b005      	add	sp, #20
 8004e2e:	bd30      	pop	{r4, r5, pc}
 8004e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8004e40:	e7fe      	b.n	8004e40 <xTimerGenericCommand+0x44>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e42:	469c      	mov	ip, r3
 8004e44:	4662      	mov	r2, ip
 8004e46:	2300      	movs	r3, #0
 8004e48:	4669      	mov	r1, sp
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f7ff f8d8 	bl	8004000 <xQueueGenericSendFromISR>
}
 8004e50:	b005      	add	sp, #20
 8004e52:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e54:	6828      	ldr	r0, [r5, #0]
 8004e56:	9a08      	ldr	r2, [sp, #32]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4669      	mov	r1, sp
 8004e5c:	f7ff f80a 	bl	8003e74 <xQueueGenericSend>
 8004e60:	e7e4      	b.n	8004e2c <xTimerGenericCommand+0x30>
 8004e62:	bf00      	nop
 8004e64:	20001554 	.word	0x20001554

08004e68 <prvSwitchTimerLists>:
{
 8004e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6a:	4e1d      	ldr	r6, [pc, #116]	@ (8004ee0 <prvSwitchTimerLists+0x78>)
 8004e6c:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e6e:	e00d      	b.n	8004e8c <prvSwitchTimerLists+0x24>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e70:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e72:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e74:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e76:	1d25      	adds	r5, r4, #4
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f7fe fecd 	bl	8003c18 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e7e:	6a23      	ldr	r3, [r4, #32]
 8004e80:	4620      	mov	r0, r4
 8004e82:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e84:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004e88:	075b      	lsls	r3, r3, #29
 8004e8a:	d409      	bmi.n	8004ea0 <prvSwitchTimerLists+0x38>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e8c:	6833      	ldr	r3, [r6, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	2a00      	cmp	r2, #0
 8004e92:	d1ed      	bne.n	8004e70 <prvSwitchTimerLists+0x8>
	pxCurrentTimerList = pxOverflowTimerList;
 8004e94:	4a13      	ldr	r2, [pc, #76]	@ (8004ee4 <prvSwitchTimerLists+0x7c>)
 8004e96:	6811      	ldr	r1, [r2, #0]
 8004e98:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8004e9a:	6013      	str	r3, [r2, #0]
}
 8004e9c:	b003      	add	sp, #12
 8004e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ea0:	69a2      	ldr	r2, [r4, #24]
 8004ea2:	eb07 0c02 	add.w	ip, r7, r2
			if( xReloadTime > xNextExpireTime )
 8004ea6:	4567      	cmp	r7, ip
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	4620      	mov	r0, r4
 8004eae:	463a      	mov	r2, r7
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eb0:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8004eb2:	d206      	bcs.n	8004ec2 <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eb4:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004eb6:	f8c4 c004 	str.w	ip, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004eba:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ebc:	f7fe fe94 	bl	8003be8 <vListInsert>
 8004ec0:	e7e4      	b.n	8004e8c <prvSwitchTimerLists+0x24>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	f7ff ff99 	bl	8004dfc <xTimerGenericCommand>
				configASSERT( xResult );
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d1de      	bne.n	8004e8c <prvSwitchTimerLists+0x24>
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	e7fe      	b.n	8004ede <prvSwitchTimerLists+0x76>
 8004ee0:	2000155c 	.word	0x2000155c
 8004ee4:	20001558 	.word	0x20001558

08004ee8 <prvTimerTask>:
{
 8004ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eec:	4e94      	ldr	r6, [pc, #592]	@ (8005140 <prvTimerTask+0x258>)
 8004eee:	4d95      	ldr	r5, [pc, #596]	@ (8005144 <prvTimerTask+0x25c>)
 8004ef0:	4c95      	ldr	r4, [pc, #596]	@ (8005148 <prvTimerTask+0x260>)
 8004ef2:	b089      	sub	sp, #36	@ 0x24
					portYIELD_WITHIN_API();
 8004ef4:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 8004ef8:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004efc:	6832      	ldr	r2, [r6, #0]
 8004efe:	6817      	ldr	r7, [r2, #0]
 8004f00:	2f00      	cmp	r7, #0
 8004f02:	f000 80a2 	beq.w	800504a <prvTimerTask+0x162>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f06:	68d3      	ldr	r3, [r2, #12]
 8004f08:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8004f0a:	f7ff fc0d 	bl	8004728 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8004f0e:	f7ff fc13 	bl	8004738 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8004f12:	682a      	ldr	r2, [r5, #0]
 8004f14:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8004f16:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8004f18:	f0c0 80a8 	bcc.w	800506c <prvTimerTask+0x184>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f1c:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8004f1e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f20:	f240 80ae 	bls.w	8005080 <prvTimerTask+0x198>
 8004f24:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f26:	6820      	ldr	r0, [r4, #0]
 8004f28:	eba7 010b 	sub.w	r1, r7, fp
 8004f2c:	f7ff f9a0 	bl	8004270 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f30:	f7ff fd4c 	bl	80049cc <xTaskResumeAll>
 8004f34:	b928      	cbnz	r0, 8004f42 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 8004f36:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f42:	6820      	ldr	r0, [r4, #0]
 8004f44:	2200      	movs	r2, #0
 8004f46:	a904      	add	r1, sp, #16
 8004f48:	f7ff f8bc 	bl	80040c4 <xQueueReceive>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d0d5      	beq.n	8004efc <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f50:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f52:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	db70      	blt.n	800503a <prvTimerTask+0x152>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f58:	9f06      	ldr	r7, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	b113      	cbz	r3, 8004f64 <prvTimerTask+0x7c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f5e:	1d38      	adds	r0, r7, #4
 8004f60:	f7fe fe5a 	bl	8003c18 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8004f64:	f7ff fbe8 	bl	8004738 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8004f6c:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8004f6e:	f0c0 8084 	bcc.w	800507a <prvTimerTask+0x192>
			switch( xMessage.xMessageID )
 8004f72:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 8004f74:	f8c5 b000 	str.w	fp, [r5]
			switch( xMessage.xMessageID )
 8004f78:	2b09      	cmp	r3, #9
 8004f7a:	d8e2      	bhi.n	8004f42 <prvTimerTask+0x5a>
 8004f7c:	e8df f003 	tbb	[pc, r3]
 8004f80:	4d050505 	.word	0x4d050505
 8004f84:	05055436 	.word	0x05055436
 8004f88:	364d      	.short	0x364d
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f8a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f8e:	9b05      	ldr	r3, [sp, #20]
 8004f90:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f92:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f9c:	185a      	adds	r2, r3, r1
 8004f9e:	bf2c      	ite	cs
 8004fa0:	2001      	movcs	r0, #1
 8004fa2:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8004fa4:	455a      	cmp	r2, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004fa6:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8004fa8:	f200 8085 	bhi.w	80050b6 <prvTimerTask+0x1ce>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fac:	ebab 0303 	sub.w	r3, fp, r3
 8004fb0:	4299      	cmp	r1, r3
 8004fb2:	f200 809b 	bhi.w	80050ec <prvTimerTask+0x204>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	4638      	mov	r0, r7
 8004fba:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fbc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fc0:	0759      	lsls	r1, r3, #29
 8004fc2:	d5be      	bpl.n	8004f42 <prvTimerTask+0x5a>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	9a05      	ldr	r2, [sp, #20]
 8004fc8:	441a      	add	r2, r3
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	4638      	mov	r0, r7
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f7ff ff13 	bl	8004dfc <xTimerGenericCommand>
							configASSERT( xResult );
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d1b3      	bne.n	8004f42 <prvTimerTask+0x5a>
 8004fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	e7fe      	b.n	8004fea <prvTimerTask+0x102>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ff0:	9b05      	ldr	r3, [sp, #20]
 8004ff2:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8091 	beq.w	8005124 <prvTimerTask+0x23c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005002:	445b      	add	r3, fp
	if( xNextExpiryTime <= xTimeNow )
 8005004:	455b      	cmp	r3, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005006:	607b      	str	r3, [r7, #4]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005008:	bf96      	itet	ls
 800500a:	4b50      	ldrls	r3, [pc, #320]	@ (800514c <prvTimerTask+0x264>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800500c:	6830      	ldrhi	r0, [r6, #0]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800500e:	6818      	ldrls	r0, [r3, #0]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005010:	613f      	str	r7, [r7, #16]
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005012:	1d39      	adds	r1, r7, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005014:	f7fe fde8 	bl	8003be8 <vListInsert>
 8005018:	e793      	b.n	8004f42 <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800501a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					break;
 8005026:	e78c      	b.n	8004f42 <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005028:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800502c:	079a      	lsls	r2, r3, #30
 800502e:	d54c      	bpl.n	80050ca <prvTimerTask+0x1e2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8005038:	e783      	b.n	8004f42 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800503a:	9b05      	ldr	r3, [sp, #20]
 800503c:	9907      	ldr	r1, [sp, #28]
 800503e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005040:	9b04      	ldr	r3, [sp, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f6ff af7d 	blt.w	8004f42 <prvTimerTask+0x5a>
 8005048:	e786      	b.n	8004f58 <prvTimerTask+0x70>
	vTaskSuspendAll();
 800504a:	f7ff fb6d 	bl	8004728 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800504e:	f7ff fb73 	bl	8004738 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005052:	682a      	ldr	r2, [r5, #0]
 8005054:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8005056:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8005058:	d308      	bcc.n	800506c <prvTimerTask+0x184>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800505a:	4b3c      	ldr	r3, [pc, #240]	@ (800514c <prvTimerTask+0x264>)
	xLastTime = xTimeNow;
 800505c:	f8c5 b000 	str.w	fp, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	fab2 f282 	clz	r2, r2
 8005068:	0952      	lsrs	r2, r2, #5
 800506a:	e75c      	b.n	8004f26 <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 800506c:	f7ff fefc 	bl	8004e68 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8005070:	f8c5 b000 	str.w	fp, [r5]
			( void ) xTaskResumeAll();
 8005074:	f7ff fcaa 	bl	80049cc <xTaskResumeAll>
 8005078:	e763      	b.n	8004f42 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 800507a:	f7ff fef5 	bl	8004e68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800507e:	e778      	b.n	8004f72 <prvTimerTask+0x8a>
				( void ) xTaskResumeAll();
 8005080:	f7ff fca4 	bl	80049cc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005084:	6832      	ldr	r2, [r6, #0]
 8005086:	68d2      	ldr	r2, [r2, #12]
 8005088:	f8d2 a00c 	ldr.w	sl, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800508c:	f10a 0104 	add.w	r1, sl, #4
 8005090:	4608      	mov	r0, r1
 8005092:	9103      	str	r1, [sp, #12]
 8005094:	f7fe fdc0 	bl	8003c18 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005098:	f89a 2028 	ldrb.w	r2, [sl, #40]	@ 0x28
 800509c:	9903      	ldr	r1, [sp, #12]
 800509e:	f012 0f04 	tst.w	r2, #4
 80050a2:	d116      	bne.n	80050d2 <prvTimerTask+0x1ea>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	f88a 2028 	strb.w	r2, [sl, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050ac:	f8da 3020 	ldr.w	r3, [sl, #32]
 80050b0:	4650      	mov	r0, sl
 80050b2:	4798      	blx	r3
}
 80050b4:	e745      	b.n	8004f42 <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050b6:	455b      	cmp	r3, fp
 80050b8:	d902      	bls.n	80050c0 <prvTimerTask+0x1d8>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	f43f af7b 	beq.w	8004fb6 <prvTimerTask+0xce>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050c0:	6830      	ldr	r0, [r6, #0]
 80050c2:	1d39      	adds	r1, r7, #4
 80050c4:	f7fe fd90 	bl	8003be8 <vListInsert>
	return xProcessTimerNow;
 80050c8:	e73b      	b.n	8004f42 <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 80050ca:	4638      	mov	r0, r7
 80050cc:	f000 fab2 	bl	8005634 <vPortFree>
 80050d0:	e737      	b.n	8004f42 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80050d2:	f8da 0018 	ldr.w	r0, [sl, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050d6:	f8ca a010 	str.w	sl, [sl, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80050da:	183a      	adds	r2, r7, r0
	if( xNextExpiryTime <= xTimeNow )
 80050dc:	455a      	cmp	r2, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050de:	f8ca 2004 	str.w	r2, [sl, #4]
	if( xNextExpiryTime <= xTimeNow )
 80050e2:	d909      	bls.n	80050f8 <prvTimerTask+0x210>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050e4:	6830      	ldr	r0, [r6, #0]
 80050e6:	f7fe fd7f 	bl	8003be8 <vListInsert>
	return xProcessTimerNow;
 80050ea:	e7df      	b.n	80050ac <prvTimerTask+0x1c4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050ec:	4b17      	ldr	r3, [pc, #92]	@ (800514c <prvTimerTask+0x264>)
 80050ee:	1d39      	adds	r1, r7, #4
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	f7fe fd79 	bl	8003be8 <vListInsert>
	return xProcessTimerNow;
 80050f6:	e724      	b.n	8004f42 <prvTimerTask+0x5a>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f8:	ebab 0b07 	sub.w	fp, fp, r7
 80050fc:	4558      	cmp	r0, fp
 80050fe:	d81a      	bhi.n	8005136 <prvTimerTask+0x24e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005100:	2300      	movs	r3, #0
 8005102:	463a      	mov	r2, r7
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	4619      	mov	r1, r3
 8005108:	4650      	mov	r0, sl
 800510a:	f7ff fe77 	bl	8004dfc <xTimerGenericCommand>
			configASSERT( xResult );
 800510e:	2800      	cmp	r0, #0
 8005110:	d1cc      	bne.n	80050ac <prvTimerTask+0x1c4>
 8005112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	e7fe      	b.n	8005122 <prvTimerTask+0x23a>
 8005124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005134:	e7fe      	b.n	8005134 <prvTimerTask+0x24c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005136:	4b05      	ldr	r3, [pc, #20]	@ (800514c <prvTimerTask+0x264>)
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	f7fe fd55 	bl	8003be8 <vListInsert>
	return xProcessTimerNow;
 800513e:	e7b5      	b.n	80050ac <prvTimerTask+0x1c4>
 8005140:	2000155c 	.word	0x2000155c
 8005144:	2000154c 	.word	0x2000154c
 8005148:	20001554 	.word	0x20001554
 800514c:	20001558 	.word	0x20001558

08005150 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005150:	4808      	ldr	r0, [pc, #32]	@ (8005174 <prvPortStartFirstTask+0x24>)
 8005152:	6800      	ldr	r0, [r0, #0]
 8005154:	6800      	ldr	r0, [r0, #0]
 8005156:	f380 8808 	msr	MSP, r0
 800515a:	f04f 0000 	mov.w	r0, #0
 800515e:	f380 8814 	msr	CONTROL, r0
 8005162:	b662      	cpsie	i
 8005164:	b661      	cpsie	f
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	df00      	svc	0
 8005170:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005172:	0000      	.short	0x0000
 8005174:	e000ed08 	.word	0xe000ed08

08005178 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005178:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005188 <vPortEnableVFP+0x10>
 800517c:	6801      	ldr	r1, [r0, #0]
 800517e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005182:	6001      	str	r1, [r0, #0]
 8005184:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005186:	0000      	.short	0x0000
 8005188:	e000ed88 	.word	0xe000ed88

0800518c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800518c:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <prvTaskExitError+0x3c>)
 800518e:	681b      	ldr	r3, [r3, #0]
{
 8005190:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005192:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8005194:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8005196:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8005198:	d008      	beq.n	80051ac <prvTaskExitError+0x20>
 800519a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	e7fe      	b.n	80051aa <prvTaskExitError+0x1e>
 80051ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80051bc:	9b01      	ldr	r3, [sp, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0fc      	beq.n	80051bc <prvTaskExitError+0x30>
}
 80051c2:	b002      	add	sp, #8
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	20000094 	.word	0x20000094

080051cc <pxPortInitialiseStack>:
{
 80051cc:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051d2:	4c07      	ldr	r4, [pc, #28]	@ (80051f0 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051d4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051d8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051dc:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051e0:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051e4:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 80051e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051ec:	3844      	subs	r0, #68	@ 0x44
 80051ee:	4770      	bx	lr
 80051f0:	0800518d 	.word	0x0800518d
	...

08005200 <SVC_Handler>:
	__asm volatile (
 8005200:	4b07      	ldr	r3, [pc, #28]	@ (8005220 <pxCurrentTCBConst2>)
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	6808      	ldr	r0, [r1, #0]
 8005206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520a:	f380 8809 	msr	PSP, r0
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8811 	msr	BASEPRI, r0
 800521a:	4770      	bx	lr
 800521c:	f3af 8000 	nop.w

08005220 <pxCurrentTCBConst2>:
 8005220:	20001458 	.word	0x20001458

08005224 <vPortEnterCritical>:
 8005224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005234:	4a0b      	ldr	r2, [pc, #44]	@ (8005264 <vPortEnterCritical+0x40>)
 8005236:	6813      	ldr	r3, [r2, #0]
 8005238:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800523a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800523c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800523e:	d000      	beq.n	8005242 <vPortEnterCritical+0x1e>
}
 8005240:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005242:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005246:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f7      	beq.n	8005240 <vPortEnterCritical+0x1c>
 8005250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	e7fe      	b.n	8005260 <vPortEnterCritical+0x3c>
 8005262:	bf00      	nop
 8005264:	20000094 	.word	0x20000094

08005268 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005268:	4a08      	ldr	r2, [pc, #32]	@ (800528c <vPortExitCritical+0x24>)
 800526a:	6813      	ldr	r3, [r2, #0]
 800526c:	b943      	cbnz	r3, 8005280 <vPortExitCritical+0x18>
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	e7fe      	b.n	800527e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005280:	3b01      	subs	r3, #1
 8005282:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005284:	b90b      	cbnz	r3, 800528a <vPortExitCritical+0x22>
	__asm volatile
 8005286:	f383 8811 	msr	BASEPRI, r3
}
 800528a:	4770      	bx	lr
 800528c:	20000094 	.word	0x20000094

08005290 <PendSV_Handler>:
	__asm volatile
 8005290:	f3ef 8009 	mrs	r0, PSP
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	4b15      	ldr	r3, [pc, #84]	@ (80052f0 <pxCurrentTCBConst>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	f01e 0f10 	tst.w	lr, #16
 80052a0:	bf08      	it	eq
 80052a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052aa:	6010      	str	r0, [r2, #0]
 80052ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052b4:	f380 8811 	msr	BASEPRI, r0
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f7ff fbc4 	bl	8004a4c <vTaskSwitchContext>
 80052c4:	f04f 0000 	mov.w	r0, #0
 80052c8:	f380 8811 	msr	BASEPRI, r0
 80052cc:	bc09      	pop	{r0, r3}
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	6808      	ldr	r0, [r1, #0]
 80052d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d6:	f01e 0f10 	tst.w	lr, #16
 80052da:	bf08      	it	eq
 80052dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052e0:	f380 8809 	msr	PSP, r0
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	f3af 8000 	nop.w

080052f0 <pxCurrentTCBConst>:
 80052f0:	20001458 	.word	0x20001458

080052f4 <xPortSysTickHandler>:
{
 80052f4:	b508      	push	{r3, lr}
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005306:	f7ff fa1d 	bl	8004744 <xTaskIncrementTick>
 800530a:	b128      	cbz	r0, 8005318 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800530c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005314:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8005318:	2300      	movs	r3, #0
 800531a:	f383 8811 	msr	BASEPRI, r3
}
 800531e:	bd08      	pop	{r3, pc}

08005320 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005320:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8005324:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005326:	4906      	ldr	r1, [pc, #24]	@ (8005340 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005328:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800532a:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800532c:	680b      	ldr	r3, [r1, #0]
 800532e:	4905      	ldr	r1, [pc, #20]	@ (8005344 <vPortSetupTimerInterrupt+0x24>)
 8005330:	fba1 1303 	umull	r1, r3, r1, r3
 8005334:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005336:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005338:	3b01      	subs	r3, #1
 800533a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800533c:	6110      	str	r0, [r2, #16]
}
 800533e:	4770      	bx	lr
 8005340:	20000000 	.word	0x20000000
 8005344:	10624dd3 	.word	0x10624dd3

08005348 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005348:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800534c:	4a3d      	ldr	r2, [pc, #244]	@ (8005444 <xPortStartScheduler+0xfc>)
 800534e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8005352:	4291      	cmp	r1, r2
 8005354:	d041      	beq.n	80053da <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005356:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800535a:	4b3b      	ldr	r3, [pc, #236]	@ (8005448 <xPortStartScheduler+0x100>)
 800535c:	429a      	cmp	r2, r3
 800535e:	d033      	beq.n	80053c8 <xPortStartScheduler+0x80>
{
 8005360:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005362:	4b3a      	ldr	r3, [pc, #232]	@ (800544c <xPortStartScheduler+0x104>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005364:	4c3a      	ldr	r4, [pc, #232]	@ (8005450 <xPortStartScheduler+0x108>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005366:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005368:	483a      	ldr	r0, [pc, #232]	@ (8005454 <xPortStartScheduler+0x10c>)
{
 800536a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800536c:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005372:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800537c:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005380:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005384:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005388:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800538a:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800538c:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800538e:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005390:	bf48      	it	mi
 8005392:	2206      	movmi	r2, #6
 8005394:	d50f      	bpl.n	80053b6 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005396:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80053a6:	061b      	lsls	r3, r3, #24
 80053a8:	4611      	mov	r1, r2
 80053aa:	f102 32ff 	add.w	r2, r2, #4294967295
 80053ae:	d4f2      	bmi.n	8005396 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053b0:	2903      	cmp	r1, #3
 80053b2:	d01b      	beq.n	80053ec <xPortStartScheduler+0xa4>
 80053b4:	6001      	str	r1, [r0, #0]
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	e7fe      	b.n	80053c6 <xPortStartScheduler+0x7e>
 80053c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053d8:	e7fe      	b.n	80053d8 <xPortStartScheduler+0x90>
 80053da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053ea:	e7fe      	b.n	80053ea <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053ec:	9b01      	ldr	r3, [sp, #4]
 80053ee:	4a17      	ldr	r2, [pc, #92]	@ (800544c <xPortStartScheduler+0x104>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053f0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053f4:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053f8:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053fa:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053fc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053fe:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8005402:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005406:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800540a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800540e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005412:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8005416:	f7ff ff83 	bl	8005320 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800541a:	4b0f      	ldr	r3, [pc, #60]	@ (8005458 <xPortStartScheduler+0x110>)
 800541c:	2500      	movs	r5, #0
 800541e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8005420:	f7ff feaa 	bl	8005178 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005424:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8005428:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800542c:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8005430:	f7ff fe8e 	bl	8005150 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005434:	f7ff fb0a 	bl	8004a4c <vTaskSwitchContext>
	prvTaskExitError();
 8005438:	f7ff fea8 	bl	800518c <prvTaskExitError>
}
 800543c:	4628      	mov	r0, r5
 800543e:	b003      	add	sp, #12
 8005440:	bd30      	pop	{r4, r5, pc}
 8005442:	bf00      	nop
 8005444:	410fc271 	.word	0x410fc271
 8005448:	410fc270 	.word	0x410fc270
 800544c:	e000e400 	.word	0xe000e400
 8005450:	2000158c 	.word	0x2000158c
 8005454:	20001588 	.word	0x20001588
 8005458:	20000094 	.word	0x20000094

0800545c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800545c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005460:	2b0f      	cmp	r3, #15
 8005462:	d90e      	bls.n	8005482 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005464:	4911      	ldr	r1, [pc, #68]	@ (80054ac <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005466:	4a12      	ldr	r2, [pc, #72]	@ (80054b0 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005468:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800546a:	7812      	ldrb	r2, [r2, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d908      	bls.n	8005482 <vPortValidateInterruptPriority+0x26>
 8005470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	e7fe      	b.n	8005480 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005482:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005486:	4a0b      	ldr	r2, [pc, #44]	@ (80054b4 <vPortValidateInterruptPriority+0x58>)
 8005488:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005492:	4293      	cmp	r3, r2
 8005494:	d908      	bls.n	80054a8 <vPortValidateInterruptPriority+0x4c>
 8005496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	e7fe      	b.n	80054a6 <vPortValidateInterruptPriority+0x4a>
	}
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	e000e3f0 	.word	0xe000e3f0
 80054b0:	2000158c 	.word	0x2000158c
 80054b4:	20001588 	.word	0x20001588

080054b8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054b8:	b430      	push	{r4, r5}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054ba:	4b12      	ldr	r3, [pc, #72]	@ (8005504 <prvInsertBlockIntoFreeList+0x4c>)
 80054bc:	461a      	mov	r2, r3
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4283      	cmp	r3, r0
 80054c2:	d3fb      	bcc.n	80054bc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054c4:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054c6:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054c8:	eb02 0c04 	add.w	ip, r2, r4
 80054cc:	4560      	cmp	r0, ip
 80054ce:	d008      	beq.n	80054e2 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054d0:	1844      	adds	r4, r0, r1
 80054d2:	42a3      	cmp	r3, r4
 80054d4:	d00b      	beq.n	80054ee <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054d6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054d8:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054da:	bf18      	it	ne
 80054dc:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054de:	bc30      	pop	{r4, r5}
 80054e0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054e2:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054e4:	1850      	adds	r0, r2, r1
 80054e6:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054e8:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ea:	d1f8      	bne.n	80054de <prvInsertBlockIntoFreeList+0x26>
 80054ec:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054ee:	4c06      	ldr	r4, [pc, #24]	@ (8005508 <prvInsertBlockIntoFreeList+0x50>)
 80054f0:	6824      	ldr	r4, [r4, #0]
 80054f2:	42a3      	cmp	r3, r4
 80054f4:	d003      	beq.n	80054fe <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054f6:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054fa:	4429      	add	r1, r5
 80054fc:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054fe:	6004      	str	r4, [r0, #0]
 8005500:	e7ea      	b.n	80054d8 <prvInsertBlockIntoFreeList+0x20>
 8005502:	bf00      	nop
 8005504:	200015a8 	.word	0x200015a8
 8005508:	200015a4 	.word	0x200015a4

0800550c <pvPortMalloc>:
{
 800550c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( pxEnd == NULL )
 8005510:	4e40      	ldr	r6, [pc, #256]	@ (8005614 <pvPortMalloc+0x108>)
{
 8005512:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005514:	f7ff f908 	bl	8004728 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005518:	6833      	ldr	r3, [r6, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d05c      	beq.n	80055d8 <pvPortMalloc+0xcc>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800551e:	4b3e      	ldr	r3, [pc, #248]	@ (8005618 <pvPortMalloc+0x10c>)
 8005520:	681d      	ldr	r5, [r3, #0]
 8005522:	422c      	tst	r4, r5
 8005524:	d12e      	bne.n	8005584 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 8005526:	b36c      	cbz	r4, 8005584 <pvPortMalloc+0x78>
				xWantedSize += xHeapStructSize;
 8005528:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800552c:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800552e:	bf1c      	itt	ne
 8005530:	f021 0107 	bicne.w	r1, r1, #7
 8005534:	3108      	addne	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005536:	b329      	cbz	r1, 8005584 <pvPortMalloc+0x78>
 8005538:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 8005630 <pvPortMalloc+0x124>
 800553c:	f8d8 7000 	ldr.w	r7, [r8]
 8005540:	428f      	cmp	r7, r1
 8005542:	d31f      	bcc.n	8005584 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 8005544:	4835      	ldr	r0, [pc, #212]	@ (800561c <pvPortMalloc+0x110>)
 8005546:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005548:	e003      	b.n	8005552 <pvPortMalloc+0x46>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	b123      	cbz	r3, 8005558 <pvPortMalloc+0x4c>
 800554e:	4620      	mov	r0, r4
 8005550:	461c      	mov	r4, r3
 8005552:	6862      	ldr	r2, [r4, #4]
 8005554:	428a      	cmp	r2, r1
 8005556:	d3f8      	bcc.n	800554a <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8005558:	6833      	ldr	r3, [r6, #0]
 800555a:	42a3      	cmp	r3, r4
 800555c:	d012      	beq.n	8005584 <pvPortMalloc+0x78>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800555e:	1a53      	subs	r3, r2, r1
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005560:	6826      	ldr	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005562:	f8d0 9000 	ldr.w	r9, [r0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005566:	6006      	str	r6, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005568:	2b10      	cmp	r3, #16
 800556a:	d916      	bls.n	800559a <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800556c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800556e:	0742      	lsls	r2, r0, #29
 8005570:	d00e      	beq.n	8005590 <pvPortMalloc+0x84>
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	e7fe      	b.n	8005582 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 8005584:	f7ff fa22 	bl	80049cc <xTaskResumeAll>
void *pvReturn = NULL;
 8005588:	2600      	movs	r6, #0
}
 800558a:	4630      	mov	r0, r6
 800558c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005590:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005592:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005594:	f7ff ff90 	bl	80054b8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005598:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800559a:	4b21      	ldr	r3, [pc, #132]	@ (8005620 <pvPortMalloc+0x114>)
 800559c:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800559e:	1abf      	subs	r7, r7, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055a0:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 80055a2:	4920      	ldr	r1, [pc, #128]	@ (8005624 <pvPortMalloc+0x118>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055a4:	bf38      	it	cc
 80055a6:	601f      	strcc	r7, [r3, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055a8:	432a      	orrs	r2, r5
					pxBlock->pxNextFreeBlock = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 80055b0:	680b      	ldr	r3, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055b2:	f8c8 7000 	str.w	r7, [r8]
					xNumberOfSuccessfulAllocations++;
 80055b6:	3301      	adds	r3, #1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055b8:	f109 0608 	add.w	r6, r9, #8
					xNumberOfSuccessfulAllocations++;
 80055bc:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 80055be:	f7ff fa05 	bl	80049cc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055c2:	0773      	lsls	r3, r6, #29
 80055c4:	d0e1      	beq.n	800558a <pvPortMalloc+0x7e>
 80055c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	e7fe      	b.n	80055d6 <pvPortMalloc+0xca>
	uxAddress = ( size_t ) ucHeap;
 80055d8:	4b13      	ldr	r3, [pc, #76]	@ (8005628 <pvPortMalloc+0x11c>)
	uxAddress -= xHeapStructSize;
 80055da:	4a14      	ldr	r2, [pc, #80]	@ (800562c <pvPortMalloc+0x120>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055dc:	4910      	ldr	r1, [pc, #64]	@ (8005620 <pvPortMalloc+0x114>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055de:	4f0e      	ldr	r7, [pc, #56]	@ (8005618 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055e0:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055e2:	bf18      	it	ne
 80055e4:	3307      	addne	r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055e6:	4d0d      	ldr	r5, [pc, #52]	@ (800561c <pvPortMalloc+0x110>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055e8:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055ec:	bf18      	it	ne
 80055ee:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055f2:	602b      	str	r3, [r5, #0]
 80055f4:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055f6:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055f8:	600b      	str	r3, [r1, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055fa:	490d      	ldr	r1, [pc, #52]	@ (8005630 <pvPortMalloc+0x124>)
	pxEnd = ( void * ) uxAddress;
 80055fc:	6032      	str	r2, [r6, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055fe:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005600:	2100      	movs	r1, #0
 8005602:	6069      	str	r1, [r5, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005604:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 8005608:	e9c2 1100 	strd	r1, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800560c:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800560e:	e9c0 2300 	strd	r2, r3, [r0]
}
 8005612:	e786      	b.n	8005522 <pvPortMalloc+0x16>
 8005614:	200015a4 	.word	0x200015a4
 8005618:	20001590 	.word	0x20001590
 800561c:	200015a8 	.word	0x200015a8
 8005620:	2000159c 	.word	0x2000159c
 8005624:	20001598 	.word	0x20001598
 8005628:	200015b0 	.word	0x200015b0
 800562c:	200095a7 	.word	0x200095a7
 8005630:	200015a0 	.word	0x200015a0

08005634 <vPortFree>:
	if( pv != NULL )
 8005634:	b1d0      	cbz	r0, 800566c <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005636:	4a1c      	ldr	r2, [pc, #112]	@ (80056a8 <vPortFree+0x74>)
 8005638:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	4213      	tst	r3, r2
 8005640:	d00b      	beq.n	800565a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005642:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005646:	b191      	cbz	r1, 800566e <vPortFree+0x3a>
 8005648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	e7fe      	b.n	8005658 <vPortFree+0x24>
 800565a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800566a:	e7fe      	b.n	800566a <vPortFree+0x36>
 800566c:	4770      	bx	lr
{
 800566e:	b500      	push	{lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005670:	ea23 0302 	bic.w	r3, r3, r2
{
 8005674:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005676:	f840 3c04 	str.w	r3, [r0, #-4]
 800567a:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800567c:	f7ff f854 	bl	8004728 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005680:	4a0a      	ldr	r2, [pc, #40]	@ (80056ac <vPortFree+0x78>)
 8005682:	9801      	ldr	r0, [sp, #4]
 8005684:	6811      	ldr	r1, [r2, #0]
 8005686:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800568a:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800568c:	440b      	add	r3, r1
 800568e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005690:	f7ff ff12 	bl	80054b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005694:	4a06      	ldr	r2, [pc, #24]	@ (80056b0 <vPortFree+0x7c>)
 8005696:	6813      	ldr	r3, [r2, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	6013      	str	r3, [r2, #0]
}
 800569c:	b003      	add	sp, #12
 800569e:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 80056a2:	f7ff b993 	b.w	80049cc <xTaskResumeAll>
 80056a6:	bf00      	nop
 80056a8:	20001590 	.word	0x20001590
 80056ac:	200015a0 	.word	0x200015a0
 80056b0:	20001594 	.word	0x20001594

080056b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80056b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80056b6:	4918      	ldr	r1, [pc, #96]	@ (8005718 <MX_USB_DEVICE_Init+0x64>)
 80056b8:	4818      	ldr	r0, [pc, #96]	@ (800571c <MX_USB_DEVICE_Init+0x68>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	f7fd fcd2 	bl	8003064 <USBD_Init>
 80056c0:	b970      	cbnz	r0, 80056e0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80056c2:	4917      	ldr	r1, [pc, #92]	@ (8005720 <MX_USB_DEVICE_Init+0x6c>)
 80056c4:	4815      	ldr	r0, [pc, #84]	@ (800571c <MX_USB_DEVICE_Init+0x68>)
 80056c6:	f7fd fcf1 	bl	80030ac <USBD_RegisterClass>
 80056ca:	b988      	cbnz	r0, 80056f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80056cc:	4915      	ldr	r1, [pc, #84]	@ (8005724 <MX_USB_DEVICE_Init+0x70>)
 80056ce:	4813      	ldr	r0, [pc, #76]	@ (800571c <MX_USB_DEVICE_Init+0x68>)
 80056d0:	f7fd fc88 	bl	8002fe4 <USBD_CDC_RegisterInterface>
 80056d4:	b9a0      	cbnz	r0, 8005700 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80056d6:	4811      	ldr	r0, [pc, #68]	@ (800571c <MX_USB_DEVICE_Init+0x68>)
 80056d8:	f7fd fd10 	bl	80030fc <USBD_Start>
 80056dc:	b9b8      	cbnz	r0, 800570e <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80056de:	bd08      	pop	{r3, pc}
    Error_Handler();
 80056e0:	f7fa fffa 	bl	80006d8 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80056e4:	490e      	ldr	r1, [pc, #56]	@ (8005720 <MX_USB_DEVICE_Init+0x6c>)
 80056e6:	480d      	ldr	r0, [pc, #52]	@ (800571c <MX_USB_DEVICE_Init+0x68>)
 80056e8:	f7fd fce0 	bl	80030ac <USBD_RegisterClass>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d0ed      	beq.n	80056cc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80056f0:	f7fa fff2 	bl	80006d8 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80056f4:	490b      	ldr	r1, [pc, #44]	@ (8005724 <MX_USB_DEVICE_Init+0x70>)
 80056f6:	4809      	ldr	r0, [pc, #36]	@ (800571c <MX_USB_DEVICE_Init+0x68>)
 80056f8:	f7fd fc74 	bl	8002fe4 <USBD_CDC_RegisterInterface>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d0ea      	beq.n	80056d6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8005700:	f7fa ffea 	bl	80006d8 <Error_Handler>
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8005704:	4805      	ldr	r0, [pc, #20]	@ (800571c <MX_USB_DEVICE_Init+0x68>)
 8005706:	f7fd fcf9 	bl	80030fc <USBD_Start>
 800570a:	2800      	cmp	r0, #0
 800570c:	d0e7      	beq.n	80056de <MX_USB_DEVICE_Init+0x2a>
}
 800570e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005712:	f7fa bfe1 	b.w	80006d8 <Error_Handler>
 8005716:	bf00      	nop
 8005718:	200000e0 	.word	0x200000e0
 800571c:	200095b0 	.word	0x200095b0
 8005720:	20000050 	.word	0x20000050
 8005724:	20000098 	.word	0x20000098

08005728 <CDC_DeInit_HS>:
static int8_t CDC_DeInit_HS(void)
{
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
  /* USER CODE END 9 */
}
 8005728:	2000      	movs	r0, #0
 800572a:	4770      	bx	lr

0800572c <CDC_Control_HS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 10 */
}
 800572c:	2000      	movs	r0, #0
 800572e:	4770      	bx	lr

08005730 <CDC_TransmitCplt_HS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
}
 8005730:	2000      	movs	r0, #0
 8005732:	4770      	bx	lr

08005734 <CDC_Receive_HS>:
{
 8005734:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8005736:	4c05      	ldr	r4, [pc, #20]	@ (800574c <CDC_Receive_HS+0x18>)
{
 8005738:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800573a:	4620      	mov	r0, r4
 800573c:	f7fd fc6c 	bl	8003018 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8005740:	4620      	mov	r0, r4
 8005742:	f7fd fc75 	bl	8003030 <USBD_CDC_ReceivePacket>
}
 8005746:	2000      	movs	r0, #0
 8005748:	bd10      	pop	{r4, pc}
 800574a:	bf00      	nop
 800574c:	200095b0 	.word	0x200095b0

08005750 <CDC_Init_HS>:
{
 8005750:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8005752:	4c06      	ldr	r4, [pc, #24]	@ (800576c <CDC_Init_HS+0x1c>)
 8005754:	4906      	ldr	r1, [pc, #24]	@ (8005770 <CDC_Init_HS+0x20>)
 8005756:	2200      	movs	r2, #0
 8005758:	4620      	mov	r0, r4
 800575a:	f7fd fc4f 	bl	8002ffc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800575e:	4905      	ldr	r1, [pc, #20]	@ (8005774 <CDC_Init_HS+0x24>)
 8005760:	4620      	mov	r0, r4
 8005762:	f7fd fc59 	bl	8003018 <USBD_CDC_SetRxBuffer>
}
 8005766:	2000      	movs	r0, #0
 8005768:	bd10      	pop	{r4, pc}
 800576a:	bf00      	nop
 800576c:	200095b0 	.word	0x200095b0
 8005770:	2000988c 	.word	0x2000988c
 8005774:	2000a08c 	.word	0x2000a08c

08005778 <USBD_HS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8005778:	2312      	movs	r3, #18
  return USBD_HS_DeviceDesc;
}
 800577a:	4801      	ldr	r0, [pc, #4]	@ (8005780 <USBD_HS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_HS_DeviceDesc);
 800577c:	800b      	strh	r3, [r1, #0]
}
 800577e:	4770      	bx	lr
 8005780:	200000cc 	.word	0x200000cc

08005784 <USBD_HS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005784:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005786:	4801      	ldr	r0, [pc, #4]	@ (800578c <USBD_HS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005788:	800b      	strh	r3, [r1, #0]
}
 800578a:	4770      	bx	lr
 800578c:	200000c8 	.word	0x200000c8

08005790 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005790:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005792:	4c04      	ldr	r4, [pc, #16]	@ (80057a4 <USBD_HS_ManufacturerStrDescriptor+0x14>)
 8005794:	4804      	ldr	r0, [pc, #16]	@ (80057a8 <USBD_HS_ManufacturerStrDescriptor+0x18>)
{
 8005796:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005798:	4621      	mov	r1, r4
 800579a:	f7fe f8e7 	bl	800396c <USBD_GetString>
  return USBD_StrDesc;
}
 800579e:	4620      	mov	r0, r4
 80057a0:	bd10      	pop	{r4, pc}
 80057a2:	bf00      	nop
 80057a4:	2000a88c 	.word	0x2000a88c
 80057a8:	08006b28 	.word	0x08006b28

080057ac <USBD_HS_ProductStrDescriptor>:
{
 80057ac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80057ae:	4c04      	ldr	r4, [pc, #16]	@ (80057c0 <USBD_HS_ProductStrDescriptor+0x14>)
 80057b0:	4804      	ldr	r0, [pc, #16]	@ (80057c4 <USBD_HS_ProductStrDescriptor+0x18>)
{
 80057b2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80057b4:	4621      	mov	r1, r4
 80057b6:	f7fe f8d9 	bl	800396c <USBD_GetString>
}
 80057ba:	4620      	mov	r0, r4
 80057bc:	bd10      	pop	{r4, pc}
 80057be:	bf00      	nop
 80057c0:	2000a88c 	.word	0x2000a88c
 80057c4:	08006b3c 	.word	0x08006b3c

080057c8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80057c8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80057ca:	4c04      	ldr	r4, [pc, #16]	@ (80057dc <USBD_HS_ConfigStrDescriptor+0x14>)
 80057cc:	4804      	ldr	r0, [pc, #16]	@ (80057e0 <USBD_HS_ConfigStrDescriptor+0x18>)
{
 80057ce:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80057d0:	4621      	mov	r1, r4
 80057d2:	f7fe f8cb 	bl	800396c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80057d6:	4620      	mov	r0, r4
 80057d8:	bd10      	pop	{r4, pc}
 80057da:	bf00      	nop
 80057dc:	2000a88c 	.word	0x2000a88c
 80057e0:	08006b54 	.word	0x08006b54

080057e4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80057e4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80057e6:	4c04      	ldr	r4, [pc, #16]	@ (80057f8 <USBD_HS_InterfaceStrDescriptor+0x14>)
 80057e8:	4804      	ldr	r0, [pc, #16]	@ (80057fc <USBD_HS_InterfaceStrDescriptor+0x18>)
{
 80057ea:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80057ec:	4621      	mov	r1, r4
 80057ee:	f7fe f8bd 	bl	800396c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80057f2:	4620      	mov	r0, r4
 80057f4:	bd10      	pop	{r4, pc}
 80057f6:	bf00      	nop
 80057f8:	2000a88c 	.word	0x2000a88c
 80057fc:	08006b60 	.word	0x08006b60

08005800 <USBD_HS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005800:	231a      	movs	r3, #26
}
 8005802:	4801      	ldr	r0, [pc, #4]	@ (8005808 <USBD_HS_SerialStrDescriptor+0x8>)
  *length = USB_SIZ_STRING_SERIAL;
 8005804:	800b      	strh	r3, [r1, #0]
}
 8005806:	4770      	bx	lr
 8005808:	200000ac 	.word	0x200000ac

0800580c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800580c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_HS)
 800580e:	4b24      	ldr	r3, [pc, #144]	@ (80058a0 <HAL_PCD_MspInit+0x94>)
 8005810:	6802      	ldr	r2, [r0, #0]
{
 8005812:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005814:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_HS)
 8005816:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005818:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800581c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005820:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB_OTG_HS)
 8005822:	d001      	beq.n	8005828 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8005824:	b009      	add	sp, #36	@ 0x24
 8005826:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005828:	4d1e      	ldr	r5, [pc, #120]	@ (80058a4 <HAL_PCD_MspInit+0x98>)
 800582a:	9400      	str	r4, [sp, #0]
 800582c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800582e:	481e      	ldr	r0, [pc, #120]	@ (80058a8 <HAL_PCD_MspInit+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005830:	f043 0302 	orr.w	r3, r3, #2
 8005834:	632b      	str	r3, [r5, #48]	@ 0x30
 8005836:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800583e:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8005842:	2302      	movs	r3, #2
 8005844:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005848:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800584a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800584c:	9305      	str	r3, [sp, #20]
 800584e:	230c      	movs	r3, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005850:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005852:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005854:	f7fb f8f6 	bl	8000a44 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8005858:	9401      	str	r4, [sp, #4]
 800585a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800585c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005860:	632b      	str	r3, [r5, #48]	@ 0x30
 8005862:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 5, 0);
 8005868:	4622      	mov	r2, r4
 800586a:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800586c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 5, 0);
 800586e:	204a      	movs	r0, #74	@ 0x4a
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8005870:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 5, 0);
 8005872:	f7fb f89d 	bl	80009b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8005876:	204a      	movs	r0, #74	@ 0x4a
 8005878:	f7fb f8d6 	bl	8000a28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 5, 0);
 800587c:	4622      	mov	r2, r4
 800587e:	2105      	movs	r1, #5
 8005880:	204b      	movs	r0, #75	@ 0x4b
 8005882:	f7fb f895 	bl	80009b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8005886:	204b      	movs	r0, #75	@ 0x4b
 8005888:	f7fb f8ce 	bl	8000a28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800588c:	4622      	mov	r2, r4
 800588e:	2105      	movs	r1, #5
 8005890:	204d      	movs	r0, #77	@ 0x4d
 8005892:	f7fb f88d 	bl	80009b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8005896:	204d      	movs	r0, #77	@ 0x4d
 8005898:	f7fb f8c6 	bl	8000a28 <HAL_NVIC_EnableIRQ>
}
 800589c:	b009      	add	sp, #36	@ 0x24
 800589e:	bd30      	pop	{r4, r5, pc}
 80058a0:	40040000 	.word	0x40040000
 80058a4:	40023800 	.word	0x40023800
 80058a8:	40020400 	.word	0x40020400

080058ac <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80058ac:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 80058b0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80058b4:	f7fd bc36 	b.w	8003124 <USBD_LL_SetupStage>

080058b8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80058b8:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80058bc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80058c0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80058c4:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 80058c8:	f7fd bc5c 	b.w	8003184 <USBD_LL_DataOutStage>

080058cc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80058cc:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80058d0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80058d4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80058d8:	6a1a      	ldr	r2, [r3, #32]
 80058da:	f7fd bc8d 	b.w	80031f8 <USBD_LL_DataInStage>
 80058de:	bf00      	nop

080058e0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80058e0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80058e4:	f7fd bd2e 	b.w	8003344 <USBD_LL_SOF>

080058e8 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058e8:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80058ea:	79c1      	ldrb	r1, [r0, #7]
{
 80058ec:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80058ee:	b111      	cbz	r1, 80058f6 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80058f0:	2902      	cmp	r1, #2
 80058f2:	d10a      	bne.n	800590a <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 80058f4:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80058f6:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 80058fa:	f7fd fd05 	bl	8003308 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80058fe:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
}
 8005902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005906:	f7fd bcd1 	b.w	80032ac <USBD_LL_Reset>
    Error_Handler();
 800590a:	f7fa fee5 	bl	80006d8 <Error_Handler>
    speed = USBD_SPEED_FULL;
 800590e:	2101      	movs	r1, #1
 8005910:	e7f1      	b.n	80058f6 <HAL_PCD_ResetCallback+0xe>
 8005912:	bf00      	nop

08005914 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005914:	b510      	push	{r4, lr}
 8005916:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005918:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800591c:	f7fd fcf8 	bl	8003310 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005920:	6822      	ldr	r2, [r4, #0]
 8005922:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800592e:	7ae3      	ldrb	r3, [r4, #11]
 8005930:	b123      	cbz	r3, 800593c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005932:	4a03      	ldr	r2, [pc, #12]	@ (8005940 <HAL_PCD_SuspendCallback+0x2c>)
 8005934:	6913      	ldr	r3, [r2, #16]
 8005936:	f043 0306 	orr.w	r3, r3, #6
 800593a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800593c:	bd10      	pop	{r4, pc}
 800593e:	bf00      	nop
 8005940:	e000ed00 	.word	0xe000ed00

08005944 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005944:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005948:	f7fd bcf0 	b.w	800332c <USBD_LL_Resume>

0800594c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800594c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005950:	f7fd bd1e 	b.w	8003390 <USBD_LL_IsoOUTIncomplete>

08005954 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005954:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005958:	f7fd bd04 	b.w	8003364 <USBD_LL_IsoINIncomplete>

0800595c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800595c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005960:	f7fd bd2c 	b.w	80033bc <USBD_LL_DevConnected>

08005964 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005964:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005968:	f7fd bd2a 	b.w	80033c0 <USBD_LL_DevDisconnected>

0800596c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800596c:	7803      	ldrb	r3, [r0, #0]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d001      	beq.n	8005976 <USBD_LL_Init+0xa>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
  }
  return USBD_OK;
}
 8005972:	2000      	movs	r0, #0
 8005974:	4770      	bx	lr
  hpcd_USB_OTG_HS.pData = pdev;
 8005976:	4b16      	ldr	r3, [pc, #88]	@ (80059d0 <USBD_LL_Init+0x64>)
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8005978:	2106      	movs	r1, #6
{
 800597a:	b510      	push	{r4, lr}
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800597c:	2200      	movs	r2, #0
  hpcd_USB_OTG_HS.pData = pdev;
 800597e:	f8c3 04e0 	str.w	r0, [r3, #1248]	@ 0x4e0
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8005982:	4c14      	ldr	r4, [pc, #80]	@ (80059d4 <USBD_LL_Init+0x68>)
  pdev->pData = &hpcd_USB_OTG_HS;
 8005984:	f8c0 32c8 	str.w	r3, [r0, #712]	@ 0x2c8
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8005988:	f44f 7c00 	mov.w	ip, #512	@ 0x200
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800598c:	7119      	strb	r1, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800598e:	4618      	mov	r0, r3
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8005990:	2102      	movs	r1, #2
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8005992:	601c      	str	r4, [r3, #0]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8005994:	f8a3 c006 	strh.w	ip, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8005998:	f8c3 1009 	str.w	r1, [r3, #9]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800599c:	81da      	strh	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800599e:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80059a0:	f7fb f988 	bl	8000cb4 <HAL_PCD_Init>
 80059a4:	b988      	cbnz	r0, 80059ca <USBD_LL_Init+0x5e>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80059a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80059aa:	4809      	ldr	r0, [pc, #36]	@ (80059d0 <USBD_LL_Init+0x64>)
 80059ac:	f7fb ff1e 	bl	80017ec <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80059b0:	2280      	movs	r2, #128	@ 0x80
 80059b2:	2100      	movs	r1, #0
 80059b4:	4806      	ldr	r0, [pc, #24]	@ (80059d0 <USBD_LL_Init+0x64>)
 80059b6:	f7fb fef3 	bl	80017a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80059ba:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80059be:	2101      	movs	r1, #1
 80059c0:	4803      	ldr	r0, [pc, #12]	@ (80059d0 <USBD_LL_Init+0x64>)
 80059c2:	f7fb feed 	bl	80017a0 <HAL_PCDEx_SetTxFiFo>
}
 80059c6:	2000      	movs	r0, #0
 80059c8:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80059ca:	f7fa fe85 	bl	80006d8 <Error_Handler>
 80059ce:	e7ea      	b.n	80059a6 <USBD_LL_Init+0x3a>
 80059d0:	2000acac 	.word	0x2000acac
 80059d4:	40040000 	.word	0x40040000

080059d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80059d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80059da:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80059de:	f7fb f9d5 	bl	8000d8c <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80059e2:	b118      	cbz	r0, 80059ec <USBD_LL_Start+0x14>
 80059e4:	2802      	cmp	r0, #2
 80059e6:	bf0c      	ite	eq
 80059e8:	2001      	moveq	r0, #1
 80059ea:	2003      	movne	r0, #3
}
 80059ec:	bd08      	pop	{r3, pc}
 80059ee:	bf00      	nop

080059f0 <USBD_LL_OpenEP>:
{
 80059f0:	4694      	mov	ip, r2
 80059f2:	b508      	push	{r3, lr}
 80059f4:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80059f6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80059fa:	4663      	mov	r3, ip
 80059fc:	f7fb fd92 	bl	8001524 <HAL_PCD_EP_Open>
  switch (hal_status)
 8005a00:	b118      	cbz	r0, 8005a0a <USBD_LL_OpenEP+0x1a>
 8005a02:	2802      	cmp	r0, #2
 8005a04:	bf0c      	ite	eq
 8005a06:	2001      	moveq	r0, #1
 8005a08:	2003      	movne	r0, #3
}
 8005a0a:	bd08      	pop	{r3, pc}

08005a0c <USBD_LL_CloseEP>:
{
 8005a0c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005a0e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005a12:	f7fb fdc7 	bl	80015a4 <HAL_PCD_EP_Close>
  switch (hal_status)
 8005a16:	b118      	cbz	r0, 8005a20 <USBD_LL_CloseEP+0x14>
 8005a18:	2802      	cmp	r0, #2
 8005a1a:	bf0c      	ite	eq
 8005a1c:	2001      	moveq	r0, #1
 8005a1e:	2003      	movne	r0, #3
}
 8005a20:	bd08      	pop	{r3, pc}
 8005a22:	bf00      	nop

08005a24 <USBD_LL_StallEP>:
{
 8005a24:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005a26:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005a2a:	f7fb fe3f 	bl	80016ac <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8005a2e:	b118      	cbz	r0, 8005a38 <USBD_LL_StallEP+0x14>
 8005a30:	2802      	cmp	r0, #2
 8005a32:	bf0c      	ite	eq
 8005a34:	2001      	moveq	r0, #1
 8005a36:	2003      	movne	r0, #3
}
 8005a38:	bd08      	pop	{r3, pc}
 8005a3a:	bf00      	nop

08005a3c <USBD_LL_ClearStallEP>:
{
 8005a3c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005a3e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005a42:	f7fb fe75 	bl	8001730 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8005a46:	b118      	cbz	r0, 8005a50 <USBD_LL_ClearStallEP+0x14>
 8005a48:	2802      	cmp	r0, #2
 8005a4a:	bf0c      	ite	eq
 8005a4c:	2001      	moveq	r0, #1
 8005a4e:	2003      	movne	r0, #3
}
 8005a50:	bd08      	pop	{r3, pc}
 8005a52:	bf00      	nop

08005a54 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8005a54:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005a56:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8005a5a:	d406      	bmi.n	8005a6a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005a5c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005a60:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005a64:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
}
 8005a68:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005a6a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8005a6e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005a72:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005a76:	7d98      	ldrb	r0, [r3, #22]
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop

08005a7c <USBD_LL_SetUSBAddress>:
{
 8005a7c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005a7e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005a82:	f7fb fd3b 	bl	80014fc <HAL_PCD_SetAddress>
  switch (hal_status)
 8005a86:	b118      	cbz	r0, 8005a90 <USBD_LL_SetUSBAddress+0x14>
 8005a88:	2802      	cmp	r0, #2
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2001      	moveq	r0, #1
 8005a8e:	2003      	movne	r0, #3
}
 8005a90:	bd08      	pop	{r3, pc}
 8005a92:	bf00      	nop

08005a94 <USBD_LL_Transmit>:
{
 8005a94:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005a96:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005a9a:	f7fb fde3 	bl	8001664 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8005a9e:	b118      	cbz	r0, 8005aa8 <USBD_LL_Transmit+0x14>
 8005aa0:	2802      	cmp	r0, #2
 8005aa2:	bf0c      	ite	eq
 8005aa4:	2001      	moveq	r0, #1
 8005aa6:	2003      	movne	r0, #3
}
 8005aa8:	bd08      	pop	{r3, pc}
 8005aaa:	bf00      	nop

08005aac <USBD_LL_PrepareReceive>:
{
 8005aac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005aae:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005ab2:	f7fb fdab 	bl	800160c <HAL_PCD_EP_Receive>
  switch (hal_status)
 8005ab6:	b118      	cbz	r0, 8005ac0 <USBD_LL_PrepareReceive+0x14>
 8005ab8:	2802      	cmp	r0, #2
 8005aba:	bf0c      	ite	eq
 8005abc:	2001      	moveq	r0, #1
 8005abe:	2003      	movne	r0, #3
}
 8005ac0:	bd08      	pop	{r3, pc}
 8005ac2:	bf00      	nop

08005ac4 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005ac4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005ac8:	f7fb bdc2 	b.w	8001650 <HAL_PCD_EP_GetRxCount>

08005acc <USBD_static_malloc>:
}
 8005acc:	4800      	ldr	r0, [pc, #0]	@ (8005ad0 <USBD_static_malloc+0x4>)
 8005ace:	4770      	bx	lr
 8005ad0:	2000aa8c 	.word	0x2000aa8c

08005ad4 <USBD_static_free>:
}
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop

08005ad8 <std>:
 8005ad8:	2300      	movs	r3, #0
 8005ada:	b510      	push	{r4, lr}
 8005adc:	4604      	mov	r4, r0
 8005ade:	e9c0 3300 	strd	r3, r3, [r0]
 8005ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ae6:	6083      	str	r3, [r0, #8]
 8005ae8:	8181      	strh	r1, [r0, #12]
 8005aea:	6643      	str	r3, [r0, #100]	@ 0x64
 8005aec:	81c2      	strh	r2, [r0, #14]
 8005aee:	6183      	str	r3, [r0, #24]
 8005af0:	4619      	mov	r1, r3
 8005af2:	2208      	movs	r2, #8
 8005af4:	305c      	adds	r0, #92	@ 0x5c
 8005af6:	f000 f90e 	bl	8005d16 <memset>
 8005afa:	4b0d      	ldr	r3, [pc, #52]	@ (8005b30 <std+0x58>)
 8005afc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005afe:	4b0d      	ldr	r3, [pc, #52]	@ (8005b34 <std+0x5c>)
 8005b00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b02:	4b0d      	ldr	r3, [pc, #52]	@ (8005b38 <std+0x60>)
 8005b04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b06:	4b0d      	ldr	r3, [pc, #52]	@ (8005b3c <std+0x64>)
 8005b08:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b40 <std+0x68>)
 8005b0c:	6224      	str	r4, [r4, #32]
 8005b0e:	429c      	cmp	r4, r3
 8005b10:	d006      	beq.n	8005b20 <std+0x48>
 8005b12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b16:	4294      	cmp	r4, r2
 8005b18:	d002      	beq.n	8005b20 <std+0x48>
 8005b1a:	33d0      	adds	r3, #208	@ 0xd0
 8005b1c:	429c      	cmp	r4, r3
 8005b1e:	d105      	bne.n	8005b2c <std+0x54>
 8005b20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b28:	f000 b9c4 	b.w	8005eb4 <__retarget_lock_init_recursive>
 8005b2c:	bd10      	pop	{r4, pc}
 8005b2e:	bf00      	nop
 8005b30:	08005c91 	.word	0x08005c91
 8005b34:	08005cb3 	.word	0x08005cb3
 8005b38:	08005ceb 	.word	0x08005ceb
 8005b3c:	08005d0f 	.word	0x08005d0f
 8005b40:	2000b190 	.word	0x2000b190

08005b44 <stdio_exit_handler>:
 8005b44:	4a02      	ldr	r2, [pc, #8]	@ (8005b50 <stdio_exit_handler+0xc>)
 8005b46:	4903      	ldr	r1, [pc, #12]	@ (8005b54 <stdio_exit_handler+0x10>)
 8005b48:	4803      	ldr	r0, [pc, #12]	@ (8005b58 <stdio_exit_handler+0x14>)
 8005b4a:	f000 b869 	b.w	8005c20 <_fwalk_sglue>
 8005b4e:	bf00      	nop
 8005b50:	200000fc 	.word	0x200000fc
 8005b54:	08006771 	.word	0x08006771
 8005b58:	2000010c 	.word	0x2000010c

08005b5c <cleanup_stdio>:
 8005b5c:	6841      	ldr	r1, [r0, #4]
 8005b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b90 <cleanup_stdio+0x34>)
 8005b60:	4299      	cmp	r1, r3
 8005b62:	b510      	push	{r4, lr}
 8005b64:	4604      	mov	r4, r0
 8005b66:	d001      	beq.n	8005b6c <cleanup_stdio+0x10>
 8005b68:	f000 fe02 	bl	8006770 <_fflush_r>
 8005b6c:	68a1      	ldr	r1, [r4, #8]
 8005b6e:	4b09      	ldr	r3, [pc, #36]	@ (8005b94 <cleanup_stdio+0x38>)
 8005b70:	4299      	cmp	r1, r3
 8005b72:	d002      	beq.n	8005b7a <cleanup_stdio+0x1e>
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 fdfb 	bl	8006770 <_fflush_r>
 8005b7a:	68e1      	ldr	r1, [r4, #12]
 8005b7c:	4b06      	ldr	r3, [pc, #24]	@ (8005b98 <cleanup_stdio+0x3c>)
 8005b7e:	4299      	cmp	r1, r3
 8005b80:	d004      	beq.n	8005b8c <cleanup_stdio+0x30>
 8005b82:	4620      	mov	r0, r4
 8005b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b88:	f000 bdf2 	b.w	8006770 <_fflush_r>
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	bf00      	nop
 8005b90:	2000b190 	.word	0x2000b190
 8005b94:	2000b1f8 	.word	0x2000b1f8
 8005b98:	2000b260 	.word	0x2000b260

08005b9c <global_stdio_init.part.0>:
 8005b9c:	b510      	push	{r4, lr}
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005bcc <global_stdio_init.part.0+0x30>)
 8005ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8005bd0 <global_stdio_init.part.0+0x34>)
 8005ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd4 <global_stdio_init.part.0+0x38>)
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2104      	movs	r1, #4
 8005bac:	f7ff ff94 	bl	8005ad8 <std>
 8005bb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	2109      	movs	r1, #9
 8005bb8:	f7ff ff8e 	bl	8005ad8 <std>
 8005bbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc6:	2112      	movs	r1, #18
 8005bc8:	f7ff bf86 	b.w	8005ad8 <std>
 8005bcc:	2000b2c8 	.word	0x2000b2c8
 8005bd0:	2000b190 	.word	0x2000b190
 8005bd4:	08005b45 	.word	0x08005b45

08005bd8 <__sfp_lock_acquire>:
 8005bd8:	4801      	ldr	r0, [pc, #4]	@ (8005be0 <__sfp_lock_acquire+0x8>)
 8005bda:	f000 b96c 	b.w	8005eb6 <__retarget_lock_acquire_recursive>
 8005bde:	bf00      	nop
 8005be0:	2000b2d1 	.word	0x2000b2d1

08005be4 <__sfp_lock_release>:
 8005be4:	4801      	ldr	r0, [pc, #4]	@ (8005bec <__sfp_lock_release+0x8>)
 8005be6:	f000 b967 	b.w	8005eb8 <__retarget_lock_release_recursive>
 8005bea:	bf00      	nop
 8005bec:	2000b2d1 	.word	0x2000b2d1

08005bf0 <__sinit>:
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	f7ff fff0 	bl	8005bd8 <__sfp_lock_acquire>
 8005bf8:	6a23      	ldr	r3, [r4, #32]
 8005bfa:	b11b      	cbz	r3, 8005c04 <__sinit+0x14>
 8005bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c00:	f7ff bff0 	b.w	8005be4 <__sfp_lock_release>
 8005c04:	4b04      	ldr	r3, [pc, #16]	@ (8005c18 <__sinit+0x28>)
 8005c06:	6223      	str	r3, [r4, #32]
 8005c08:	4b04      	ldr	r3, [pc, #16]	@ (8005c1c <__sinit+0x2c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1f5      	bne.n	8005bfc <__sinit+0xc>
 8005c10:	f7ff ffc4 	bl	8005b9c <global_stdio_init.part.0>
 8005c14:	e7f2      	b.n	8005bfc <__sinit+0xc>
 8005c16:	bf00      	nop
 8005c18:	08005b5d 	.word	0x08005b5d
 8005c1c:	2000b2c8 	.word	0x2000b2c8

08005c20 <_fwalk_sglue>:
 8005c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c24:	4607      	mov	r7, r0
 8005c26:	4688      	mov	r8, r1
 8005c28:	4614      	mov	r4, r2
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c30:	f1b9 0901 	subs.w	r9, r9, #1
 8005c34:	d505      	bpl.n	8005c42 <_fwalk_sglue+0x22>
 8005c36:	6824      	ldr	r4, [r4, #0]
 8005c38:	2c00      	cmp	r4, #0
 8005c3a:	d1f7      	bne.n	8005c2c <_fwalk_sglue+0xc>
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c42:	89ab      	ldrh	r3, [r5, #12]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d907      	bls.n	8005c58 <_fwalk_sglue+0x38>
 8005c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	d003      	beq.n	8005c58 <_fwalk_sglue+0x38>
 8005c50:	4629      	mov	r1, r5
 8005c52:	4638      	mov	r0, r7
 8005c54:	47c0      	blx	r8
 8005c56:	4306      	orrs	r6, r0
 8005c58:	3568      	adds	r5, #104	@ 0x68
 8005c5a:	e7e9      	b.n	8005c30 <_fwalk_sglue+0x10>

08005c5c <iprintf>:
 8005c5c:	b40f      	push	{r0, r1, r2, r3}
 8005c5e:	b507      	push	{r0, r1, r2, lr}
 8005c60:	4906      	ldr	r1, [pc, #24]	@ (8005c7c <iprintf+0x20>)
 8005c62:	ab04      	add	r3, sp, #16
 8005c64:	6808      	ldr	r0, [r1, #0]
 8005c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c6a:	6881      	ldr	r1, [r0, #8]
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	f000 fa55 	bl	800611c <_vfiprintf_r>
 8005c72:	b003      	add	sp, #12
 8005c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c78:	b004      	add	sp, #16
 8005c7a:	4770      	bx	lr
 8005c7c:	20000108 	.word	0x20000108

08005c80 <putchar>:
 8005c80:	4b02      	ldr	r3, [pc, #8]	@ (8005c8c <putchar+0xc>)
 8005c82:	4601      	mov	r1, r0
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	6882      	ldr	r2, [r0, #8]
 8005c88:	f000 bd9a 	b.w	80067c0 <_putc_r>
 8005c8c:	20000108 	.word	0x20000108

08005c90 <__sread>:
 8005c90:	b510      	push	{r4, lr}
 8005c92:	460c      	mov	r4, r1
 8005c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c98:	f000 f8be 	bl	8005e18 <_read_r>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	bfab      	itete	ge
 8005ca0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ca4:	181b      	addge	r3, r3, r0
 8005ca6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005caa:	bfac      	ite	ge
 8005cac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005cae:	81a3      	strhlt	r3, [r4, #12]
 8005cb0:	bd10      	pop	{r4, pc}

08005cb2 <__swrite>:
 8005cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb6:	461f      	mov	r7, r3
 8005cb8:	898b      	ldrh	r3, [r1, #12]
 8005cba:	05db      	lsls	r3, r3, #23
 8005cbc:	4605      	mov	r5, r0
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	4616      	mov	r6, r2
 8005cc2:	d505      	bpl.n	8005cd0 <__swrite+0x1e>
 8005cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc8:	2302      	movs	r3, #2
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f000 f892 	bl	8005df4 <_lseek_r>
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cda:	81a3      	strh	r3, [r4, #12]
 8005cdc:	4632      	mov	r2, r6
 8005cde:	463b      	mov	r3, r7
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce6:	f000 b8a9 	b.w	8005e3c <_write_r>

08005cea <__sseek>:
 8005cea:	b510      	push	{r4, lr}
 8005cec:	460c      	mov	r4, r1
 8005cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf2:	f000 f87f 	bl	8005df4 <_lseek_r>
 8005cf6:	1c43      	adds	r3, r0, #1
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	bf15      	itete	ne
 8005cfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d06:	81a3      	strheq	r3, [r4, #12]
 8005d08:	bf18      	it	ne
 8005d0a:	81a3      	strhne	r3, [r4, #12]
 8005d0c:	bd10      	pop	{r4, pc}

08005d0e <__sclose>:
 8005d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d12:	f000 b809 	b.w	8005d28 <_close_r>

08005d16 <memset>:
 8005d16:	4402      	add	r2, r0
 8005d18:	4603      	mov	r3, r0
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d100      	bne.n	8005d20 <memset+0xa>
 8005d1e:	4770      	bx	lr
 8005d20:	f803 1b01 	strb.w	r1, [r3], #1
 8005d24:	e7f9      	b.n	8005d1a <memset+0x4>
	...

08005d28 <_close_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4d06      	ldr	r5, [pc, #24]	@ (8005d44 <_close_r+0x1c>)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4604      	mov	r4, r0
 8005d30:	4608      	mov	r0, r1
 8005d32:	602b      	str	r3, [r5, #0]
 8005d34:	f7fa fd88 	bl	8000848 <_close>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_close_r+0x1a>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_close_r+0x1a>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	2000b2cc 	.word	0x2000b2cc

08005d48 <_reclaim_reent>:
 8005d48:	4b29      	ldr	r3, [pc, #164]	@ (8005df0 <_reclaim_reent+0xa8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4283      	cmp	r3, r0
 8005d4e:	b570      	push	{r4, r5, r6, lr}
 8005d50:	4604      	mov	r4, r0
 8005d52:	d04b      	beq.n	8005dec <_reclaim_reent+0xa4>
 8005d54:	69c3      	ldr	r3, [r0, #28]
 8005d56:	b1ab      	cbz	r3, 8005d84 <_reclaim_reent+0x3c>
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	b16b      	cbz	r3, 8005d78 <_reclaim_reent+0x30>
 8005d5c:	2500      	movs	r5, #0
 8005d5e:	69e3      	ldr	r3, [r4, #28]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	5959      	ldr	r1, [r3, r5]
 8005d64:	2900      	cmp	r1, #0
 8005d66:	d13b      	bne.n	8005de0 <_reclaim_reent+0x98>
 8005d68:	3504      	adds	r5, #4
 8005d6a:	2d80      	cmp	r5, #128	@ 0x80
 8005d6c:	d1f7      	bne.n	8005d5e <_reclaim_reent+0x16>
 8005d6e:	69e3      	ldr	r3, [r4, #28]
 8005d70:	4620      	mov	r0, r4
 8005d72:	68d9      	ldr	r1, [r3, #12]
 8005d74:	f000 f8b0 	bl	8005ed8 <_free_r>
 8005d78:	69e3      	ldr	r3, [r4, #28]
 8005d7a:	6819      	ldr	r1, [r3, #0]
 8005d7c:	b111      	cbz	r1, 8005d84 <_reclaim_reent+0x3c>
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f000 f8aa 	bl	8005ed8 <_free_r>
 8005d84:	6961      	ldr	r1, [r4, #20]
 8005d86:	b111      	cbz	r1, 8005d8e <_reclaim_reent+0x46>
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f000 f8a5 	bl	8005ed8 <_free_r>
 8005d8e:	69e1      	ldr	r1, [r4, #28]
 8005d90:	b111      	cbz	r1, 8005d98 <_reclaim_reent+0x50>
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 f8a0 	bl	8005ed8 <_free_r>
 8005d98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005d9a:	b111      	cbz	r1, 8005da2 <_reclaim_reent+0x5a>
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f000 f89b 	bl	8005ed8 <_free_r>
 8005da2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005da4:	b111      	cbz	r1, 8005dac <_reclaim_reent+0x64>
 8005da6:	4620      	mov	r0, r4
 8005da8:	f000 f896 	bl	8005ed8 <_free_r>
 8005dac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005dae:	b111      	cbz	r1, 8005db6 <_reclaim_reent+0x6e>
 8005db0:	4620      	mov	r0, r4
 8005db2:	f000 f891 	bl	8005ed8 <_free_r>
 8005db6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005db8:	b111      	cbz	r1, 8005dc0 <_reclaim_reent+0x78>
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 f88c 	bl	8005ed8 <_free_r>
 8005dc0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005dc2:	b111      	cbz	r1, 8005dca <_reclaim_reent+0x82>
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f000 f887 	bl	8005ed8 <_free_r>
 8005dca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005dcc:	b111      	cbz	r1, 8005dd4 <_reclaim_reent+0x8c>
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f000 f882 	bl	8005ed8 <_free_r>
 8005dd4:	6a23      	ldr	r3, [r4, #32]
 8005dd6:	b14b      	cbz	r3, 8005dec <_reclaim_reent+0xa4>
 8005dd8:	4620      	mov	r0, r4
 8005dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005dde:	4718      	bx	r3
 8005de0:	680e      	ldr	r6, [r1, #0]
 8005de2:	4620      	mov	r0, r4
 8005de4:	f000 f878 	bl	8005ed8 <_free_r>
 8005de8:	4631      	mov	r1, r6
 8005dea:	e7bb      	b.n	8005d64 <_reclaim_reent+0x1c>
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
 8005dee:	bf00      	nop
 8005df0:	20000108 	.word	0x20000108

08005df4 <_lseek_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	4d07      	ldr	r5, [pc, #28]	@ (8005e14 <_lseek_r+0x20>)
 8005df8:	4604      	mov	r4, r0
 8005dfa:	4608      	mov	r0, r1
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	2200      	movs	r2, #0
 8005e00:	602a      	str	r2, [r5, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f7fa fd2c 	bl	8000860 <_lseek>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d102      	bne.n	8005e12 <_lseek_r+0x1e>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	b103      	cbz	r3, 8005e12 <_lseek_r+0x1e>
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	2000b2cc 	.word	0x2000b2cc

08005e18 <_read_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4d07      	ldr	r5, [pc, #28]	@ (8005e38 <_read_r+0x20>)
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	4608      	mov	r0, r1
 8005e20:	4611      	mov	r1, r2
 8005e22:	2200      	movs	r2, #0
 8005e24:	602a      	str	r2, [r5, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	f7fa fcf2 	bl	8000810 <_read>
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	d102      	bne.n	8005e36 <_read_r+0x1e>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	b103      	cbz	r3, 8005e36 <_read_r+0x1e>
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	bd38      	pop	{r3, r4, r5, pc}
 8005e38:	2000b2cc 	.word	0x2000b2cc

08005e3c <_write_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4d07      	ldr	r5, [pc, #28]	@ (8005e5c <_write_r+0x20>)
 8005e40:	4604      	mov	r4, r0
 8005e42:	4608      	mov	r0, r1
 8005e44:	4611      	mov	r1, r2
 8005e46:	2200      	movs	r2, #0
 8005e48:	602a      	str	r2, [r5, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f7fa fcee 	bl	800082c <_write>
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	d102      	bne.n	8005e5a <_write_r+0x1e>
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	b103      	cbz	r3, 8005e5a <_write_r+0x1e>
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	bd38      	pop	{r3, r4, r5, pc}
 8005e5c:	2000b2cc 	.word	0x2000b2cc

08005e60 <__errno>:
 8005e60:	4b01      	ldr	r3, [pc, #4]	@ (8005e68 <__errno+0x8>)
 8005e62:	6818      	ldr	r0, [r3, #0]
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20000108 	.word	0x20000108

08005e6c <__libc_init_array>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ea4 <__libc_init_array+0x38>)
 8005e70:	4c0d      	ldr	r4, [pc, #52]	@ (8005ea8 <__libc_init_array+0x3c>)
 8005e72:	1b64      	subs	r4, r4, r5
 8005e74:	10a4      	asrs	r4, r4, #2
 8005e76:	2600      	movs	r6, #0
 8005e78:	42a6      	cmp	r6, r4
 8005e7a:	d109      	bne.n	8005e90 <__libc_init_array+0x24>
 8005e7c:	4d0b      	ldr	r5, [pc, #44]	@ (8005eac <__libc_init_array+0x40>)
 8005e7e:	4c0c      	ldr	r4, [pc, #48]	@ (8005eb0 <__libc_init_array+0x44>)
 8005e80:	f000 fdfa 	bl	8006a78 <_init>
 8005e84:	1b64      	subs	r4, r4, r5
 8005e86:	10a4      	asrs	r4, r4, #2
 8005e88:	2600      	movs	r6, #0
 8005e8a:	42a6      	cmp	r6, r4
 8005e8c:	d105      	bne.n	8005e9a <__libc_init_array+0x2e>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e94:	4798      	blx	r3
 8005e96:	3601      	adds	r6, #1
 8005e98:	e7ee      	b.n	8005e78 <__libc_init_array+0xc>
 8005e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9e:	4798      	blx	r3
 8005ea0:	3601      	adds	r6, #1
 8005ea2:	e7f2      	b.n	8005e8a <__libc_init_array+0x1e>
 8005ea4:	08006bac 	.word	0x08006bac
 8005ea8:	08006bac 	.word	0x08006bac
 8005eac:	08006bac 	.word	0x08006bac
 8005eb0:	08006bb0 	.word	0x08006bb0

08005eb4 <__retarget_lock_init_recursive>:
 8005eb4:	4770      	bx	lr

08005eb6 <__retarget_lock_acquire_recursive>:
 8005eb6:	4770      	bx	lr

08005eb8 <__retarget_lock_release_recursive>:
 8005eb8:	4770      	bx	lr

08005eba <memcpy>:
 8005eba:	440a      	add	r2, r1
 8005ebc:	4291      	cmp	r1, r2
 8005ebe:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ec2:	d100      	bne.n	8005ec6 <memcpy+0xc>
 8005ec4:	4770      	bx	lr
 8005ec6:	b510      	push	{r4, lr}
 8005ec8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ed0:	4291      	cmp	r1, r2
 8005ed2:	d1f9      	bne.n	8005ec8 <memcpy+0xe>
 8005ed4:	bd10      	pop	{r4, pc}
	...

08005ed8 <_free_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4605      	mov	r5, r0
 8005edc:	2900      	cmp	r1, #0
 8005ede:	d041      	beq.n	8005f64 <_free_r+0x8c>
 8005ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee4:	1f0c      	subs	r4, r1, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bfb8      	it	lt
 8005eea:	18e4      	addlt	r4, r4, r3
 8005eec:	f000 f8e0 	bl	80060b0 <__malloc_lock>
 8005ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f68 <_free_r+0x90>)
 8005ef2:	6813      	ldr	r3, [r2, #0]
 8005ef4:	b933      	cbnz	r3, 8005f04 <_free_r+0x2c>
 8005ef6:	6063      	str	r3, [r4, #4]
 8005ef8:	6014      	str	r4, [r2, #0]
 8005efa:	4628      	mov	r0, r5
 8005efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f00:	f000 b8dc 	b.w	80060bc <__malloc_unlock>
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	d908      	bls.n	8005f1a <_free_r+0x42>
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	1821      	adds	r1, r4, r0
 8005f0c:	428b      	cmp	r3, r1
 8005f0e:	bf01      	itttt	eq
 8005f10:	6819      	ldreq	r1, [r3, #0]
 8005f12:	685b      	ldreq	r3, [r3, #4]
 8005f14:	1809      	addeq	r1, r1, r0
 8005f16:	6021      	streq	r1, [r4, #0]
 8005f18:	e7ed      	b.n	8005ef6 <_free_r+0x1e>
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	b10b      	cbz	r3, 8005f24 <_free_r+0x4c>
 8005f20:	42a3      	cmp	r3, r4
 8005f22:	d9fa      	bls.n	8005f1a <_free_r+0x42>
 8005f24:	6811      	ldr	r1, [r2, #0]
 8005f26:	1850      	adds	r0, r2, r1
 8005f28:	42a0      	cmp	r0, r4
 8005f2a:	d10b      	bne.n	8005f44 <_free_r+0x6c>
 8005f2c:	6820      	ldr	r0, [r4, #0]
 8005f2e:	4401      	add	r1, r0
 8005f30:	1850      	adds	r0, r2, r1
 8005f32:	4283      	cmp	r3, r0
 8005f34:	6011      	str	r1, [r2, #0]
 8005f36:	d1e0      	bne.n	8005efa <_free_r+0x22>
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	6053      	str	r3, [r2, #4]
 8005f3e:	4408      	add	r0, r1
 8005f40:	6010      	str	r0, [r2, #0]
 8005f42:	e7da      	b.n	8005efa <_free_r+0x22>
 8005f44:	d902      	bls.n	8005f4c <_free_r+0x74>
 8005f46:	230c      	movs	r3, #12
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	e7d6      	b.n	8005efa <_free_r+0x22>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	1821      	adds	r1, r4, r0
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf04      	itt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	6063      	str	r3, [r4, #4]
 8005f5a:	bf04      	itt	eq
 8005f5c:	1809      	addeq	r1, r1, r0
 8005f5e:	6021      	streq	r1, [r4, #0]
 8005f60:	6054      	str	r4, [r2, #4]
 8005f62:	e7ca      	b.n	8005efa <_free_r+0x22>
 8005f64:	bd38      	pop	{r3, r4, r5, pc}
 8005f66:	bf00      	nop
 8005f68:	2000b2d8 	.word	0x2000b2d8

08005f6c <sbrk_aligned>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8005fac <sbrk_aligned+0x40>)
 8005f70:	460c      	mov	r4, r1
 8005f72:	6831      	ldr	r1, [r6, #0]
 8005f74:	4605      	mov	r5, r0
 8005f76:	b911      	cbnz	r1, 8005f7e <sbrk_aligned+0x12>
 8005f78:	f000 fcea 	bl	8006950 <_sbrk_r>
 8005f7c:	6030      	str	r0, [r6, #0]
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	f000 fce5 	bl	8006950 <_sbrk_r>
 8005f86:	1c43      	adds	r3, r0, #1
 8005f88:	d103      	bne.n	8005f92 <sbrk_aligned+0x26>
 8005f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8005f8e:	4620      	mov	r0, r4
 8005f90:	bd70      	pop	{r4, r5, r6, pc}
 8005f92:	1cc4      	adds	r4, r0, #3
 8005f94:	f024 0403 	bic.w	r4, r4, #3
 8005f98:	42a0      	cmp	r0, r4
 8005f9a:	d0f8      	beq.n	8005f8e <sbrk_aligned+0x22>
 8005f9c:	1a21      	subs	r1, r4, r0
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f000 fcd6 	bl	8006950 <_sbrk_r>
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d1f2      	bne.n	8005f8e <sbrk_aligned+0x22>
 8005fa8:	e7ef      	b.n	8005f8a <sbrk_aligned+0x1e>
 8005faa:	bf00      	nop
 8005fac:	2000b2d4 	.word	0x2000b2d4

08005fb0 <_malloc_r>:
 8005fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb4:	1ccd      	adds	r5, r1, #3
 8005fb6:	f025 0503 	bic.w	r5, r5, #3
 8005fba:	3508      	adds	r5, #8
 8005fbc:	2d0c      	cmp	r5, #12
 8005fbe:	bf38      	it	cc
 8005fc0:	250c      	movcc	r5, #12
 8005fc2:	2d00      	cmp	r5, #0
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	db01      	blt.n	8005fcc <_malloc_r+0x1c>
 8005fc8:	42a9      	cmp	r1, r5
 8005fca:	d904      	bls.n	8005fd6 <_malloc_r+0x26>
 8005fcc:	230c      	movs	r3, #12
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060ac <_malloc_r+0xfc>
 8005fda:	f000 f869 	bl	80060b0 <__malloc_lock>
 8005fde:	f8d8 3000 	ldr.w	r3, [r8]
 8005fe2:	461c      	mov	r4, r3
 8005fe4:	bb44      	cbnz	r4, 8006038 <_malloc_r+0x88>
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff ffbf 	bl	8005f6c <sbrk_aligned>
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	d158      	bne.n	80060a6 <_malloc_r+0xf6>
 8005ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8005ff8:	4627      	mov	r7, r4
 8005ffa:	2f00      	cmp	r7, #0
 8005ffc:	d143      	bne.n	8006086 <_malloc_r+0xd6>
 8005ffe:	2c00      	cmp	r4, #0
 8006000:	d04b      	beq.n	800609a <_malloc_r+0xea>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	4639      	mov	r1, r7
 8006006:	4630      	mov	r0, r6
 8006008:	eb04 0903 	add.w	r9, r4, r3
 800600c:	f000 fca0 	bl	8006950 <_sbrk_r>
 8006010:	4581      	cmp	r9, r0
 8006012:	d142      	bne.n	800609a <_malloc_r+0xea>
 8006014:	6821      	ldr	r1, [r4, #0]
 8006016:	1a6d      	subs	r5, r5, r1
 8006018:	4629      	mov	r1, r5
 800601a:	4630      	mov	r0, r6
 800601c:	f7ff ffa6 	bl	8005f6c <sbrk_aligned>
 8006020:	3001      	adds	r0, #1
 8006022:	d03a      	beq.n	800609a <_malloc_r+0xea>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	442b      	add	r3, r5
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	f8d8 3000 	ldr.w	r3, [r8]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	bb62      	cbnz	r2, 800608c <_malloc_r+0xdc>
 8006032:	f8c8 7000 	str.w	r7, [r8]
 8006036:	e00f      	b.n	8006058 <_malloc_r+0xa8>
 8006038:	6822      	ldr	r2, [r4, #0]
 800603a:	1b52      	subs	r2, r2, r5
 800603c:	d420      	bmi.n	8006080 <_malloc_r+0xd0>
 800603e:	2a0b      	cmp	r2, #11
 8006040:	d917      	bls.n	8006072 <_malloc_r+0xc2>
 8006042:	1961      	adds	r1, r4, r5
 8006044:	42a3      	cmp	r3, r4
 8006046:	6025      	str	r5, [r4, #0]
 8006048:	bf18      	it	ne
 800604a:	6059      	strne	r1, [r3, #4]
 800604c:	6863      	ldr	r3, [r4, #4]
 800604e:	bf08      	it	eq
 8006050:	f8c8 1000 	streq.w	r1, [r8]
 8006054:	5162      	str	r2, [r4, r5]
 8006056:	604b      	str	r3, [r1, #4]
 8006058:	4630      	mov	r0, r6
 800605a:	f000 f82f 	bl	80060bc <__malloc_unlock>
 800605e:	f104 000b 	add.w	r0, r4, #11
 8006062:	1d23      	adds	r3, r4, #4
 8006064:	f020 0007 	bic.w	r0, r0, #7
 8006068:	1ac2      	subs	r2, r0, r3
 800606a:	bf1c      	itt	ne
 800606c:	1a1b      	subne	r3, r3, r0
 800606e:	50a3      	strne	r3, [r4, r2]
 8006070:	e7af      	b.n	8005fd2 <_malloc_r+0x22>
 8006072:	6862      	ldr	r2, [r4, #4]
 8006074:	42a3      	cmp	r3, r4
 8006076:	bf0c      	ite	eq
 8006078:	f8c8 2000 	streq.w	r2, [r8]
 800607c:	605a      	strne	r2, [r3, #4]
 800607e:	e7eb      	b.n	8006058 <_malloc_r+0xa8>
 8006080:	4623      	mov	r3, r4
 8006082:	6864      	ldr	r4, [r4, #4]
 8006084:	e7ae      	b.n	8005fe4 <_malloc_r+0x34>
 8006086:	463c      	mov	r4, r7
 8006088:	687f      	ldr	r7, [r7, #4]
 800608a:	e7b6      	b.n	8005ffa <_malloc_r+0x4a>
 800608c:	461a      	mov	r2, r3
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	42a3      	cmp	r3, r4
 8006092:	d1fb      	bne.n	800608c <_malloc_r+0xdc>
 8006094:	2300      	movs	r3, #0
 8006096:	6053      	str	r3, [r2, #4]
 8006098:	e7de      	b.n	8006058 <_malloc_r+0xa8>
 800609a:	230c      	movs	r3, #12
 800609c:	6033      	str	r3, [r6, #0]
 800609e:	4630      	mov	r0, r6
 80060a0:	f000 f80c 	bl	80060bc <__malloc_unlock>
 80060a4:	e794      	b.n	8005fd0 <_malloc_r+0x20>
 80060a6:	6005      	str	r5, [r0, #0]
 80060a8:	e7d6      	b.n	8006058 <_malloc_r+0xa8>
 80060aa:	bf00      	nop
 80060ac:	2000b2d8 	.word	0x2000b2d8

080060b0 <__malloc_lock>:
 80060b0:	4801      	ldr	r0, [pc, #4]	@ (80060b8 <__malloc_lock+0x8>)
 80060b2:	f7ff bf00 	b.w	8005eb6 <__retarget_lock_acquire_recursive>
 80060b6:	bf00      	nop
 80060b8:	2000b2d0 	.word	0x2000b2d0

080060bc <__malloc_unlock>:
 80060bc:	4801      	ldr	r0, [pc, #4]	@ (80060c4 <__malloc_unlock+0x8>)
 80060be:	f7ff befb 	b.w	8005eb8 <__retarget_lock_release_recursive>
 80060c2:	bf00      	nop
 80060c4:	2000b2d0 	.word	0x2000b2d0

080060c8 <__sfputc_r>:
 80060c8:	6893      	ldr	r3, [r2, #8]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	b410      	push	{r4}
 80060d0:	6093      	str	r3, [r2, #8]
 80060d2:	da08      	bge.n	80060e6 <__sfputc_r+0x1e>
 80060d4:	6994      	ldr	r4, [r2, #24]
 80060d6:	42a3      	cmp	r3, r4
 80060d8:	db01      	blt.n	80060de <__sfputc_r+0x16>
 80060da:	290a      	cmp	r1, #10
 80060dc:	d103      	bne.n	80060e6 <__sfputc_r+0x1e>
 80060de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060e2:	f000 bba1 	b.w	8006828 <__swbuf_r>
 80060e6:	6813      	ldr	r3, [r2, #0]
 80060e8:	1c58      	adds	r0, r3, #1
 80060ea:	6010      	str	r0, [r2, #0]
 80060ec:	7019      	strb	r1, [r3, #0]
 80060ee:	4608      	mov	r0, r1
 80060f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <__sfputs_r>:
 80060f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f8:	4606      	mov	r6, r0
 80060fa:	460f      	mov	r7, r1
 80060fc:	4614      	mov	r4, r2
 80060fe:	18d5      	adds	r5, r2, r3
 8006100:	42ac      	cmp	r4, r5
 8006102:	d101      	bne.n	8006108 <__sfputs_r+0x12>
 8006104:	2000      	movs	r0, #0
 8006106:	e007      	b.n	8006118 <__sfputs_r+0x22>
 8006108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800610c:	463a      	mov	r2, r7
 800610e:	4630      	mov	r0, r6
 8006110:	f7ff ffda 	bl	80060c8 <__sfputc_r>
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d1f3      	bne.n	8006100 <__sfputs_r+0xa>
 8006118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800611c <_vfiprintf_r>:
 800611c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006120:	460d      	mov	r5, r1
 8006122:	b09d      	sub	sp, #116	@ 0x74
 8006124:	4614      	mov	r4, r2
 8006126:	4698      	mov	r8, r3
 8006128:	4606      	mov	r6, r0
 800612a:	b118      	cbz	r0, 8006134 <_vfiprintf_r+0x18>
 800612c:	6a03      	ldr	r3, [r0, #32]
 800612e:	b90b      	cbnz	r3, 8006134 <_vfiprintf_r+0x18>
 8006130:	f7ff fd5e 	bl	8005bf0 <__sinit>
 8006134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006136:	07d9      	lsls	r1, r3, #31
 8006138:	d405      	bmi.n	8006146 <_vfiprintf_r+0x2a>
 800613a:	89ab      	ldrh	r3, [r5, #12]
 800613c:	059a      	lsls	r2, r3, #22
 800613e:	d402      	bmi.n	8006146 <_vfiprintf_r+0x2a>
 8006140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006142:	f7ff feb8 	bl	8005eb6 <__retarget_lock_acquire_recursive>
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	071b      	lsls	r3, r3, #28
 800614a:	d501      	bpl.n	8006150 <_vfiprintf_r+0x34>
 800614c:	692b      	ldr	r3, [r5, #16]
 800614e:	b99b      	cbnz	r3, 8006178 <_vfiprintf_r+0x5c>
 8006150:	4629      	mov	r1, r5
 8006152:	4630      	mov	r0, r6
 8006154:	f000 fba6 	bl	80068a4 <__swsetup_r>
 8006158:	b170      	cbz	r0, 8006178 <_vfiprintf_r+0x5c>
 800615a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800615c:	07dc      	lsls	r4, r3, #31
 800615e:	d504      	bpl.n	800616a <_vfiprintf_r+0x4e>
 8006160:	f04f 30ff 	mov.w	r0, #4294967295
 8006164:	b01d      	add	sp, #116	@ 0x74
 8006166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616a:	89ab      	ldrh	r3, [r5, #12]
 800616c:	0598      	lsls	r0, r3, #22
 800616e:	d4f7      	bmi.n	8006160 <_vfiprintf_r+0x44>
 8006170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006172:	f7ff fea1 	bl	8005eb8 <__retarget_lock_release_recursive>
 8006176:	e7f3      	b.n	8006160 <_vfiprintf_r+0x44>
 8006178:	2300      	movs	r3, #0
 800617a:	9309      	str	r3, [sp, #36]	@ 0x24
 800617c:	2320      	movs	r3, #32
 800617e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006182:	f8cd 800c 	str.w	r8, [sp, #12]
 8006186:	2330      	movs	r3, #48	@ 0x30
 8006188:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006338 <_vfiprintf_r+0x21c>
 800618c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006190:	f04f 0901 	mov.w	r9, #1
 8006194:	4623      	mov	r3, r4
 8006196:	469a      	mov	sl, r3
 8006198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800619c:	b10a      	cbz	r2, 80061a2 <_vfiprintf_r+0x86>
 800619e:	2a25      	cmp	r2, #37	@ 0x25
 80061a0:	d1f9      	bne.n	8006196 <_vfiprintf_r+0x7a>
 80061a2:	ebba 0b04 	subs.w	fp, sl, r4
 80061a6:	d00b      	beq.n	80061c0 <_vfiprintf_r+0xa4>
 80061a8:	465b      	mov	r3, fp
 80061aa:	4622      	mov	r2, r4
 80061ac:	4629      	mov	r1, r5
 80061ae:	4630      	mov	r0, r6
 80061b0:	f7ff ffa1 	bl	80060f6 <__sfputs_r>
 80061b4:	3001      	adds	r0, #1
 80061b6:	f000 80a7 	beq.w	8006308 <_vfiprintf_r+0x1ec>
 80061ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061bc:	445a      	add	r2, fp
 80061be:	9209      	str	r2, [sp, #36]	@ 0x24
 80061c0:	f89a 3000 	ldrb.w	r3, [sl]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 809f 	beq.w	8006308 <_vfiprintf_r+0x1ec>
 80061ca:	2300      	movs	r3, #0
 80061cc:	f04f 32ff 	mov.w	r2, #4294967295
 80061d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061d4:	f10a 0a01 	add.w	sl, sl, #1
 80061d8:	9304      	str	r3, [sp, #16]
 80061da:	9307      	str	r3, [sp, #28]
 80061dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80061e2:	4654      	mov	r4, sl
 80061e4:	2205      	movs	r2, #5
 80061e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ea:	4853      	ldr	r0, [pc, #332]	@ (8006338 <_vfiprintf_r+0x21c>)
 80061ec:	f7fa f808 	bl	8000200 <memchr>
 80061f0:	9a04      	ldr	r2, [sp, #16]
 80061f2:	b9d8      	cbnz	r0, 800622c <_vfiprintf_r+0x110>
 80061f4:	06d1      	lsls	r1, r2, #27
 80061f6:	bf44      	itt	mi
 80061f8:	2320      	movmi	r3, #32
 80061fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061fe:	0713      	lsls	r3, r2, #28
 8006200:	bf44      	itt	mi
 8006202:	232b      	movmi	r3, #43	@ 0x2b
 8006204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006208:	f89a 3000 	ldrb.w	r3, [sl]
 800620c:	2b2a      	cmp	r3, #42	@ 0x2a
 800620e:	d015      	beq.n	800623c <_vfiprintf_r+0x120>
 8006210:	9a07      	ldr	r2, [sp, #28]
 8006212:	4654      	mov	r4, sl
 8006214:	2000      	movs	r0, #0
 8006216:	f04f 0c0a 	mov.w	ip, #10
 800621a:	4621      	mov	r1, r4
 800621c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006220:	3b30      	subs	r3, #48	@ 0x30
 8006222:	2b09      	cmp	r3, #9
 8006224:	d94b      	bls.n	80062be <_vfiprintf_r+0x1a2>
 8006226:	b1b0      	cbz	r0, 8006256 <_vfiprintf_r+0x13a>
 8006228:	9207      	str	r2, [sp, #28]
 800622a:	e014      	b.n	8006256 <_vfiprintf_r+0x13a>
 800622c:	eba0 0308 	sub.w	r3, r0, r8
 8006230:	fa09 f303 	lsl.w	r3, r9, r3
 8006234:	4313      	orrs	r3, r2
 8006236:	9304      	str	r3, [sp, #16]
 8006238:	46a2      	mov	sl, r4
 800623a:	e7d2      	b.n	80061e2 <_vfiprintf_r+0xc6>
 800623c:	9b03      	ldr	r3, [sp, #12]
 800623e:	1d19      	adds	r1, r3, #4
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	9103      	str	r1, [sp, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	bfbb      	ittet	lt
 8006248:	425b      	neglt	r3, r3
 800624a:	f042 0202 	orrlt.w	r2, r2, #2
 800624e:	9307      	strge	r3, [sp, #28]
 8006250:	9307      	strlt	r3, [sp, #28]
 8006252:	bfb8      	it	lt
 8006254:	9204      	strlt	r2, [sp, #16]
 8006256:	7823      	ldrb	r3, [r4, #0]
 8006258:	2b2e      	cmp	r3, #46	@ 0x2e
 800625a:	d10a      	bne.n	8006272 <_vfiprintf_r+0x156>
 800625c:	7863      	ldrb	r3, [r4, #1]
 800625e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006260:	d132      	bne.n	80062c8 <_vfiprintf_r+0x1ac>
 8006262:	9b03      	ldr	r3, [sp, #12]
 8006264:	1d1a      	adds	r2, r3, #4
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	9203      	str	r2, [sp, #12]
 800626a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800626e:	3402      	adds	r4, #2
 8006270:	9305      	str	r3, [sp, #20]
 8006272:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006348 <_vfiprintf_r+0x22c>
 8006276:	7821      	ldrb	r1, [r4, #0]
 8006278:	2203      	movs	r2, #3
 800627a:	4650      	mov	r0, sl
 800627c:	f7f9 ffc0 	bl	8000200 <memchr>
 8006280:	b138      	cbz	r0, 8006292 <_vfiprintf_r+0x176>
 8006282:	9b04      	ldr	r3, [sp, #16]
 8006284:	eba0 000a 	sub.w	r0, r0, sl
 8006288:	2240      	movs	r2, #64	@ 0x40
 800628a:	4082      	lsls	r2, r0
 800628c:	4313      	orrs	r3, r2
 800628e:	3401      	adds	r4, #1
 8006290:	9304      	str	r3, [sp, #16]
 8006292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006296:	4829      	ldr	r0, [pc, #164]	@ (800633c <_vfiprintf_r+0x220>)
 8006298:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800629c:	2206      	movs	r2, #6
 800629e:	f7f9 ffaf 	bl	8000200 <memchr>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d03f      	beq.n	8006326 <_vfiprintf_r+0x20a>
 80062a6:	4b26      	ldr	r3, [pc, #152]	@ (8006340 <_vfiprintf_r+0x224>)
 80062a8:	bb1b      	cbnz	r3, 80062f2 <_vfiprintf_r+0x1d6>
 80062aa:	9b03      	ldr	r3, [sp, #12]
 80062ac:	3307      	adds	r3, #7
 80062ae:	f023 0307 	bic.w	r3, r3, #7
 80062b2:	3308      	adds	r3, #8
 80062b4:	9303      	str	r3, [sp, #12]
 80062b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b8:	443b      	add	r3, r7
 80062ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80062bc:	e76a      	b.n	8006194 <_vfiprintf_r+0x78>
 80062be:	fb0c 3202 	mla	r2, ip, r2, r3
 80062c2:	460c      	mov	r4, r1
 80062c4:	2001      	movs	r0, #1
 80062c6:	e7a8      	b.n	800621a <_vfiprintf_r+0xfe>
 80062c8:	2300      	movs	r3, #0
 80062ca:	3401      	adds	r4, #1
 80062cc:	9305      	str	r3, [sp, #20]
 80062ce:	4619      	mov	r1, r3
 80062d0:	f04f 0c0a 	mov.w	ip, #10
 80062d4:	4620      	mov	r0, r4
 80062d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062da:	3a30      	subs	r2, #48	@ 0x30
 80062dc:	2a09      	cmp	r2, #9
 80062de:	d903      	bls.n	80062e8 <_vfiprintf_r+0x1cc>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0c6      	beq.n	8006272 <_vfiprintf_r+0x156>
 80062e4:	9105      	str	r1, [sp, #20]
 80062e6:	e7c4      	b.n	8006272 <_vfiprintf_r+0x156>
 80062e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80062ec:	4604      	mov	r4, r0
 80062ee:	2301      	movs	r3, #1
 80062f0:	e7f0      	b.n	80062d4 <_vfiprintf_r+0x1b8>
 80062f2:	ab03      	add	r3, sp, #12
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	462a      	mov	r2, r5
 80062f8:	4b12      	ldr	r3, [pc, #72]	@ (8006344 <_vfiprintf_r+0x228>)
 80062fa:	a904      	add	r1, sp, #16
 80062fc:	4630      	mov	r0, r6
 80062fe:	f3af 8000 	nop.w
 8006302:	4607      	mov	r7, r0
 8006304:	1c78      	adds	r0, r7, #1
 8006306:	d1d6      	bne.n	80062b6 <_vfiprintf_r+0x19a>
 8006308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800630a:	07d9      	lsls	r1, r3, #31
 800630c:	d405      	bmi.n	800631a <_vfiprintf_r+0x1fe>
 800630e:	89ab      	ldrh	r3, [r5, #12]
 8006310:	059a      	lsls	r2, r3, #22
 8006312:	d402      	bmi.n	800631a <_vfiprintf_r+0x1fe>
 8006314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006316:	f7ff fdcf 	bl	8005eb8 <__retarget_lock_release_recursive>
 800631a:	89ab      	ldrh	r3, [r5, #12]
 800631c:	065b      	lsls	r3, r3, #25
 800631e:	f53f af1f 	bmi.w	8006160 <_vfiprintf_r+0x44>
 8006322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006324:	e71e      	b.n	8006164 <_vfiprintf_r+0x48>
 8006326:	ab03      	add	r3, sp, #12
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	462a      	mov	r2, r5
 800632c:	4b05      	ldr	r3, [pc, #20]	@ (8006344 <_vfiprintf_r+0x228>)
 800632e:	a904      	add	r1, sp, #16
 8006330:	4630      	mov	r0, r6
 8006332:	f000 f879 	bl	8006428 <_printf_i>
 8006336:	e7e4      	b.n	8006302 <_vfiprintf_r+0x1e6>
 8006338:	08006b6e 	.word	0x08006b6e
 800633c:	08006b78 	.word	0x08006b78
 8006340:	00000000 	.word	0x00000000
 8006344:	080060f7 	.word	0x080060f7
 8006348:	08006b74 	.word	0x08006b74

0800634c <_printf_common>:
 800634c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006350:	4616      	mov	r6, r2
 8006352:	4698      	mov	r8, r3
 8006354:	688a      	ldr	r2, [r1, #8]
 8006356:	690b      	ldr	r3, [r1, #16]
 8006358:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800635c:	4293      	cmp	r3, r2
 800635e:	bfb8      	it	lt
 8006360:	4613      	movlt	r3, r2
 8006362:	6033      	str	r3, [r6, #0]
 8006364:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006368:	4607      	mov	r7, r0
 800636a:	460c      	mov	r4, r1
 800636c:	b10a      	cbz	r2, 8006372 <_printf_common+0x26>
 800636e:	3301      	adds	r3, #1
 8006370:	6033      	str	r3, [r6, #0]
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	0699      	lsls	r1, r3, #26
 8006376:	bf42      	ittt	mi
 8006378:	6833      	ldrmi	r3, [r6, #0]
 800637a:	3302      	addmi	r3, #2
 800637c:	6033      	strmi	r3, [r6, #0]
 800637e:	6825      	ldr	r5, [r4, #0]
 8006380:	f015 0506 	ands.w	r5, r5, #6
 8006384:	d106      	bne.n	8006394 <_printf_common+0x48>
 8006386:	f104 0a19 	add.w	sl, r4, #25
 800638a:	68e3      	ldr	r3, [r4, #12]
 800638c:	6832      	ldr	r2, [r6, #0]
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	42ab      	cmp	r3, r5
 8006392:	dc26      	bgt.n	80063e2 <_printf_common+0x96>
 8006394:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006398:	6822      	ldr	r2, [r4, #0]
 800639a:	3b00      	subs	r3, #0
 800639c:	bf18      	it	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	0692      	lsls	r2, r2, #26
 80063a2:	d42b      	bmi.n	80063fc <_printf_common+0xb0>
 80063a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063a8:	4641      	mov	r1, r8
 80063aa:	4638      	mov	r0, r7
 80063ac:	47c8      	blx	r9
 80063ae:	3001      	adds	r0, #1
 80063b0:	d01e      	beq.n	80063f0 <_printf_common+0xa4>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	6922      	ldr	r2, [r4, #16]
 80063b6:	f003 0306 	and.w	r3, r3, #6
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	bf02      	ittt	eq
 80063be:	68e5      	ldreq	r5, [r4, #12]
 80063c0:	6833      	ldreq	r3, [r6, #0]
 80063c2:	1aed      	subeq	r5, r5, r3
 80063c4:	68a3      	ldr	r3, [r4, #8]
 80063c6:	bf0c      	ite	eq
 80063c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063cc:	2500      	movne	r5, #0
 80063ce:	4293      	cmp	r3, r2
 80063d0:	bfc4      	itt	gt
 80063d2:	1a9b      	subgt	r3, r3, r2
 80063d4:	18ed      	addgt	r5, r5, r3
 80063d6:	2600      	movs	r6, #0
 80063d8:	341a      	adds	r4, #26
 80063da:	42b5      	cmp	r5, r6
 80063dc:	d11a      	bne.n	8006414 <_printf_common+0xc8>
 80063de:	2000      	movs	r0, #0
 80063e0:	e008      	b.n	80063f4 <_printf_common+0xa8>
 80063e2:	2301      	movs	r3, #1
 80063e4:	4652      	mov	r2, sl
 80063e6:	4641      	mov	r1, r8
 80063e8:	4638      	mov	r0, r7
 80063ea:	47c8      	blx	r9
 80063ec:	3001      	adds	r0, #1
 80063ee:	d103      	bne.n	80063f8 <_printf_common+0xac>
 80063f0:	f04f 30ff 	mov.w	r0, #4294967295
 80063f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f8:	3501      	adds	r5, #1
 80063fa:	e7c6      	b.n	800638a <_printf_common+0x3e>
 80063fc:	18e1      	adds	r1, r4, r3
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	2030      	movs	r0, #48	@ 0x30
 8006402:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006406:	4422      	add	r2, r4
 8006408:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800640c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006410:	3302      	adds	r3, #2
 8006412:	e7c7      	b.n	80063a4 <_printf_common+0x58>
 8006414:	2301      	movs	r3, #1
 8006416:	4622      	mov	r2, r4
 8006418:	4641      	mov	r1, r8
 800641a:	4638      	mov	r0, r7
 800641c:	47c8      	blx	r9
 800641e:	3001      	adds	r0, #1
 8006420:	d0e6      	beq.n	80063f0 <_printf_common+0xa4>
 8006422:	3601      	adds	r6, #1
 8006424:	e7d9      	b.n	80063da <_printf_common+0x8e>
	...

08006428 <_printf_i>:
 8006428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800642c:	7e0f      	ldrb	r7, [r1, #24]
 800642e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006430:	2f78      	cmp	r7, #120	@ 0x78
 8006432:	4691      	mov	r9, r2
 8006434:	4680      	mov	r8, r0
 8006436:	460c      	mov	r4, r1
 8006438:	469a      	mov	sl, r3
 800643a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800643e:	d807      	bhi.n	8006450 <_printf_i+0x28>
 8006440:	2f62      	cmp	r7, #98	@ 0x62
 8006442:	d80a      	bhi.n	800645a <_printf_i+0x32>
 8006444:	2f00      	cmp	r7, #0
 8006446:	f000 80d2 	beq.w	80065ee <_printf_i+0x1c6>
 800644a:	2f58      	cmp	r7, #88	@ 0x58
 800644c:	f000 80b9 	beq.w	80065c2 <_printf_i+0x19a>
 8006450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006454:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006458:	e03a      	b.n	80064d0 <_printf_i+0xa8>
 800645a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800645e:	2b15      	cmp	r3, #21
 8006460:	d8f6      	bhi.n	8006450 <_printf_i+0x28>
 8006462:	a101      	add	r1, pc, #4	@ (adr r1, 8006468 <_printf_i+0x40>)
 8006464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006468:	080064c1 	.word	0x080064c1
 800646c:	080064d5 	.word	0x080064d5
 8006470:	08006451 	.word	0x08006451
 8006474:	08006451 	.word	0x08006451
 8006478:	08006451 	.word	0x08006451
 800647c:	08006451 	.word	0x08006451
 8006480:	080064d5 	.word	0x080064d5
 8006484:	08006451 	.word	0x08006451
 8006488:	08006451 	.word	0x08006451
 800648c:	08006451 	.word	0x08006451
 8006490:	08006451 	.word	0x08006451
 8006494:	080065d5 	.word	0x080065d5
 8006498:	080064ff 	.word	0x080064ff
 800649c:	0800658f 	.word	0x0800658f
 80064a0:	08006451 	.word	0x08006451
 80064a4:	08006451 	.word	0x08006451
 80064a8:	080065f7 	.word	0x080065f7
 80064ac:	08006451 	.word	0x08006451
 80064b0:	080064ff 	.word	0x080064ff
 80064b4:	08006451 	.word	0x08006451
 80064b8:	08006451 	.word	0x08006451
 80064bc:	08006597 	.word	0x08006597
 80064c0:	6833      	ldr	r3, [r6, #0]
 80064c2:	1d1a      	adds	r2, r3, #4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6032      	str	r2, [r6, #0]
 80064c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064d0:	2301      	movs	r3, #1
 80064d2:	e09d      	b.n	8006610 <_printf_i+0x1e8>
 80064d4:	6833      	ldr	r3, [r6, #0]
 80064d6:	6820      	ldr	r0, [r4, #0]
 80064d8:	1d19      	adds	r1, r3, #4
 80064da:	6031      	str	r1, [r6, #0]
 80064dc:	0606      	lsls	r6, r0, #24
 80064de:	d501      	bpl.n	80064e4 <_printf_i+0xbc>
 80064e0:	681d      	ldr	r5, [r3, #0]
 80064e2:	e003      	b.n	80064ec <_printf_i+0xc4>
 80064e4:	0645      	lsls	r5, r0, #25
 80064e6:	d5fb      	bpl.n	80064e0 <_printf_i+0xb8>
 80064e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064ec:	2d00      	cmp	r5, #0
 80064ee:	da03      	bge.n	80064f8 <_printf_i+0xd0>
 80064f0:	232d      	movs	r3, #45	@ 0x2d
 80064f2:	426d      	negs	r5, r5
 80064f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064f8:	4859      	ldr	r0, [pc, #356]	@ (8006660 <_printf_i+0x238>)
 80064fa:	230a      	movs	r3, #10
 80064fc:	e011      	b.n	8006522 <_printf_i+0xfa>
 80064fe:	6821      	ldr	r1, [r4, #0]
 8006500:	6833      	ldr	r3, [r6, #0]
 8006502:	0608      	lsls	r0, r1, #24
 8006504:	f853 5b04 	ldr.w	r5, [r3], #4
 8006508:	d402      	bmi.n	8006510 <_printf_i+0xe8>
 800650a:	0649      	lsls	r1, r1, #25
 800650c:	bf48      	it	mi
 800650e:	b2ad      	uxthmi	r5, r5
 8006510:	2f6f      	cmp	r7, #111	@ 0x6f
 8006512:	4853      	ldr	r0, [pc, #332]	@ (8006660 <_printf_i+0x238>)
 8006514:	6033      	str	r3, [r6, #0]
 8006516:	bf14      	ite	ne
 8006518:	230a      	movne	r3, #10
 800651a:	2308      	moveq	r3, #8
 800651c:	2100      	movs	r1, #0
 800651e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006522:	6866      	ldr	r6, [r4, #4]
 8006524:	60a6      	str	r6, [r4, #8]
 8006526:	2e00      	cmp	r6, #0
 8006528:	bfa2      	ittt	ge
 800652a:	6821      	ldrge	r1, [r4, #0]
 800652c:	f021 0104 	bicge.w	r1, r1, #4
 8006530:	6021      	strge	r1, [r4, #0]
 8006532:	b90d      	cbnz	r5, 8006538 <_printf_i+0x110>
 8006534:	2e00      	cmp	r6, #0
 8006536:	d04b      	beq.n	80065d0 <_printf_i+0x1a8>
 8006538:	4616      	mov	r6, r2
 800653a:	fbb5 f1f3 	udiv	r1, r5, r3
 800653e:	fb03 5711 	mls	r7, r3, r1, r5
 8006542:	5dc7      	ldrb	r7, [r0, r7]
 8006544:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006548:	462f      	mov	r7, r5
 800654a:	42bb      	cmp	r3, r7
 800654c:	460d      	mov	r5, r1
 800654e:	d9f4      	bls.n	800653a <_printf_i+0x112>
 8006550:	2b08      	cmp	r3, #8
 8006552:	d10b      	bne.n	800656c <_printf_i+0x144>
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	07df      	lsls	r7, r3, #31
 8006558:	d508      	bpl.n	800656c <_printf_i+0x144>
 800655a:	6923      	ldr	r3, [r4, #16]
 800655c:	6861      	ldr	r1, [r4, #4]
 800655e:	4299      	cmp	r1, r3
 8006560:	bfde      	ittt	le
 8006562:	2330      	movle	r3, #48	@ 0x30
 8006564:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006568:	f106 36ff 	addle.w	r6, r6, #4294967295
 800656c:	1b92      	subs	r2, r2, r6
 800656e:	6122      	str	r2, [r4, #16]
 8006570:	f8cd a000 	str.w	sl, [sp]
 8006574:	464b      	mov	r3, r9
 8006576:	aa03      	add	r2, sp, #12
 8006578:	4621      	mov	r1, r4
 800657a:	4640      	mov	r0, r8
 800657c:	f7ff fee6 	bl	800634c <_printf_common>
 8006580:	3001      	adds	r0, #1
 8006582:	d14a      	bne.n	800661a <_printf_i+0x1f2>
 8006584:	f04f 30ff 	mov.w	r0, #4294967295
 8006588:	b004      	add	sp, #16
 800658a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	f043 0320 	orr.w	r3, r3, #32
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	4833      	ldr	r0, [pc, #204]	@ (8006664 <_printf_i+0x23c>)
 8006598:	2778      	movs	r7, #120	@ 0x78
 800659a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	6831      	ldr	r1, [r6, #0]
 80065a2:	061f      	lsls	r7, r3, #24
 80065a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80065a8:	d402      	bmi.n	80065b0 <_printf_i+0x188>
 80065aa:	065f      	lsls	r7, r3, #25
 80065ac:	bf48      	it	mi
 80065ae:	b2ad      	uxthmi	r5, r5
 80065b0:	6031      	str	r1, [r6, #0]
 80065b2:	07d9      	lsls	r1, r3, #31
 80065b4:	bf44      	itt	mi
 80065b6:	f043 0320 	orrmi.w	r3, r3, #32
 80065ba:	6023      	strmi	r3, [r4, #0]
 80065bc:	b11d      	cbz	r5, 80065c6 <_printf_i+0x19e>
 80065be:	2310      	movs	r3, #16
 80065c0:	e7ac      	b.n	800651c <_printf_i+0xf4>
 80065c2:	4827      	ldr	r0, [pc, #156]	@ (8006660 <_printf_i+0x238>)
 80065c4:	e7e9      	b.n	800659a <_printf_i+0x172>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	f023 0320 	bic.w	r3, r3, #32
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	e7f6      	b.n	80065be <_printf_i+0x196>
 80065d0:	4616      	mov	r6, r2
 80065d2:	e7bd      	b.n	8006550 <_printf_i+0x128>
 80065d4:	6833      	ldr	r3, [r6, #0]
 80065d6:	6825      	ldr	r5, [r4, #0]
 80065d8:	6961      	ldr	r1, [r4, #20]
 80065da:	1d18      	adds	r0, r3, #4
 80065dc:	6030      	str	r0, [r6, #0]
 80065de:	062e      	lsls	r6, r5, #24
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	d501      	bpl.n	80065e8 <_printf_i+0x1c0>
 80065e4:	6019      	str	r1, [r3, #0]
 80065e6:	e002      	b.n	80065ee <_printf_i+0x1c6>
 80065e8:	0668      	lsls	r0, r5, #25
 80065ea:	d5fb      	bpl.n	80065e4 <_printf_i+0x1bc>
 80065ec:	8019      	strh	r1, [r3, #0]
 80065ee:	2300      	movs	r3, #0
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	4616      	mov	r6, r2
 80065f4:	e7bc      	b.n	8006570 <_printf_i+0x148>
 80065f6:	6833      	ldr	r3, [r6, #0]
 80065f8:	1d1a      	adds	r2, r3, #4
 80065fa:	6032      	str	r2, [r6, #0]
 80065fc:	681e      	ldr	r6, [r3, #0]
 80065fe:	6862      	ldr	r2, [r4, #4]
 8006600:	2100      	movs	r1, #0
 8006602:	4630      	mov	r0, r6
 8006604:	f7f9 fdfc 	bl	8000200 <memchr>
 8006608:	b108      	cbz	r0, 800660e <_printf_i+0x1e6>
 800660a:	1b80      	subs	r0, r0, r6
 800660c:	6060      	str	r0, [r4, #4]
 800660e:	6863      	ldr	r3, [r4, #4]
 8006610:	6123      	str	r3, [r4, #16]
 8006612:	2300      	movs	r3, #0
 8006614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006618:	e7aa      	b.n	8006570 <_printf_i+0x148>
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	4632      	mov	r2, r6
 800661e:	4649      	mov	r1, r9
 8006620:	4640      	mov	r0, r8
 8006622:	47d0      	blx	sl
 8006624:	3001      	adds	r0, #1
 8006626:	d0ad      	beq.n	8006584 <_printf_i+0x15c>
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	079b      	lsls	r3, r3, #30
 800662c:	d413      	bmi.n	8006656 <_printf_i+0x22e>
 800662e:	68e0      	ldr	r0, [r4, #12]
 8006630:	9b03      	ldr	r3, [sp, #12]
 8006632:	4298      	cmp	r0, r3
 8006634:	bfb8      	it	lt
 8006636:	4618      	movlt	r0, r3
 8006638:	e7a6      	b.n	8006588 <_printf_i+0x160>
 800663a:	2301      	movs	r3, #1
 800663c:	4632      	mov	r2, r6
 800663e:	4649      	mov	r1, r9
 8006640:	4640      	mov	r0, r8
 8006642:	47d0      	blx	sl
 8006644:	3001      	adds	r0, #1
 8006646:	d09d      	beq.n	8006584 <_printf_i+0x15c>
 8006648:	3501      	adds	r5, #1
 800664a:	68e3      	ldr	r3, [r4, #12]
 800664c:	9903      	ldr	r1, [sp, #12]
 800664e:	1a5b      	subs	r3, r3, r1
 8006650:	42ab      	cmp	r3, r5
 8006652:	dcf2      	bgt.n	800663a <_printf_i+0x212>
 8006654:	e7eb      	b.n	800662e <_printf_i+0x206>
 8006656:	2500      	movs	r5, #0
 8006658:	f104 0619 	add.w	r6, r4, #25
 800665c:	e7f5      	b.n	800664a <_printf_i+0x222>
 800665e:	bf00      	nop
 8006660:	08006b7f 	.word	0x08006b7f
 8006664:	08006b90 	.word	0x08006b90

08006668 <__sflush_r>:
 8006668:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800666c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006670:	0716      	lsls	r6, r2, #28
 8006672:	4605      	mov	r5, r0
 8006674:	460c      	mov	r4, r1
 8006676:	d454      	bmi.n	8006722 <__sflush_r+0xba>
 8006678:	684b      	ldr	r3, [r1, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	dc02      	bgt.n	8006684 <__sflush_r+0x1c>
 800667e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	dd48      	ble.n	8006716 <__sflush_r+0xae>
 8006684:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006686:	2e00      	cmp	r6, #0
 8006688:	d045      	beq.n	8006716 <__sflush_r+0xae>
 800668a:	2300      	movs	r3, #0
 800668c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006690:	682f      	ldr	r7, [r5, #0]
 8006692:	6a21      	ldr	r1, [r4, #32]
 8006694:	602b      	str	r3, [r5, #0]
 8006696:	d030      	beq.n	80066fa <__sflush_r+0x92>
 8006698:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800669a:	89a3      	ldrh	r3, [r4, #12]
 800669c:	0759      	lsls	r1, r3, #29
 800669e:	d505      	bpl.n	80066ac <__sflush_r+0x44>
 80066a0:	6863      	ldr	r3, [r4, #4]
 80066a2:	1ad2      	subs	r2, r2, r3
 80066a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066a6:	b10b      	cbz	r3, 80066ac <__sflush_r+0x44>
 80066a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066aa:	1ad2      	subs	r2, r2, r3
 80066ac:	2300      	movs	r3, #0
 80066ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066b0:	6a21      	ldr	r1, [r4, #32]
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b0      	blx	r6
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	d106      	bne.n	80066ca <__sflush_r+0x62>
 80066bc:	6829      	ldr	r1, [r5, #0]
 80066be:	291d      	cmp	r1, #29
 80066c0:	d82b      	bhi.n	800671a <__sflush_r+0xb2>
 80066c2:	4a2a      	ldr	r2, [pc, #168]	@ (800676c <__sflush_r+0x104>)
 80066c4:	410a      	asrs	r2, r1
 80066c6:	07d6      	lsls	r6, r2, #31
 80066c8:	d427      	bmi.n	800671a <__sflush_r+0xb2>
 80066ca:	2200      	movs	r2, #0
 80066cc:	6062      	str	r2, [r4, #4]
 80066ce:	04d9      	lsls	r1, r3, #19
 80066d0:	6922      	ldr	r2, [r4, #16]
 80066d2:	6022      	str	r2, [r4, #0]
 80066d4:	d504      	bpl.n	80066e0 <__sflush_r+0x78>
 80066d6:	1c42      	adds	r2, r0, #1
 80066d8:	d101      	bne.n	80066de <__sflush_r+0x76>
 80066da:	682b      	ldr	r3, [r5, #0]
 80066dc:	b903      	cbnz	r3, 80066e0 <__sflush_r+0x78>
 80066de:	6560      	str	r0, [r4, #84]	@ 0x54
 80066e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066e2:	602f      	str	r7, [r5, #0]
 80066e4:	b1b9      	cbz	r1, 8006716 <__sflush_r+0xae>
 80066e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066ea:	4299      	cmp	r1, r3
 80066ec:	d002      	beq.n	80066f4 <__sflush_r+0x8c>
 80066ee:	4628      	mov	r0, r5
 80066f0:	f7ff fbf2 	bl	8005ed8 <_free_r>
 80066f4:	2300      	movs	r3, #0
 80066f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80066f8:	e00d      	b.n	8006716 <__sflush_r+0xae>
 80066fa:	2301      	movs	r3, #1
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b0      	blx	r6
 8006700:	4602      	mov	r2, r0
 8006702:	1c50      	adds	r0, r2, #1
 8006704:	d1c9      	bne.n	800669a <__sflush_r+0x32>
 8006706:	682b      	ldr	r3, [r5, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0c6      	beq.n	800669a <__sflush_r+0x32>
 800670c:	2b1d      	cmp	r3, #29
 800670e:	d001      	beq.n	8006714 <__sflush_r+0xac>
 8006710:	2b16      	cmp	r3, #22
 8006712:	d11e      	bne.n	8006752 <__sflush_r+0xea>
 8006714:	602f      	str	r7, [r5, #0]
 8006716:	2000      	movs	r0, #0
 8006718:	e022      	b.n	8006760 <__sflush_r+0xf8>
 800671a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800671e:	b21b      	sxth	r3, r3
 8006720:	e01b      	b.n	800675a <__sflush_r+0xf2>
 8006722:	690f      	ldr	r7, [r1, #16]
 8006724:	2f00      	cmp	r7, #0
 8006726:	d0f6      	beq.n	8006716 <__sflush_r+0xae>
 8006728:	0793      	lsls	r3, r2, #30
 800672a:	680e      	ldr	r6, [r1, #0]
 800672c:	bf08      	it	eq
 800672e:	694b      	ldreq	r3, [r1, #20]
 8006730:	600f      	str	r7, [r1, #0]
 8006732:	bf18      	it	ne
 8006734:	2300      	movne	r3, #0
 8006736:	eba6 0807 	sub.w	r8, r6, r7
 800673a:	608b      	str	r3, [r1, #8]
 800673c:	f1b8 0f00 	cmp.w	r8, #0
 8006740:	dde9      	ble.n	8006716 <__sflush_r+0xae>
 8006742:	6a21      	ldr	r1, [r4, #32]
 8006744:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006746:	4643      	mov	r3, r8
 8006748:	463a      	mov	r2, r7
 800674a:	4628      	mov	r0, r5
 800674c:	47b0      	blx	r6
 800674e:	2800      	cmp	r0, #0
 8006750:	dc08      	bgt.n	8006764 <__sflush_r+0xfc>
 8006752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800675a:	81a3      	strh	r3, [r4, #12]
 800675c:	f04f 30ff 	mov.w	r0, #4294967295
 8006760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006764:	4407      	add	r7, r0
 8006766:	eba8 0800 	sub.w	r8, r8, r0
 800676a:	e7e7      	b.n	800673c <__sflush_r+0xd4>
 800676c:	dfbffffe 	.word	0xdfbffffe

08006770 <_fflush_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	690b      	ldr	r3, [r1, #16]
 8006774:	4605      	mov	r5, r0
 8006776:	460c      	mov	r4, r1
 8006778:	b913      	cbnz	r3, 8006780 <_fflush_r+0x10>
 800677a:	2500      	movs	r5, #0
 800677c:	4628      	mov	r0, r5
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	b118      	cbz	r0, 800678a <_fflush_r+0x1a>
 8006782:	6a03      	ldr	r3, [r0, #32]
 8006784:	b90b      	cbnz	r3, 800678a <_fflush_r+0x1a>
 8006786:	f7ff fa33 	bl	8005bf0 <__sinit>
 800678a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0f3      	beq.n	800677a <_fflush_r+0xa>
 8006792:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006794:	07d0      	lsls	r0, r2, #31
 8006796:	d404      	bmi.n	80067a2 <_fflush_r+0x32>
 8006798:	0599      	lsls	r1, r3, #22
 800679a:	d402      	bmi.n	80067a2 <_fflush_r+0x32>
 800679c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800679e:	f7ff fb8a 	bl	8005eb6 <__retarget_lock_acquire_recursive>
 80067a2:	4628      	mov	r0, r5
 80067a4:	4621      	mov	r1, r4
 80067a6:	f7ff ff5f 	bl	8006668 <__sflush_r>
 80067aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067ac:	07da      	lsls	r2, r3, #31
 80067ae:	4605      	mov	r5, r0
 80067b0:	d4e4      	bmi.n	800677c <_fflush_r+0xc>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	059b      	lsls	r3, r3, #22
 80067b6:	d4e1      	bmi.n	800677c <_fflush_r+0xc>
 80067b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067ba:	f7ff fb7d 	bl	8005eb8 <__retarget_lock_release_recursive>
 80067be:	e7dd      	b.n	800677c <_fflush_r+0xc>

080067c0 <_putc_r>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	460d      	mov	r5, r1
 80067c4:	4614      	mov	r4, r2
 80067c6:	4606      	mov	r6, r0
 80067c8:	b118      	cbz	r0, 80067d2 <_putc_r+0x12>
 80067ca:	6a03      	ldr	r3, [r0, #32]
 80067cc:	b90b      	cbnz	r3, 80067d2 <_putc_r+0x12>
 80067ce:	f7ff fa0f 	bl	8005bf0 <__sinit>
 80067d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067d4:	07d8      	lsls	r0, r3, #31
 80067d6:	d405      	bmi.n	80067e4 <_putc_r+0x24>
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	0599      	lsls	r1, r3, #22
 80067dc:	d402      	bmi.n	80067e4 <_putc_r+0x24>
 80067de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067e0:	f7ff fb69 	bl	8005eb6 <__retarget_lock_acquire_recursive>
 80067e4:	68a3      	ldr	r3, [r4, #8]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	60a3      	str	r3, [r4, #8]
 80067ec:	da05      	bge.n	80067fa <_putc_r+0x3a>
 80067ee:	69a2      	ldr	r2, [r4, #24]
 80067f0:	4293      	cmp	r3, r2
 80067f2:	db12      	blt.n	800681a <_putc_r+0x5a>
 80067f4:	b2eb      	uxtb	r3, r5
 80067f6:	2b0a      	cmp	r3, #10
 80067f8:	d00f      	beq.n	800681a <_putc_r+0x5a>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	701d      	strb	r5, [r3, #0]
 8006802:	b2ed      	uxtb	r5, r5
 8006804:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006806:	07da      	lsls	r2, r3, #31
 8006808:	d405      	bmi.n	8006816 <_putc_r+0x56>
 800680a:	89a3      	ldrh	r3, [r4, #12]
 800680c:	059b      	lsls	r3, r3, #22
 800680e:	d402      	bmi.n	8006816 <_putc_r+0x56>
 8006810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006812:	f7ff fb51 	bl	8005eb8 <__retarget_lock_release_recursive>
 8006816:	4628      	mov	r0, r5
 8006818:	bd70      	pop	{r4, r5, r6, pc}
 800681a:	4629      	mov	r1, r5
 800681c:	4622      	mov	r2, r4
 800681e:	4630      	mov	r0, r6
 8006820:	f000 f802 	bl	8006828 <__swbuf_r>
 8006824:	4605      	mov	r5, r0
 8006826:	e7ed      	b.n	8006804 <_putc_r+0x44>

08006828 <__swbuf_r>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	460e      	mov	r6, r1
 800682c:	4614      	mov	r4, r2
 800682e:	4605      	mov	r5, r0
 8006830:	b118      	cbz	r0, 800683a <__swbuf_r+0x12>
 8006832:	6a03      	ldr	r3, [r0, #32]
 8006834:	b90b      	cbnz	r3, 800683a <__swbuf_r+0x12>
 8006836:	f7ff f9db 	bl	8005bf0 <__sinit>
 800683a:	69a3      	ldr	r3, [r4, #24]
 800683c:	60a3      	str	r3, [r4, #8]
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	071a      	lsls	r2, r3, #28
 8006842:	d501      	bpl.n	8006848 <__swbuf_r+0x20>
 8006844:	6923      	ldr	r3, [r4, #16]
 8006846:	b943      	cbnz	r3, 800685a <__swbuf_r+0x32>
 8006848:	4621      	mov	r1, r4
 800684a:	4628      	mov	r0, r5
 800684c:	f000 f82a 	bl	80068a4 <__swsetup_r>
 8006850:	b118      	cbz	r0, 800685a <__swbuf_r+0x32>
 8006852:	f04f 37ff 	mov.w	r7, #4294967295
 8006856:	4638      	mov	r0, r7
 8006858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	6922      	ldr	r2, [r4, #16]
 800685e:	1a98      	subs	r0, r3, r2
 8006860:	6963      	ldr	r3, [r4, #20]
 8006862:	b2f6      	uxtb	r6, r6
 8006864:	4283      	cmp	r3, r0
 8006866:	4637      	mov	r7, r6
 8006868:	dc05      	bgt.n	8006876 <__swbuf_r+0x4e>
 800686a:	4621      	mov	r1, r4
 800686c:	4628      	mov	r0, r5
 800686e:	f7ff ff7f 	bl	8006770 <_fflush_r>
 8006872:	2800      	cmp	r0, #0
 8006874:	d1ed      	bne.n	8006852 <__swbuf_r+0x2a>
 8006876:	68a3      	ldr	r3, [r4, #8]
 8006878:	3b01      	subs	r3, #1
 800687a:	60a3      	str	r3, [r4, #8]
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	6022      	str	r2, [r4, #0]
 8006882:	701e      	strb	r6, [r3, #0]
 8006884:	6962      	ldr	r2, [r4, #20]
 8006886:	1c43      	adds	r3, r0, #1
 8006888:	429a      	cmp	r2, r3
 800688a:	d004      	beq.n	8006896 <__swbuf_r+0x6e>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	07db      	lsls	r3, r3, #31
 8006890:	d5e1      	bpl.n	8006856 <__swbuf_r+0x2e>
 8006892:	2e0a      	cmp	r6, #10
 8006894:	d1df      	bne.n	8006856 <__swbuf_r+0x2e>
 8006896:	4621      	mov	r1, r4
 8006898:	4628      	mov	r0, r5
 800689a:	f7ff ff69 	bl	8006770 <_fflush_r>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d0d9      	beq.n	8006856 <__swbuf_r+0x2e>
 80068a2:	e7d6      	b.n	8006852 <__swbuf_r+0x2a>

080068a4 <__swsetup_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4b29      	ldr	r3, [pc, #164]	@ (800694c <__swsetup_r+0xa8>)
 80068a8:	4605      	mov	r5, r0
 80068aa:	6818      	ldr	r0, [r3, #0]
 80068ac:	460c      	mov	r4, r1
 80068ae:	b118      	cbz	r0, 80068b8 <__swsetup_r+0x14>
 80068b0:	6a03      	ldr	r3, [r0, #32]
 80068b2:	b90b      	cbnz	r3, 80068b8 <__swsetup_r+0x14>
 80068b4:	f7ff f99c 	bl	8005bf0 <__sinit>
 80068b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068bc:	0719      	lsls	r1, r3, #28
 80068be:	d422      	bmi.n	8006906 <__swsetup_r+0x62>
 80068c0:	06da      	lsls	r2, r3, #27
 80068c2:	d407      	bmi.n	80068d4 <__swsetup_r+0x30>
 80068c4:	2209      	movs	r2, #9
 80068c6:	602a      	str	r2, [r5, #0]
 80068c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068cc:	81a3      	strh	r3, [r4, #12]
 80068ce:	f04f 30ff 	mov.w	r0, #4294967295
 80068d2:	e033      	b.n	800693c <__swsetup_r+0x98>
 80068d4:	0758      	lsls	r0, r3, #29
 80068d6:	d512      	bpl.n	80068fe <__swsetup_r+0x5a>
 80068d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068da:	b141      	cbz	r1, 80068ee <__swsetup_r+0x4a>
 80068dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068e0:	4299      	cmp	r1, r3
 80068e2:	d002      	beq.n	80068ea <__swsetup_r+0x46>
 80068e4:	4628      	mov	r0, r5
 80068e6:	f7ff faf7 	bl	8005ed8 <_free_r>
 80068ea:	2300      	movs	r3, #0
 80068ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068f4:	81a3      	strh	r3, [r4, #12]
 80068f6:	2300      	movs	r3, #0
 80068f8:	6063      	str	r3, [r4, #4]
 80068fa:	6923      	ldr	r3, [r4, #16]
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	f043 0308 	orr.w	r3, r3, #8
 8006904:	81a3      	strh	r3, [r4, #12]
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	b94b      	cbnz	r3, 800691e <__swsetup_r+0x7a>
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006914:	d003      	beq.n	800691e <__swsetup_r+0x7a>
 8006916:	4621      	mov	r1, r4
 8006918:	4628      	mov	r0, r5
 800691a:	f000 f84f 	bl	80069bc <__smakebuf_r>
 800691e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006922:	f013 0201 	ands.w	r2, r3, #1
 8006926:	d00a      	beq.n	800693e <__swsetup_r+0x9a>
 8006928:	2200      	movs	r2, #0
 800692a:	60a2      	str	r2, [r4, #8]
 800692c:	6962      	ldr	r2, [r4, #20]
 800692e:	4252      	negs	r2, r2
 8006930:	61a2      	str	r2, [r4, #24]
 8006932:	6922      	ldr	r2, [r4, #16]
 8006934:	b942      	cbnz	r2, 8006948 <__swsetup_r+0xa4>
 8006936:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800693a:	d1c5      	bne.n	80068c8 <__swsetup_r+0x24>
 800693c:	bd38      	pop	{r3, r4, r5, pc}
 800693e:	0799      	lsls	r1, r3, #30
 8006940:	bf58      	it	pl
 8006942:	6962      	ldrpl	r2, [r4, #20]
 8006944:	60a2      	str	r2, [r4, #8]
 8006946:	e7f4      	b.n	8006932 <__swsetup_r+0x8e>
 8006948:	2000      	movs	r0, #0
 800694a:	e7f7      	b.n	800693c <__swsetup_r+0x98>
 800694c:	20000108 	.word	0x20000108

08006950 <_sbrk_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4d06      	ldr	r5, [pc, #24]	@ (800696c <_sbrk_r+0x1c>)
 8006954:	2300      	movs	r3, #0
 8006956:	4604      	mov	r4, r0
 8006958:	4608      	mov	r0, r1
 800695a:	602b      	str	r3, [r5, #0]
 800695c:	f7f9 ff82 	bl	8000864 <_sbrk>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_sbrk_r+0x1a>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	b103      	cbz	r3, 800696a <_sbrk_r+0x1a>
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	2000b2cc 	.word	0x2000b2cc

08006970 <__swhatbuf_r>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	460c      	mov	r4, r1
 8006974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006978:	2900      	cmp	r1, #0
 800697a:	b096      	sub	sp, #88	@ 0x58
 800697c:	4615      	mov	r5, r2
 800697e:	461e      	mov	r6, r3
 8006980:	da0d      	bge.n	800699e <__swhatbuf_r+0x2e>
 8006982:	89a3      	ldrh	r3, [r4, #12]
 8006984:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006988:	f04f 0100 	mov.w	r1, #0
 800698c:	bf14      	ite	ne
 800698e:	2340      	movne	r3, #64	@ 0x40
 8006990:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006994:	2000      	movs	r0, #0
 8006996:	6031      	str	r1, [r6, #0]
 8006998:	602b      	str	r3, [r5, #0]
 800699a:	b016      	add	sp, #88	@ 0x58
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	466a      	mov	r2, sp
 80069a0:	f000 f848 	bl	8006a34 <_fstat_r>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	dbec      	blt.n	8006982 <__swhatbuf_r+0x12>
 80069a8:	9901      	ldr	r1, [sp, #4]
 80069aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069b2:	4259      	negs	r1, r3
 80069b4:	4159      	adcs	r1, r3
 80069b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069ba:	e7eb      	b.n	8006994 <__swhatbuf_r+0x24>

080069bc <__smakebuf_r>:
 80069bc:	898b      	ldrh	r3, [r1, #12]
 80069be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069c0:	079d      	lsls	r5, r3, #30
 80069c2:	4606      	mov	r6, r0
 80069c4:	460c      	mov	r4, r1
 80069c6:	d507      	bpl.n	80069d8 <__smakebuf_r+0x1c>
 80069c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	6123      	str	r3, [r4, #16]
 80069d0:	2301      	movs	r3, #1
 80069d2:	6163      	str	r3, [r4, #20]
 80069d4:	b003      	add	sp, #12
 80069d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d8:	ab01      	add	r3, sp, #4
 80069da:	466a      	mov	r2, sp
 80069dc:	f7ff ffc8 	bl	8006970 <__swhatbuf_r>
 80069e0:	9f00      	ldr	r7, [sp, #0]
 80069e2:	4605      	mov	r5, r0
 80069e4:	4639      	mov	r1, r7
 80069e6:	4630      	mov	r0, r6
 80069e8:	f7ff fae2 	bl	8005fb0 <_malloc_r>
 80069ec:	b948      	cbnz	r0, 8006a02 <__smakebuf_r+0x46>
 80069ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f2:	059a      	lsls	r2, r3, #22
 80069f4:	d4ee      	bmi.n	80069d4 <__smakebuf_r+0x18>
 80069f6:	f023 0303 	bic.w	r3, r3, #3
 80069fa:	f043 0302 	orr.w	r3, r3, #2
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	e7e2      	b.n	80069c8 <__smakebuf_r+0xc>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	6020      	str	r0, [r4, #0]
 8006a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a0a:	81a3      	strh	r3, [r4, #12]
 8006a0c:	9b01      	ldr	r3, [sp, #4]
 8006a0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a12:	b15b      	cbz	r3, 8006a2c <__smakebuf_r+0x70>
 8006a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a18:	4630      	mov	r0, r6
 8006a1a:	f000 f81d 	bl	8006a58 <_isatty_r>
 8006a1e:	b128      	cbz	r0, 8006a2c <__smakebuf_r+0x70>
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	f023 0303 	bic.w	r3, r3, #3
 8006a26:	f043 0301 	orr.w	r3, r3, #1
 8006a2a:	81a3      	strh	r3, [r4, #12]
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	431d      	orrs	r5, r3
 8006a30:	81a5      	strh	r5, [r4, #12]
 8006a32:	e7cf      	b.n	80069d4 <__smakebuf_r+0x18>

08006a34 <_fstat_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d07      	ldr	r5, [pc, #28]	@ (8006a54 <_fstat_r+0x20>)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	4611      	mov	r1, r2
 8006a40:	602b      	str	r3, [r5, #0]
 8006a42:	f7f9 ff05 	bl	8000850 <_fstat>
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	d102      	bne.n	8006a50 <_fstat_r+0x1c>
 8006a4a:	682b      	ldr	r3, [r5, #0]
 8006a4c:	b103      	cbz	r3, 8006a50 <_fstat_r+0x1c>
 8006a4e:	6023      	str	r3, [r4, #0]
 8006a50:	bd38      	pop	{r3, r4, r5, pc}
 8006a52:	bf00      	nop
 8006a54:	2000b2cc 	.word	0x2000b2cc

08006a58 <_isatty_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4d06      	ldr	r5, [pc, #24]	@ (8006a74 <_isatty_r+0x1c>)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	f7f9 fefa 	bl	800085c <_isatty>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_isatty_r+0x1a>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_isatty_r+0x1a>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	2000b2cc 	.word	0x2000b2cc

08006a78 <_init>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	bf00      	nop
 8006a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7e:	bc08      	pop	{r3}
 8006a80:	469e      	mov	lr, r3
 8006a82:	4770      	bx	lr

08006a84 <_fini>:
 8006a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a86:	bf00      	nop
 8006a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8a:	bc08      	pop	{r3}
 8006a8c:	469e      	mov	lr, r3
 8006a8e:	4770      	bx	lr
